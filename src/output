
=== ./a.py ===
import os

def list_files_and_print_content(base_dir, ignore_files=[], ignore_dirs=[]):
    for root, dirs, files in os.walk(base_dir):
        # Skip directories that should be ignored
        dirs[:] = [d for d in dirs if d not in ignore_dirs]

        for file in files:
            # Skip files that should be ignored
            if file not in ignore_files:
                file_path = os.path.join(root, file)
                print(f"\n=== {file_path} ===")
                try:
                    with open(file_path, 'r') as f:
                        content = f.read()
                        print(content)
                except Exception as e:
                    print(f"Could not read {file_path}: {e}")

# Define the base directory
base_dir = '.'

# Specify files and directories to ignore
ignore_files = ['ignored_file.txt', 'example.ignore', 'favicon.png', 'Animation - 1734246803250.webm']
ignore_dirs = ['node_modules', '.next', '.git', 'api', 'lessons', 'level1', 'level2', 'level3', 'level4', 'Section1', 'Section2', 'Section3', 'Section4', 'dist']

# Run the function to list files and print their content
list_files_and_print_content(base_dir, ignore_files, ignore_dirs)


=== ./i18n.ts ===
import {notFound} from "next/navigation";
import {getRequestConfig} from 'next-intl/server';
 
// Can be imported from a shared config
const locales = ['en', 'de', 'ar'];
 
export default getRequestConfig(async ({locale}) => {
  // Validate that the incoming `locale` parameter is valid
  if (!locales.includes(locale as any)) notFound();
 
  return {
    messages: (await import(`../messages/${locale}.json`)).default
  };
});

=== ./middleware.ts ===
import createMiddleware from 'next-intl/middleware';
import { localePrefix, locales, pathnames } from "./utils/navigation";

export default createMiddleware({
  defaultLocale: 'en',
  localePrefix,
  locales,
  pathnames
});
 
export const config = {
  matcher: ['/', '/(de|ar|en)/:path*']
};

=== ./output ===


=== ./abstract/CardContainer.tsx ===

import Image from "next/image";
import Neadle from "../../public/assets/images/border-needle.png";

const CardContainer = ({relative, children, scissors, noPadding, borderRadius, leftPosition, transparentBg, extraClasses}: {extraClasses?: string, relative?: boolean, transparentBg?: boolean, children: React.ReactNode, scissors: boolean, noPadding?: boolean, borderRadius?: number , leftPosition?: number}) => {
  //tailwind border dashed
  return (
    <div className={`${extraClasses ? extraClasses : ""} ${relative ? "relative" : ""} ${noPadding ? '' : "px-2 py-2"} ${transparentBg ? "bg-transparent" : "bg-primary-700"} h-full left-[21px]`} style={{
    // borderStyle: "dashed",
      backgroundImage: `url("data:image/svg+xml,%3csvg width='100%25' height='100%25' xmlns='http://www.w3.org/2000/svg'%3e%3crect width='100%25' height='100%25' fill='none' stroke='rgba(255, 217, 146, 1)' rx='${borderRadius ? borderRadius : '6'}' ry='${borderRadius ? borderRadius : '6'}' stroke-width='2' stroke-dasharray='6%2c 14' stroke-dashoffset='0' stroke-linecap='square'/%3e%3c/svg%3e")`,
      position: "relative",
      borderRadius: borderRadius ? borderRadius : 4.7,
      left: leftPosition !== undefined ? leftPosition : 0,
    }}>
      {
        scissors != false && <Image priority={true} unoptimized width={50} height={50} alt="" src={Neadle.src} style={{ height: 30, width: 30,
          position: "absolute",
          left: -18,
          top: 60,
        }} />
      }
      {children}
    </div>
  )
}

export default CardContainer;

=== ./abstract/index.ts ===
export * as CardContainer from "./CardContainer";


=== ./app/.DS_Store ===
Could not read ./app/.DS_Store: 'utf-8' codec can't decode byte 0xb8 in position 1067: invalid start byte

=== ./app/favicon.ico ===
Could not read ./app/favicon.ico: 'utf-8' codec can't decode byte 0xf9 in position 6: invalid start byte

=== ./app/globals.css ===
@tailwind base;
@tailwind components;
@tailwind utilities;

@font-face {
  font-family: DroidKufiBold;
  src: url("/assets/fonts/DroidKufi-Bold.ttf");
}

@font-face {
  font-family: DroidKufiRegular;
  src: url("/assets/fonts/DroidKufi-Regular.ttf");
}

body {
  @apply leading-[normal] m-0;
}

*,
::before,
::after {
  border-width: 0;
}

.rtlot>* {
  direction: rtl !important;
  font-family: DroidKufiRegular !important;
  line-height: 1.5;
}

.rtlot h1,
.rtlot>h2,
.rtlot>h3,
.rtlot>h4,
.rtlot>h5,
.rtlot h1 span {
  font-family: DroidKufiBold !important;
}

/* Set the width of the carousel to 100% and allow overflow */
.desktop-item-carousel .swiper {
  width: 100%;
  overflow: visible !important;
}

/* Set the width of each slide to 250px and add a transition effect */
.desktop-item-carousel .swiper .swiper-slide {
  width: 250px !important;
  transition: all 0.5s ease-in-out;
}

/* When hovering over a slide, display it as a flex container, center its content, and increase its width to 360px */
/* .desktop-item-carousel .swiper .swiper-slide:hover{
  display: flex;
  justify-content: center;
  width: 375px !important;
  margin: 0;
} */

/* Set the height of the item container to 404px */
.desktop-item-carousel .swiper-slide .item-container,
.swiper-slide .item-container .item {
  height: 404px !important;
}

/* Add a transition effect to the item and set the transform origin to the bottom */
.desktop-item-carousel .swiper-slide .item-container .item {
  transition: all 0.3s ease-in-out;
  transform-origin: bottom;
}

/* When hovering over an item, scale it to 1.5 times its original size */
/* .desktop-item-carousel .swiper-slide .item-container .item:hover{
  scale: 1.5;
} */

/* Set the width of the carousel to 100% and allow overflow */
.desktop-fabric-carousel .swiper {
  width: 100%;
  overflow: visible !important;
}

.desktop-fabric-carousel .swiper .swiper-slide {
  width: 250px !important;
  transition: all 0.5s ease-in-out;
}

.desktop-fabric-carousel .swiper-slide .item-container,
.desktop-fabric-carousel .swiper-slide .item-container .item {
  height: 256px !important;
}

/* Add a transition effect to the item and set the transform origin to the bottom */
.desktop-fabric-carousel .swiper-slide .item-container .item {
  transition: all 0.3s ease-in-out;
  transform-origin: bottom;
}

.desktop-tailor-carousel .swiper {
  width: 100%;
  overflow: visible !important;
}

/* Set the width of each slide to 250px and add a transition effect */
.desktop-tailor-carousel .swiper .swiper-slide {
  /* width: 575px !important; */
  transition: all 0.5s ease-in-out;
  /* max-width: 97vw !important; */
}

@media (max-width: 450px) {
  .desktop-tailor-carousel .swiper .swiper-slide {
    /* width: 390px !important; */
    transition: all 0.5s ease-in-out;
    /* max-width: 97vw !important; */
  }

  .desktop-tailor-carousel .swiper-slide .item-container,
  .desktop-tailor-carousel .swiper-slide .item-container .item {
    height: 250px !important;
  }
}

.desktop-tailor-carousel .swiper-slide .item-container,
.desktop-tailor-carousel .swiper-slide .item-container .item {
  height: 250px !important;
}

/* Add a transition effect to the item and set the transform origin to the bottom */
.desktop-tailor-carousel .swiper-slide .item-container .item {
  transition: all 0.3s ease-in-out;
  transform-origin: bottom;
}

/* When hovering over a slide, display it as a flex container, center its content, and increase its width to 360px */
/* .desktop-fabric-carousel .swiper .swiper-slide:hover{
  display: flex;
  justify-content: center;
  width: 360px !important;
  margin: 0;
} */

/* Set the height of the item container to 404px */

/* When hovering over an item, scale it to 1.5 times its original size */
/* .desktop-fabric-carousel .swiper-slide .item-container .item:hover{
  scale: 1.4;
} */

.productPageThumbs .swiper-slide-thumb-active {
  opacity: 1 !important;
}

.productPageThumbs .swiper-slide {
  opacity: .4;
  transition: opacity .5s ease-in-out;
}


/* Firefox */
* {
  scrollbar-width: thin;
  scrollbar-color: #FFD992 #023435;
}

/* Chrome, Edge and Safari */
*::-webkit-scrollbar {
  height: 10px;
  width: 10px;
}

*::-webkit-scrollbar-track {
  border-radius: 5px;
  background-color: #023435;
}

*::-webkit-scrollbar-track:hover {
  background-color: #023435;
}

*::-webkit-scrollbar-track:active {
  background-color: #023435;
}

*::-webkit-scrollbar-thumb {
  border-radius: 6px;
  background-color: #FFD992;
}

*::-webkit-scrollbar-thumb:hover {
  background-color: #FFB84E;
}

*::-webkit-scrollbar-thumb:active {
  background-color: #FFB84E;
}


/*------------------------------------------STEPPER CSS----------------------------------------*/
.ant-steps-item-container {
  opacity: .5;
}

.ant-steps-item-title {
  color: white !important;
  line-height: 1.5 !important;
  font-size: 12px !important;
}

.ant-steps-item-description {
  color: white !important;
  font-weight: 700 !important;
  font-size: 16px !important;
}

.ant-steps-item-finish .ant-steps-item-icon>.ant-steps-icon {
  color: #FFD992 !important;
}


input::-webkit-outer-spin-button,
input::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

/* Firefox */
input[type=number] {
  -moz-appearance: textfield;
}

.swiper-button-next,
.swiper-button-prev {
  color: #FFD992 !important;
}

.magincont img {
  max-width: unset !important;
}



/*------------------------------------------UPLOADER CSS----------------------------------------*/
.upload-item .upload-item-overlay {
  transition: all 0.3s ease-in-out;
  opacity: 0;
  visibility: hidden;
}

.upload-item:hover .upload-item-overlay {
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: rgba(0, 0, 0, 0.5);
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 10;
  opacity: 1;
  visibility: visible;
}

.choose-design-item-image .design-card-image-item-overlay {
  transition: all 0.3s ease-in-out;
  opacity: 0;
  visibility: hidden;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  z-index: 10;
  display: flex;
  justify-content: center;
  align-items: center;
}

.choose-design-item-image:hover .design-card-image-item-overlay {
  background-color: rgba(0, 0, 0, 0.5);
  position: absolute;
  opacity: 1;
  visibility: visible;
}


.tailor-home-carousel .swiper-pagination {
  bottom: -30px !important;
}

/* make the active dot same as secondary color */
.tailor-home-carousel .swiper-pagination-bullet-active {
  background-color: #FFD992 !important;
}

@media screen and (max-width: 768px) {
  .choose-design-item-image:hover .design-card-image-item-overlay {
    display: none !important;
    opacity: 0 !important;
  }
}

=== ./app/layout.tsx ===
import { SpeedInsights } from "@vercel/speed-insights/next";
import "./globals.css";
import { Roboto } from "next/font/google";
import React from "react";
import { Footer } from "@/components/layout/Footer";
import Navbar from "@/components/layout/Navbar";
import { NextIntlClientProvider, useLocale, useMessages } from "next-intl";
import AuthContextProvider from "@/provider/AuthContext";
import { Analytics } from '@vercel/analytics/react';
import 'react-toastify/dist/ReactToastify.css';


const inter = Roboto({
  subsets: ["latin"],
  weight: ["100", "300", "400", "500", "700", "900"],
  style: ["italic", "normal"],
  // display: 'swap',
});

export default function RootLayout({
  children,
  params,
}: {
  children: React.ReactNode;
  params: any;
}) {
  const messages = useMessages();
  const locale = useLocale();
  return (
    <html
      lang={locale}
      className={inter.className}
    >
      
      <body suppressHydrationWarning={true} className={`${inter.className} bg-primary  ${locale === "ar" ? " rtlot" : ""}`}>
        <NextIntlClientProvider
          locale={locale}
          messages={messages}
          timeZone="Asia/Dubai"
        // onError={(e) => console.error(e)}
        >
          <AuthContextProvider>
            <Navbar />
            {children}
            <Footer />
          </AuthContextProvider>
        </NextIntlClientProvider>
        {/* <SpeedInsights /> */}
        {/* <Analytics /> */}
      </body>
    </html>
  );
}


=== ./app/not-found.tsx ===
import { Link } from "@/utils";
import Image from "next/image";

export const dynamic = "force-dynamic";
const NotFoundPage = () => {

  return (
    <div className="w-full h-full mt-[-60px]">
      <div className="w-full h-screen flex flex-col items-center justify-center xs:px-5 ">
        <Image unoptimized src="/images/tailor-gif.gif" alt="404" width={"0"} height={"0"} sizes="100vw" className="w-[200px] aspect-square" />
        <h1 className="text-2xl font-bold my-5 text-center xs:my-5">The tailor is customizing this area for you</h1>
        <h2 className="text-md font-medium">Please don&apos;t distract him and go <Link href={"/"} prefetch={true} className="text-secondary text-underline">Home</Link></h2>
      </div>
    </div>
  )
}
export default NotFoundPage;


=== ./app/[locale]/loading.tsx ===
'use client'
import { Progress } from "@nextui-org/react";
import Image from "next/image";

export default function Loading () {
  return (
    <div className="w-screen h-screen flex items-center justify-center overflow-x-hidden overflow-y-hidden">
      <div className="w-full h-full flex flex-col items-center justify-center">
        <Image priority={true} unoptimized src={"/assets/images/neadle-thread.png"} width={100} height={100} alt="" />
        <Progress aria-label="Loading..." value={100} classNames={{indicator: "bg-white"}} className="w-[310px] max-w-[350px] mt-5 color-white white"/>
        <p className="text-caption text-xs mt-5">Tailor-Made Loading for Mikhwar&apos;s Finest.</p>
      </div>
    </div>
  )
}



=== ./app/[locale]/page.tsx ===
import Solitaire from '@/components/sliders/Solitaire'
import TextCard from "@/components/cards/TextCard";
import FabricCard from '@/components/cards/FabricCard';
import FabricCardHomePage from '@/components/cards/FabricCardHomePage';
import SmallTextCard from '@/components/cards/SmallTextCard';
import SolitaireCardSingle from '@/components/cards/SolitaireCardSingle';
import HomeProductCarousel from '@/components/sections/home-product-carousel';
import HomeFabricCarousel from '@/components/sections/home-fabric-carousel';
import HomeBannerSlider from '@/components/sections/home-banner-slider';
import { getFabricListing, getHomeData, getProductListing, getTailorListing } from '@/provider';
import { getLocale, getTranslations } from 'next-intl/server';
import { Metadata } from 'next';
import HomeTailorsCarousel from '@/components/sections/home-tailor-carousel';

export const metadata: Metadata = {
  title: "E-Khayati | Home",
  description: "E-Khayati Home Page",
}


const getData = async () => {
  const locale = await getLocale();
  const publicToken = "";
  const { data: productData, error: productError } = await getProductListing(publicToken, {
    "pagination[pageSize]": 10,
    locale: locale ?? "en",
    populate: "main_image, tailor",
  });
  const { data: fabricData, error: fabricError } = await getFabricListing(publicToken, {
    "pagination[pageSize]": 10,
    "pagination[page]": 1,
    locale: locale ?? "en",
    populate: "main_image",
  });

  const { data: tailorsData, error: tailorError } = await getTailorListing(publicToken, {
    "pagination[pageSize]": 10,
    "pagination[page]": 1,
    locale: locale ?? "en",
    populate: "image",
    sort: "updatedAt:desc"
  });

  const { data: homeData, error: homeError } = await getHomeData(publicToken, {
    populate: "home_banner,home_banner.image,show_case_mekhwar,show_case_mekhwar.tailor,show_case_mekhwar.main_image,show_case_fabrics,show_case_fabrics.tailor,show_case_fabrics.main_image,textbox,textbox.actions,textbox.background,discount,card_products,card_products.mekhwar,card_products.mekhwar.main_image,card_products.mekhwar.tailor",
    locale: locale ?? "en",
  });
  
  if (productError || fabricError || homeError) {
    
  }

  return { productData, fabricData, homeData, tailorsData };
}

export default async function Home() {

  const {productData, fabricData, homeData, tailorsData} = await getData();
  const tShop = await getTranslations("shop");
  const t = await getTranslations("home");

  return (
    <main className="min-h-screen p-3 min-w-screen w-full flex flex-col items-center justify-start overflow-hidden">
      <div className='w-full max-w-main  xs:py-0 md:px-3 flex flex-wrap justify-between'>
      <div className=" xs:box-border large:hidden">
          <TextCard
            firstWord={homeData?.data?.attributes?.textbox?.first_word}
            title={homeData?.data?.attributes?.textbox?.title}
            description={homeData?.data?.attributes?.textbox?.description}
            actions={homeData?.data?.attributes?.textbox?.actions || []}
            background={homeData?.data?.attributes?.textbox?.background?.data?.attributes?.url}
          />
        </div>

        <div className="max-h-[407px] mt-5 xs:mt-5 small:mt-5 medium:mt-5 xs:box-border xs:h-[auto] sm:p-0 large:w-[78%] lg:max-h-[407px] w-full">
          <HomeBannerSlider item={homeData?.data?.attributes?.home_banner?.map((banner, index) => {
            return {
              image: banner?.image?.data?.attributes?.url,
              title: banner?.title,
              subtitle: banner?.description,
              link: banner?.link || "#" + index,
            }
          })} />
        </div>

        <div className="mt-3 xs:mt-5 xs:hidden small:hidden medium:hidden lg:w-[20%] overflow-visible xs:w-full xs:justify-center xs:items-center">
          <Solitaire 
            items={homeData?.data?.attributes?.card_products?.map((product) => {
              return {
                //@ts-ignore
                image: product?.mekhwar?.data?.attributes?.main_image?.data?.attributes?.url,
                title: product?.mekhwar?.data?.attributes?.title,
                price: product.mekhwar?.data?.attributes?.price,
                rating: product.mekhwar?.data?.attributes?.rating,
                id: product.mekhwar?.data?.id,
                //@ts-ignore
                tailorName: product.mekhwar?.data?.attributes?.tailor?.data?.attributes?.name,
                customizable: product.mekhwar?.data?.attributes?.customizable
              }
            })}
          />
        </div>

        <div className="xs:hidden xs:box-border medium:hidden small:hidden lg:w-[56%] mt-5 xs:mt-8">
          <TextCard
            firstWord={homeData?.data?.attributes?.textbox?.first_word}
            title={homeData?.data?.attributes?.textbox?.title}
            description={homeData?.data?.attributes?.textbox?.description}
            actions={homeData?.data?.attributes?.textbox?.actions || []}
            background={homeData?.data?.attributes?.textbox?.background?.data?.attributes?.url}
          />
        </div>

        

        <div className="p-3 mt-7 xs:hidden small:hidden medium:hidden">
          <div className="flex flex-col items-center justify-center">
            <FabricCard
              name={homeData?.data?.attributes?.show_case_fabrics?.data?.[0]?.attributes?.name}
              price={homeData?.data?.attributes?.show_case_fabrics?.data?.[0]?.attributes?.price}
              //@ts-ignore
              image={homeData?.data?.attributes?.show_case_fabrics?.data?.[0]?.attributes?.main_image?.data?.attributes?.url}
              tailorName={""}
              id={homeData?.data?.attributes?.show_case_fabrics?.data?.[0]?.id}
            />
            <div className="xs:mt-6 sm:mt-8"></div>
            <FabricCard
              name={homeData?.data?.attributes?.show_case_fabrics?.data?.[1]?.attributes?.name}
              price={homeData?.data?.attributes?.show_case_fabrics?.data?.[1]?.attributes?.price}
              //@ts-ignore
              image={homeData?.data?.attributes?.show_case_fabrics?.data?.[1]?.attributes?.main_image?.data?.attributes?.url}
              tailorName={""}
              id={homeData?.data?.attributes?.show_case_fabrics?.data?.[1]?.id}
            />
          </div>
        </div>
        <div className="mt-5">
          <div className="flex flex-col items justify-center">
          <div className="large:mt-5 ">
              <SmallTextCard
                title={homeData?.data?.attributes?.discount?.title}
                description={homeData?.data?.attributes?.discount?.description}
                link={homeData?.data?.attributes?.discount?.link}
              /> 
            </div>
            <div className='mt-5'>
            <SolitaireCardSingle 
              tailorName={homeData?.data?.attributes?.show_case_mekhwar?.data?.attributes?.tailor?.data?.attributes?.name}
              title={homeData?.data?.attributes?.show_case_mekhwar?.data?.attributes?.title}
              price={homeData?.data?.attributes?.show_case_mekhwar?.data?.attributes?.price}
              rating={homeData?.data?.attributes?.show_case_mekhwar?.data?.attributes?.rating}
              image={homeData?.data?.attributes?.show_case_mekhwar?.data?.attributes?.main_image?.data?.attributes?.url}
              id={homeData?.data?.attributes?.show_case_mekhwar?.data?.id}
              customizable={homeData?.data?.attributes?.show_case_mekhwar?.data?.attributes?.customizable}
            />
            </div>
          </div>
        </div>
        <div className="p-5 xs:hidden small:hidden large:hidden lg:w-[20%] overflow-visible xs:w-full xs:justify-center xs:items-center">
          <Solitaire 
            items={homeData?.data?.attributes?.card_products?.map((product) => {
              return {
                //@ts-ignore
                image: product?.mekhwar?.data?.attributes?.main_image?.data?.attributes?.url,
                title: product?.mekhwar?.data?.attributes?.title,
                price: product.mekhwar?.data?.attributes?.price,
                rating: product.mekhwar?.data?.attributes?.rating,
                id: product.mekhwar?.data?.id,
                //@ts-ignore
                tailorName: product.mekhwar?.data?.attributes?.tailor?.data?.attributes?.name,
                customizable: product.mekhwar?.data?.attributes?.customizable
              }
            })}
          />
        </div>
        <div className="mt-5 max-w-[auto] large:hidden">
          <div className="flex flex-col items-center justify-center">
            <FabricCardHomePage
              name={homeData?.data?.attributes?.show_case_fabrics?.data?.[0]?.attributes?.name}
              price={homeData?.data?.attributes?.show_case_fabrics?.data?.[0]?.attributes?.price}
              //@ts-ignore
              image={homeData?.data?.attributes?.show_case_fabrics?.data?.[0]?.attributes?.main_image?.data?.attributes?.url}
              tailorName={""}
              id={homeData?.data?.attributes?.show_case_fabrics?.data?.[0]?.id}
            />
            <div className="mt-5"></div>
            <FabricCardHomePage
              name={homeData?.data?.attributes?.show_case_fabrics?.data?.[1]?.attributes?.name}
              price={homeData?.data?.attributes?.show_case_fabrics?.data?.[1]?.attributes?.price}
              //@ts-ignore
              image={homeData?.data?.attributes?.show_case_fabrics?.data?.[1]?.attributes?.main_image?.data?.attributes?.url}
              tailorName={""}
              id={homeData?.data?.attributes?.show_case_fabrics?.data?.[1]?.id}
            />
          </div>
        </div>
        <div className="p-5 mt-5 medium:hidden large:hidden overflow-visible xs:w-full xs:justify-center xs:items-center small:w-full small:justify-center small:items-center">
          <Solitaire 
            items={homeData?.data?.attributes?.card_products?.map((product) => {
              return {
                //@ts-ignore
                image: product?.mekhwar?.data?.attributes?.main_image?.data?.attributes?.url,
                title: product?.mekhwar?.data?.attributes?.title,
                price: product.mekhwar?.data?.attributes?.price,
                rating: product.mekhwar?.data?.attributes?.rating,
                id: product.mekhwar?.data?.id,
                //@ts-ignore
                tailorName: product.mekhwar?.data?.attributes?.tailor?.data?.attributes?.name,
                customizable: product.mekhwar?.data?.attributes?.customizable
              }
            })}
          />
        </div>
      </div>

      <HomeProductCarousel
        key={"home-fabric-carousel"}
        title={t("browse_mekhwar_l")}
        coloredTitle={t("browse_mekhwar_t")}
        description={t("browse_mekhwar_description")}
        items={productData?.data?.map(prods => {
          return {
            title: prods.attributes?.title,
            price: prods.attributes?.price,
            image: prods.attributes?.main_image?.data?.attributes?.url,
            id: prods.id,
            rating: prods.attributes?.rating,
            tailorName: prods.attributes?.tailor?.data?.attributes?.name,
            customizable: prods.attributes?.customizable,
          }
        })}
      />

      <HomeTailorsCarousel
        title={t("available_tailors_l")}
        coloredTitle={t("available_tailors_t")}
        description={t("available_tailors_description")}
        align='proper'
        items={tailorsData?.data?.map(tailors => {
          return {
            title: tailors.attributes?.name,
            image: tailors.attributes?.image?.data?.attributes?.url,
            id: tailors.id,
            attributes: tailors.attributes,
            description: tailors.attributes?.description,
          }
        })}
      />

      {typeof fabricData?.data?.length === "number" && fabricData?.data?.length > 0 && <HomeFabricCarousel
        title={t("available_fabrics_l")}
        coloredTitle={t("available_fabrics_t")}
        description={t("start_desiging_description")}
        align="proper"
        items={fabricData?.data?.map(fabrics => {
          return {
            title: fabrics.attributes?.name,
            price: fabrics.attributes?.price,
            image: fabrics.attributes?.main_image?.data?.attributes?.url,
            id: fabrics.id,
          }
        })}
      />}
    </main>
  )
}

=== ./app/[locale]/providers.tsx ===
// app/providers.tsx
'use client'
import {NextUIProvider} from '@nextui-org/react'

export function Providers({children}: { children: React.ReactNode }) {
    return (
        <NextUIProvider>
            {children}
        </NextUIProvider>
    )
}


=== ./app/[locale]/about/page.tsx ===
import CardContainer from "@/abstract/CardContainer";
import ShopPageHeader from "@/components/shop/shop-page-header";
import { getAboutUs } from "@/provider";
import { Link } from "@/utils";
import { IconLink } from "@tabler/icons-react";
import { getLocale, getTranslations } from "next-intl/server";
import Image from "next/image";

const getData = async () => {
  const locale = await getLocale();
  const { data } = await getAboutUs(locale);
  return data;
};

export default async function AboutUsPage(props: any) {
  const data = await getData();
  const t = await getTranslations("about");
  const locale = await getLocale();

  return (
    <main className="w-full px-5 py-10 min-h-dvh flex flex-col justify-start items-center">
      <section className="w-full max-w-main flex items-start justify-start mb-5">
        <ShopPageHeader title="About" coloredTitle="Us" description="" />
      </section>
      <section className="max-w-main w-full grid grid-cols-1 sm:grid-cols-2 gap-5">
        <article
          className=""
          dangerouslySetInnerHTML={{
            __html: data?.data?.attributes?.about || "About Us",
          }}
        />
        <article className="flex flex-row flex-wrap">
          <div className="w-[50%] p-2">
            <CardContainer scissors={false} extraClasses="px-3 py-3" noPadding>
              <Image
                unoptimized
                src={
                  data?.data?.attributes?.show_case_1?.data?.attributes?.url ||
                  ""
                }
                alt={
                  data?.data?.attributes?.show_case_1?.data?.attributes?.name ||
                  ""
                }
                width={"0"}
                height={"0"}
                sizes="1vh"
                className="w-full h-full object-cover rounded-sm"
              />
            </CardContainer>
          </div>
          <div className="w-[50%] p-2">
            <CardContainer scissors={false} extraClasses="px-3 py-3" noPadding>
              <Image
                unoptimized
                src={
                  data?.data?.attributes?.show_case_2?.data?.attributes?.url ||
                  ""
                }
                alt={
                  data?.data?.attributes?.show_case_2?.data?.attributes?.name ||
                  ""
                }
                width={"0"}
                height={"0"}
                sizes="1vh"
                className="w-full h-full object-cover rounded-sm"
              />
            </CardContainer>
          </div>

          <div className="w-full h-[50%] p-2">
            <CardContainer scissors={false} extraClasses="px-3 py-3" noPadding>
              <Image
                unoptimized
                src={
                  data?.data?.attributes?.show_case_3?.data?.attributes?.url ||
                  ""
                }
                alt={
                  data?.data?.attributes?.show_case_3?.data?.attributes?.name ||
                  ""
                }
                width={"0"}
                height={"0"}
                sizes="1vh"
                className="w-full h-full object-cover rounded-sm"
              />
            </CardContainer>
          </div>
        </article>
      </section>

      <section
        id="howItWorksSection"
        className="w-full max-w-main flex flex-col justify-center items-center"
      >
        <h1 className="text-secondary-800 text-4xl text-center w-full font-bold my-12">
          {data?.data?.attributes?.how_it_works?.title}
        </h1>
        <div className="steps grid xs:grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-5 w-full justify-items-center content-center">
          {data?.data?.attributes?.how_it_works?.step?.map(
            (step, index: number) => {
              return (
                <div
                  key={`step-${index}`}
                  className="step w-full flex flex-col items-center justify-start"
                >
                  <div className="text-white text-xl bg-primary-800 w-14 h-14 flex justify-center items-center rounded-full">
                    {step.number}
                  </div>

                  <h1 className="text-secondary-800 text-2xl text-center w-full font-bold mt-4">
                    {step.title}
                  </h1>

                  <p className="text-caption text-center xs:w-full px-2 w-[80%] break-words mt-4">
                    {step.description}
                  </p>
                </div>
              );
            }
          )}
        </div>
      </section>
      <section
        id="linkBox"
        className="w-full flex flex-row justify-center items-center mt-12"
      >
        {/**@ts-ignore */}
        <Link
          href={{
            //@ts-ignore
            pathname: data?.data?.attributes?.purchase_policy_url || "",
          }}
          className="text-white font-bold text-2xl flex flex-row justify-center items-center hover:text-secondary"
        >
          <IconLink className="mr-2" /> {t("our_purchase_policy")}
        </Link>
      </section>
    </main>
  );
}


=== ./app/[locale]/cart/page.tsx ===
'use client'
import ItemListContainer from "./components/ItemListContainer";
import CartSummary from "./components/CartSummary";
import { useEffect, useState } from "react";
import { useAuth } from "@/provider/AuthContext";
import { Link, useRouter } from "@/utils";
import Loading from "../loading";
import { getUserCart, storeCart } from "@/utils/cart";
import { CircularProgress } from "@nextui-org/react";
import { decrementCartItem, getSiteConfig, incrementCartItem, removeCartItem } from "@/provider";
import Image from "next/image";
import { CartHeader } from "./components/CartHeader";

const Cart = () => {

  const [loading, setLoading] = useState(true);
  const [loadCompleted, setLoadCompleted] = useState(true);
  const [cartData, setCartData] = useState<any>(null);
  const [updating, setUpdating] = useState(false);
  const [deliveryCharge, setDeliveryCharge] = useState(0);
  const [tax, setTax] = useState(0);
  const [deliveryNote, setDeliveryNote] = useState("");

  const ctx = useAuth();
  const router = useRouter();

  const loadData = async () => {
    if (!ctx.checkAuth()) {
      return router.push("/login");
    }

    const cartItems = getUserCart();
    setCartData(cartItems);

    const { data } = await getSiteConfig();
    setDeliveryCharge(data?.data?.attributes?.delivery_charge || 0);
    setTax(data?.data?.attributes?.tax || 0);
    setDeliveryNote(data?.data?.attributes?.delivery_note || "");
    setLoadCompleted(true);
    setLoading(false);
  }

  const handleCartItemAction = async (action: "increment" | "decrement" | "delete", item: any) => {
    if (!item) return;
    setUpdating(true);
    let res: any = null;
    switch (action) {
      case "increment":
        res = await incrementCartItem(ctx.token, { id: item.id, dataType: item.type });
        break;
      case "decrement":
        res = await decrementCartItem(ctx.token, { id: item.id , dataType: item.type });
        break;
      case "delete":
        res = await removeCartItem(ctx.token, { id: item.id, dataType: item.type });
        break;
    }
    if (res?.data) updateCartDetails(res?.data);
    if (res?.error) {
      setUpdating(false);
    }
  }

  const updateCartDetails = (data: any) => {
    //@ts-ignore
    storeCart(data);
    setCartData(data);
    setUpdating(false);
  }

  useEffect(() => {
    loadData();
  }, []);

  const classes = [
    "w-full",
    "h-full",
    "xs:h-auto sm:h-auto",
    "xs:grid-cols-1 xs:gap-x-0 sm:grid-cols-1 sm:gap-x-0",
    "grid lg:grid-cols-2 gap-x-5",
    "max-w-[2000px]",
  ];
  

  if (loadCompleted) return (
    <div className="w-full min-h-screen flex flex-col items-start justify-start sm:py-5 sm:px-12 xs:p-4">

      {
        updating && <div className="h-screen w-screen fixed left-0 top-0 flex flex-row justify-center items-center bg-black/50 z-50">
          <CircularProgress color="secondary" />
        </div>
      }

      <div className="w-full" onClick={() => router.back()}>
        <CartHeader />
      </div>

      {
        (loading || !loadCompleted) && <div className="h-[90vh] w-full flex flex-row justify-center items-center">
          <CircularProgress color="secondary" />
        </div>
      }
      {
        loadCompleted && (cartData?.custom?.length > 0 || cartData?.custom?.length > 0) && <div className="conat w-full flex flex-col items-center justify-center xs:mt-[-30px]">
          <div className={classes.join(" ")}>

            <ItemListContainer handleAction={handleCartItemAction} customItems={[]} items={cartData?.custom} />

            <CartSummary 
              custom={cartData?.custom} 
              mekhwars={cartData?.custom}
              deliveryNote={deliveryNote}
              deliveryCharge={deliveryCharge}
              tax={tax}
            />
          </div>
        </div>
      }


      {
        loadCompleted && (!cartData?.custom?.length && !cartData?.custom?.length) && <div className="w-full h-[50vh] flex flex-col items-center justify-center">
          <Image unoptimized src={"/assets/images/empty-cart.png"} width={300} height={300} alt="Empty cart image" />
          <p className="text-caption text-[20px]">Cart is empty, check this <Link prefetch={true} href={"/shop"} className="text-secondary underline">Page</Link> out</p>
        </div>
      }
    </div>
  );

  return <Loading />
}

export default Cart;

=== ./app/[locale]/cart/components/CartHeader.tsx ===
'use client'
import ShopPageHeader from "@/components/shop/shop-page-header"
import { useTranslations } from "next-intl"

export const CartHeader = () => {
  const t = useTranslations("shop");
  return <ShopPageHeader title="" coloredTitle={t("cart")} description={t("cart_description")} />
}

=== ./app/[locale]/cart/components/CartSummary.tsx ===
'use client'
import CardContainer from "@/abstract/CardContainer";
import ApplyCoupon from "./ApplyCoupon";
import CheckoutBreakdown from "./CheckoutBreakdown";
import { Button } from "@nextui-org/react";
import DeliveryNote from "./DeliverNote";
import { useEffect, useState } from "react";
import { useRouter } from "@/utils";
import { getUserCart } from "@/utils/cart";
import qs from "qs";
import { useTranslations } from "next-intl";
export interface CartSummaryProps {
  mekhwars?: any[];
  custom?: any[];
  deliveryNote?: string;
  tax?: number;
  deliveryCharge?: number;
}

export default function CartSummary(props: CartSummaryProps) {

  const [totalItems, setTotalItems] = useState(0);
  const [subTotal, setSubtotal] = useState(0);
  const [deliveryNote, setDeliveryNote] = useState("");
  const [deliveryDetails, setDeliveryDetails] = useState("");
  const [discount, setDiscount] = useState(0);
  const [deliveryCharge, setDeliveryCharge] = useState(0);
  const [tax, setTax] = useState(0);
  const [couponCode, setCouponCode] = useState("");

  const router = useRouter();
  const t = useTranslations("shop");

  useEffect(() => {
    loadData();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [props?.custom]);

  const handleCheckout = () => {
    const cart = getUserCart();

    router.push({
      pathname: "/checkout/address",
      query: {
        cartId: cart?.id,
        couponCode,
        deliveryNote,
        deliveryCharge,
        tax,
        discount,
      },
    })
  }

  const loadData = () => {
    setDeliveryCharge(props.deliveryCharge || 0);
    setDeliveryDetails(props?.deliveryNote ?? "");
    if (props.custom) {
      let t = 0;
      let st = 0;

      props.custom.forEach((item: any) => {
        t += item?.quantity;
        st += item.mekhwar?.price * item?.quantity;
      });

      setTotalItems(t);
      setSubtotal(st);
    }
  }

  useEffect(() => {
    setDeliveryCharge(props?.deliveryCharge || 0);
    if (props?.tax) {
      setTax((props?.tax / 100) * subTotal);
    }
  }, [props?.tax, subTotal, props?.deliveryCharge]);

  const handleAddCoupon = (data: { type: "Flat" | "Percentage", amount: number }, code?: string) => {
    setCouponCode(code || "");
    if (data.type === "Flat") {
      if (data.amount > subTotal) {
        setDiscount(subTotal);
      } else {
        setDiscount(data.amount);
      }
    } else if (data.type === "Percentage") {
      setDiscount(data.amount * subTotal / 100);
    }
  }

  const handleRemoveCoupon = () => {
    setCouponCode("");
    setDiscount(0);
  }

  return (
    <CardContainer scissors={false}>
      <div className="price p-8 xs:p-4">
        <h1 className="text-white font-bold text-lg mb-5">{t("order_summary")}</h1>

        <CheckoutBreakdown items={[
          { name: t("items"), value: totalItems.toString() },
          { name: t("subtotal"), value: "AED " + subTotal },
        ]} />

        <div className="my-6"></div>

        <ApplyCoupon onApply={handleAddCoupon} onRemove={handleRemoveCoupon} />

        <div className="my-6"></div>

        <DeliveryNote value={deliveryNote} onChange={setDeliveryNote} />

        <div className="my-6"></div>

        <CheckoutBreakdown items={[
          { name: t("discount"), value: "AED " + discount },
          { name: t("tax"), value: "AED " + tax },
          { name: t("delivery_charge"), value: "AED " + deliveryCharge },
          { name: t("total"), value: "AED " + (subTotal + deliveryCharge - discount + tax) },
        ]} />

        <div className="my-6"></div>

        <p className="text-caption font-italic text-italic">{deliveryDetails}</p>

        <div className="my-6"></div>

        <Button onClick={handleCheckout} className="w-full bg-secondary-800 text-black py-5 px-7 rounded-[6px] text-[15px] min-h-[50px] max-h-[50px]">{t("checkout")}</Button>
      </div>
    </CardContainer>
  );
}

=== ./app/[locale]/cart/components/index.ts ===
export * as CartHeader from "./CartHeader";
export * as CartSummary from "./CartSummary";
export * as ItemListContainer from "./ItemListContainer";


=== ./app/[locale]/cart/components/ItemListContainer.tsx ===
'use client'
import { Button } from "@nextui-org/react";
import CartItem from "./CartItem";
import { useEffect, useRef, useState } from "react";
import { motion, useAnimationControls } from "framer-motion";
import { IconSquareRoundedArrowDown } from "@tabler/icons-react";
import { useLocale, useTranslations } from "next-intl";

export interface ItemListContainerProps {
  items?: any[];
  customItems?: any[];
  handleAction?: (action: "increment" | "decrement" | "delete", item: any) => void;
}

export default function ItemListContainer(props: ItemListContainerProps) {

  const [hideArrow, setHideArrow] = useState(false);

  const controls = useAnimationControls();

  const containerRef = useRef<HTMLDivElement>(null);

  const t = useTranslations("shop");
  const locale = useLocale();

  useEffect(() => {
    if (containerRef?.current != undefined) {
      if (containerRef?.current?.scrollHeight - 10 >= containerRef?.current?.offsetHeight) setHideArrow(true)
    }
  }, [containerRef?.current?.scrollHeight])
  
  const handleScroll = (e: any) => {
    if (e.target.scrollTop > 0) controls.start({ opacity: '0'}, {duration: 0.5, ease: 'easeInOut'})
    else controls.start({ opacity: '1'}, { duration: 0.5, ease: 'easeInOut' })
  }

  const handleScrollDown = () => {
    if (containerRef.current) containerRef.current.scrollTo({top: containerRef.current.scrollHeight, behavior: 'smooth'})
  }
  
  return (
    <div style={{
      overflowX: "hidden"
    }} className="items max-w-full xs:max-h-full sm:max-h-full lg:overflow-scroll relative lg:max-h-[638px]" onScroll={handleScroll} ref={containerRef}>
      <div className="w-full flex flex-row justify-start items-start">
        <h1 className="text-white font-medium text-xl">{t("shopping_cart")}</h1>
      </div>

      <div className="item-list">
        {
          props?.items?.map((item, index) => <CartItem
          index={index}
          key={"mekhwar-" + index}
          image={item?.mekhwar?.main_image?.url}
          name={locale == item?.mekhwar?.locale ? item?.mekhwar?.title : item?.mekhwar?.localizations?.[0]?.title}
          price={item?.mekhwar?.price}
          quantity={item?.quantity}
          action={props.handleAction}
          id={item?.id}
          type={"custom"}
          />)
        }
      </div>

      <motion.div animate={controls} transition={{duration: 0.5, ease: 'easeInOut'}} className={`${!hideArrow ? 'hidden xs:hidden sm:hidden md:hidden lg:hidden' : ''} xs:hidden sm:hidden md:hidden lg:flex bg-gradient-to-b from-transparent from-10% to-black/30 rounded-[8px] to-100% w-full flex-row justify-center items-center sticky  bottom-0 left-0 h-[60px]`}>
        <Button onClick={handleScrollDown} className="animate-bounce bg-transparent rounded-full" isIconOnly><IconSquareRoundedArrowDown className="text-secondary-800 text-3xl" /></Button>
      </motion.div>
    </div>
  )
}

=== ./app/[locale]/cart/components/ApplyCoupon/index.tsx ===
'use client'
import { applyCoupon, extractError } from "@/provider";
import { useAuth } from "@/provider/AuthContext";
import { Button, Input } from "@nextui-org/react";
import { useTranslations } from "next-intl";
import { useState } from "react";
import { toast, ToastContainer } from "react-toastify";

export interface ApplyCouponProps {
  onApply: (data: { type: "Flat" | "Percentage", amount: number }, code?: string) => void;
  onRemove: () => void;
}
export default function ApplyCoupon(props: ApplyCouponProps) {

  const [loading, setLoading] = useState(false);
  const [couponCode, setCouponCode] = useState("");
  const [couponType, setCouponType] = useState<"Flat" | "Percentage" | null>(null);
  const [couponAmount, setCouponAmount] = useState(0);

  const ctx = useAuth();
  const t = useTranslations("shop");

  const handleApply = async () => {
    try {
      if (!couponCode) return;
      setLoading(true);
      const { data, error } = await applyCoupon(ctx.token, { code: couponCode });

      if (data != undefined) {
        //@ts-ignore
        setCouponType(data?.type);
        //@ts-ignore
        setCouponAmount(data?.amount);
        //@ts-ignore
        props.onApply(data);
        toast.success("Coupon applied successfully");
      }
      if (error) {
        toast.error(extractError(error));
      }
    } catch (err) {
      toast.error(extractError(err));
    }
    setLoading(false);
  }

  const handleRemove = () => {
    props.onRemove();
    setCouponCode("");
    setCouponType(null);
    setCouponAmount(0);
  }

  return (
    <div className="w-full h-full flex flex-col items-start justify-start">
      <h3>{t("dicount_promo_code")}</h3>

      <div className="my-1"></div>

      <div className="flex flex-row justify-between items-center bg-primary px-2 py-2 rounded-[8px] w-full min-h-[50px]">
        <Input
          classNames={{
            mainWrapper: "py-0 h-[30px] max-h-[30px]",
            innerWrapper: " py-0 h-[30px] max-h-[30px]",
            inputWrapper: "h-[30px] min-h-[30px] max-h-[30px] text-white bg-transparent active:bg-transparent data-[hover=true]:bg-transparent data-[focus=true]:bg-transparent group[data-fucus=true]:bg-transparent group-data-[focus=true]:bg-transparent group-data-[hover=true]:bg-transparent py-0",
            helperWrapper: "py-0 h-[30px] max-h-[30px]",
            input: "h-[30px] max-h-[30px]",
            label: "hidden"
          }}
          value={couponCode}
          onChange={(e) => setCouponCode(e.target.value)}
          disabled={loading}
        />
        {
          couponType !== null ? <Button onClick={handleRemove} isLoading={loading} variant="bordered" className="bg-primary text-sm text-white/50 border-white/20 font-medium rounded-[6px] min-h-[5px] h-[30px] text-[12px] active:border-secondary active:text-secondary">Remove</Button> :
          <Button onClick={handleApply} isLoading={loading} variant="bordered" className="bg-primary text-sm text-white/50 border-white/20 font-medium rounded-[6px] min-h-[5px] h-[30px] text-[12px] active:border-secondary active:text-secondary">{t("apply")}</Button>
        }
      </div>

      <ToastContainer />
    </div>
  )
}

=== ./app/[locale]/cart/components/CartItem/index.tsx ===
"use client";
import React from "react";
import CartItemDescription from "./components/CartItemDescription";
import CartItemImage from "./components/CartItemImage";
import CartItemPrice from "./components/CartItemPrice";
import CartItemQuantity from "./components/CartItemQuantity";
import CartItemRemoveButton from "./components/CartItemRemoveButton";

export interface CartItemProps {
  index: number;
  image?: string;
  name?: string;
  price?: number;
  quantity?: number;
  id?: number;
  action?: (action: "increment" | "decrement" | "delete", item: any) => void;
  type: "mekhwar" | "custom";
}

export default function CartItem(props: CartItemProps): JSX.Element {
  return (
    <div
      className={`cart-item w-full grid xs:grid-cols-1 sm:grid-cols-2 lg:grid-cols-2 py-8 ${
        props.index === 0 ? "border-t-0" : "border-t-1"
      } border-secondary-800`}
    >
      <div className="lefti flex flex-row">
        <CartItemImage src={props.image} />
        {/* @ts-ignore */}
        <CartItemDescription
          action={props?.action}
          price={props.price}
          quantity={props.quantity}
          onClick={props?.action || (() => {})}
          type={props.type}
          name={props.name}
          code={"#" + Date.now()}
          id={props.id}
        />
      </div>

      <div className="lg:flex md:flex xs:hidden righti flex flex-row items-center justify-between">
        <CartItemQuantity
          type={props.type}
          handleAction={props?.action || (() => {})}
          quantity={props.quantity}
          id={props.id}
        />
        <CartItemPrice price={props.price} quantity={props.quantity} />
        <CartItemRemoveButton
          type={props.type}
          onClick={props?.action || (() => {})}
          id={props.id}
        />
      </div>
    </div>
  );
}


=== ./app/[locale]/cart/components/CartItem/components/CartItemDescription.tsx ===
"use client"
import CartItemPrice from "./CartItemPrice";
import CartItemQuantity from "./CartItemQuantity";
import CartItemRemoveButton from "./CartItemRemoveButton";

export interface CartItemDescriptionProps {
  name?: string;
  code?: string;
  type?: "mekhwar" | "custom";
  action?: (action: "increment" | "decrement" | "delete", item: any) => void;
  id?: number;
  quantity?: number;
  price?: number;
  onClick?: (action: "increment" | "decrement" | "delete", item: any) => void;
}

export default function CartItemDescription (props: CartItemDescriptionProps) {
  return (
    <div className="xs:mx-6 sm:mx-7 lg:mx-4 flex flex-col justify-center items-start xs:w-full xs:w-full">
      <h2 className="font-medium sm:text-l xs:text-l">{props.name}</h2>
      <div className="my-1"></div>
      <h3 className="font-normal text-sm">{props.code}</h3>
      <div className="my-1"></div>
      <div className="lg:hidden md:hidden xs:flex righti flex flex-row items-center justify-between">
        <CartItemQuantity 
          type={props.type}
          handleAction={props?.action || (() => { })}
          quantity={props.quantity}
          id={props?.id}
        />
        <CartItemPrice price={props.price} quantity={props.quantity}  />
        <CartItemRemoveButton id={props?.id} onClick={props?.action || (() => { })} type={props?.type} />
      </div>
    </div>
  )
}

=== ./app/[locale]/cart/components/CartItem/components/CartItemImage.tsx ===
import CardContainer from "@/abstract/CardContainer";
import Image from "next/image";

export interface CartItemImageProps {
  src?: string;
}
export default function CartItemImage(props: CartItemImageProps) {
  return (
    <div className="w-[97px] aspect-square">
      <CardContainer noPadding borderRadius={12} scissors={false}>
        <div className="p-1">
          <Image
            src={props?.src || ""}
            width={97}
            height={97}
            alt="cart-item"
            className="aspect-square object-cover rounded-[12px]"
          />
        </div>
      </CardContainer>
    </div>
  )
}

=== ./app/[locale]/cart/components/CartItem/components/CartItemPrice.tsx ===
'use client'
import React from "react";

export interface CartItemPriceProps {
  price?: number;
  quantity?: number;
}

export default function CartItemPrice(props: CartItemPriceProps) {

  return (
    <div className="flex flex-row items-center justify-start">
      <p className="text-white font-medium sm:text-l xs:text-[12px]">AED {(props?.price || 0) * (props?.quantity || 0)}</p>
    </div>
  )
}

=== ./app/[locale]/cart/components/CartItem/components/CartItemQuantity.tsx ===
'use client'
import React from "react";
import { Button, Input } from "@nextui-org/react";
import { useState } from "react";

export interface CartItemQuantityProps {
  quantity?: number;
  handleAction?: (action: "increment" | "decrement" | "delete", item: any) => void;
  id?: number;
  type?: "mekhwar" | "custom";
}

export default function CartItemQuantity(props: CartItemQuantityProps) {
  const [value, setValue] = useState(props?.quantity || 0);

  const handleIncrement = () => {
    if (props?.handleAction) props.handleAction("increment", { id: props?.id, type: props?.type });
  }

  const handleDecrement = () => {
    if (props?.quantity === 1) return;
    if (props?.handleAction) props.handleAction("decrement", { id: props?.id, type: props?.type });
  }

  const handleManualInput = (e: any) => {
    const v = e.target.value;
    const key = e.key;
    if (v == 0 || v === "") {
      setValue(1);
      return;
    }
    setValue(v);
  }
  return (
    <div className="flex flex-row items-center justify-center w-[90px]">
      <Button onClick={handleDecrement} className="max-w-[25px] min-w-[25px] min-h-[25px] max-h-[25px] bg-transparent px-0 text-[25px]">-</Button>
      <Input
        classNames={{
          mainWrapper: "data-[hover=true]:bg-transparent data-[focus=true]:bg-transparent group[data-fucus=true]:bg-transparent group-data-[focus=true]:bg-transparent group-data-[hover=true]:bg-transparent bg-transparent focus:bg-transparent mx-1 border-1 border-secondary rounded-[5px]",
          inputWrapper: "data-[hover=true]:bg-transparent data-[focus=true]:bg-transparent group[data-fucus=true]:bg-transparent group-data-[focus=true]:bg-transparent group-data-[hover=true]:bg-transparent max-w-[35px] min-w-[35px] min-h-[30px] max-h-[30px] px-0 text-center bg-transparent focus:bg-transparent",
          input: "text-center text-white text-md [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
        }}
        type="number"
        value={props?.quantity?.toString() || "0"}
        disabled={true}
        onKeyDown={handleManualInput}
        onChange={handleManualInput}
      />
      <Button onPress={handleIncrement} onClick={handleIncrement} className="max-w-[25px] min-w-[25px] min-h-[25px] max-h-[25px] bg-transparent px-0 text-[20px] tx-normal">+</Button>
    </div>
  )
}

=== ./app/[locale]/cart/components/CartItem/components/CartItemRemoveButton.tsx ===
import { Button } from "@nextui-org/react";
import { IconX } from "@tabler/icons-react";

export interface CartItemRemoveButtonProps {
  id?: number;
  onClick: (action: "increment" | "decrement" | "delete", item: any) => void;
  type?: "mekhwar" | "custom";
}

export default function CartItemRemoveButton(props: CartItemRemoveButtonProps) {
  return (
    <Button onClick={() => props.onClick("delete", { id: props?.id, type: props?.type})} isIconOnly className="h-[25px] w-[25px] bg-transparent rounded-full"><IconX color="red" className="text-red/100 text-danger" /></Button>
  )
}

=== ./app/[locale]/cart/components/CheckoutBreakdown/index.tsx ===

export interface CheckoutBreakdownProps {
  items: Array<{
    name: string;
    value: string;
    lineThrough?: boolean;
  }>
}
export default function CheckoutBreakdown(props: CheckoutBreakdownProps) {
  return (
    <div className="w-full h-full flex flex-col items-start justify-start">
      {
        props.items.map((item, index) => (
          <div key={index} className={`w-full flex flex-row items-center justify-between ${index > 0 ? "mt-4" : ""}`}>
            <p className={`text-white text-md ${item.lineThrough ? "line-through" : ""}`}>{item.name}</p>
            <p className={`text-white text-md ${item.lineThrough ? "line-through" : ""}`}>{item.value}</p>
          </div>
        ))
      }
    </div>
  )
}

=== ./app/[locale]/cart/components/DeliverNote/index.tsx ===
import { Button, Input } from "@nextui-org/react";
import { useTranslations } from "next-intl";

export interface DeliveryNoteProps {
  onChange?: (value: string) => void;
  value?: string;
}
export default function DeliveryNote(props: DeliveryNoteProps) {

  const t = useTranslations("shop")

  return (
    <div className="w-full h-full flex flex-col items-start justify-start">
      <h3>{t("delivery_note")}</h3>

      <div className="my-1"></div>

      <div className="flex flex-row justify-between items-center bg-primary px-2 py-2 rounded-[8px] w-full min-h-[50px]">
        <Input
          classNames={{
            mainWrapper: "py-0",
            innerWrapper: " py-0",
            inputWrapper: "text-white bg-transparent active:bg-transparent data-[hover=true]:bg-transparent data-[focus=true]:bg-transparent group[data-fucus=true]:bg-transparent group-data-[focus=true]:bg-transparent group-data-[hover=true]:bg-transparent py-0",
            helperWrapper: "py-0",
            input: "",
            label: "hidden"
          }}
          multiple={true}
          onChange={(e) => props.onChange?.(e.target.value)}
          value={props.value}
        />
      </div>
    </div>
  )
}

=== ./app/[locale]/checkout/page.tsx ===

export default function CheckoutPage() {
  return <div>CheckoutPage</div>;
}

=== ./app/[locale]/checkout/address/page.tsx ===
"use client";

import ShopPageHeader from "@/components/shop/shop-page-header";
import { useEffect, useState } from "react";
import AddressLine from "./components/AddressLine";
import CreateAddressDialog from "./components/CreateAddressDialog";
import { Button, CircularProgress } from "@nextui-org/react";
import { IconChevronRight, IconPlus } from "@tabler/icons-react";
import { getToken, useRouter } from "@/utils";
import { deleteCustomerAddress, extractError } from "@/provider";
import { toast, ToastContainer } from "react-toastify";
import UpdateAddressDialog from "./components/UpdateAddressDialog";
import { getUserAddresses, storeAddresses } from "@/utils/cart";
import { useTranslations } from "next-intl";

export default function CheckoutAddressPage(props: any) {
  const [addresses, setAddresses] = useState([]);
  const [selectedAddress, setSelectedAddress] = useState("");
  const [createAddressDialogOpen, setCreateAddressDialogOpen] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [editAddressDialogOpen, setEditAddressDialogOpen] = useState(false);
  const [editAddressData, setEditAddressData] = useState<any>(null);
  const [initialLoadComplete, setInitialLoadComplete] = useState(false);

  const router = useRouter();
  const t = useTranslations("shop");
  
  useEffect(() => {
    const add = getUserAddresses();
    setAddresses(add);
    setInitialLoadComplete(true);
  }, []);

  const handleDelete = async (id: any) => {
    setIsLoading(true);
    const { data, error } = await deleteCustomerAddress(getToken(), {id});

    if (data) {
      setIsLoading(false);
      //@ts-ignore
      setAddresses(data);
      storeAddresses(data);
      
      toast.success("Address deleted successfully", {
        position: "top-right",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
      })
    } else {
      setIsLoading(false);
      toast.error(extractError(error), {
        position: "top-right",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
      });
    }
  }

  const handleEdit = (id: any) => {
    const address = addresses?.find((item: any) => item.id == id);
    setEditAddressDialogOpen(true);
    setEditAddressData(address);
  }

  const handleMoveToSummary = () => {
    const params = props?.searchParams;

    router.push({
      pathname: "/checkout/summary",
      query: {
        ...params,
        addressId: selectedAddress
      }
    })
  }

  return (
    <main className="min-h-screen min-w-main w-full flex flex-col items-start justify-start overflow-hidden py-12 px-6 xs:px-3">
      <ShopPageHeader
        title={t("your_address_l")}
        coloredTitle={t("your_address_t")}
        description={t("cart_description")}
      />

      <div className=" w-full grid grid-cols-1 gap-8 align-content-center justify-items-center">
        {addresses?.length > 0 &&
          addresses?.map((item: any, index) => {
            return (
              <AddressLine
                key={"address-num-" + index}
                title={item.name}
                value={item.address}
                mobile={item.mobile}
                type={item.type}
                onClick={(id) => setSelectedAddress(id)}
                selectedValue={selectedAddress}
                id={item.id}
                onDelete={handleDelete}
                onEdit={handleEdit}
              />
            );
          })}
        {(!addresses?.length && initialLoadComplete == true) && (
          <div className="h-[200px] flex items-center justify-center">
            <p className="text-caption ">No addresses found</p>
          </div>
        )}

        {(isLoading || !initialLoadComplete) && (
          <div className="h-screen w-screen top-0 left-0 flex items-center justify-center z-10 absolute bg-black/50">
            <CircularProgress color="secondary" />
            <p className="text-caption ">Loading...</p>
          </div>
        )}
      </div>

      <div className="w-full flex flex-col justify-center items-center mt-12 min-h-main">
        <div className="w-[80%] border-t-1 border-secondary-800 border-dashed h-[1px] flex items-center justify-center">
          <Button
            onClick={() => setCreateAddressDialogOpen(true)}
            isIconOnly
            className="rounded-full bg-secondary-800 min-h-[30px] min-w-[30px] h-[30px] w-[30px]"
            fullWidth={false}
          >
            <IconPlus className="text-primary-800 font-bold" size={22} />
          </Button>
        </div>
        <p className="mt-5 text-sm text-secondary-800">{t("add_new_address")}</p>
      </div>

      <div className="w-full flex justify-center items-center mt-12">
        <Button
          radius="sm"
          color="secondary"
          className="mt-12 bg-secondary-800 text-primary-900 font-normal text-[16px] px-6 disabled:bg-secondary-800/50"
          disabled={!selectedAddress}
          onClick={handleMoveToSummary}
        >
          <IconChevronRight size={18} /> {t("next")}
        </Button>
      </div>

      <CreateAddressDialog
        isOpen={createAddressDialogOpen}
        handleCompleted={(d) => {
          setCreateAddressDialogOpen(false);
          setAddresses(d);
        }}
        handleClose={() => setCreateAddressDialogOpen(false)}
      />

      <UpdateAddressDialog
        isOpen={editAddressDialogOpen}
        address={editAddressData}
        handleCompleted={(d) => {
          const ad = getUserAddresses();
          setAddresses(ad);
          setEditAddressDialogOpen(false);
          setAddresses(d);
        }}
        handleClose={() => {
          setEditAddressDialogOpen(false);
          setEditAddressData(null);
        }}
      />
      <ToastContainer />
    </main>
  );
}


=== ./app/[locale]/checkout/address/components/AddressLine.tsx ===
"use client";
import { Button, Chip, Radio, RadioGroup, chip } from "@nextui-org/react";
import { IconEdit, IconTrash } from "@tabler/icons-react";
import { useTranslations } from "next-intl";

export interface AddressLineProps {
  title: string;
  value: string;
  mobile: string;
  type: string;
  onClick: (v: any) => void;
  onDelete: (v: any) => void;
  onEdit: (v: any) => void;
  selectedValue?: string;
  id: number;
}
export default function AddressLine(props: AddressLineProps) {
  const t = useTranslations("profile");
  return (
    <div
      className="flex flex-row w-full bg-primary-700 p-6 select-none cursor-pointer"
      onClick={() => props.onClick(props.id.toString())}
    >
      <div className="p-1 flex items-start justify-center w-[40px] h-[40px]">
        <RadioGroup value={props.selectedValue} color="secondary">
          <Radio
            onClick={() => props.onClick(props.id.toString())}
            size="lg"
            classNames={{
              wrapper: "border-secondary-800 color-secondary-800",
              labelWrapper: "bg-secondary-800",
            }}
            value={props.id.toString()}
          />
        </RadioGroup>
      </div>
      <div className="address-details flex flex-col items-start justify-start my-0 ml-2 w-full">
        <div className="flex flex-row w-full">
          <p className="text-white flex text-xl font-bold mb-3">
            {props.title}
          </p>
          <Chip style={{textTransform: "capitalize"}} className="bg-secondary-800 rounded-md mx-5 text-primary-900 text-[12px] py-1 px-1 p-1">
            {t(props.type)}
          </Chip>
        </div>
        <p className="text-white mb-3">{props.value}</p>
        <p className="text-caption">{props.mobile}</p>
      </div>
      <div className="flex flex-row min-h-full justify-center items-center">
        <Button
          size="sm"
          className="bg-transparent hover:bg-white/5 color-secondary"
          isIconOnly
          onClick={() => props.onEdit(props.id.toString())}
        >
          <IconEdit size={18} />
        </Button>
        <Button
          size="sm"
          className="bg-transparent hover:bg-white/5 color-danger"
          isIconOnly
          onClick={() => props.onDelete(props.id.toString())}
        >
          <IconTrash className="text-danger" size={18} />
        </Button>
      </div>
    </div>
  );
}


=== ./app/[locale]/checkout/address/components/CreateAddressDialog.tsx ===
"use client";
import CardContainer from "@/abstract/CardContainer";
import { ThemeInput } from "@/components/input/theme-input";
import {
  Button,
  Modal,
  ModalBody,
  ModalContent,
  ModalFooter,
  ModalHeader,
} from "@nextui-org/react";
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";
import * as Yup from "yup";
import { yupResolver } from "@hookform/resolvers/yup";
import ThemeSelect from "@/components/input/theme-select";
import { MobileInput } from "@/components/input/mobile-input";
import phone from "phone";
import * as countryList from "countries-list";
import { createCustomerAddress, extractError } from "@/provider";
import { getToken } from "@/utils";
import { ToastContainer, toast } from "react-toastify";
import { storeAddresses } from "@/utils/cart";
import { useTranslations } from "next-intl";

export interface CreateAddressDialogProps {
  handleCompleted: (data: any) => void;
  handleClose: () => void;
  isOpen: boolean;
}

interface AddressI {
  name: string;
  country: string;
  city: string;
  street: string;
  building: string;
  address: string;
  flat: string;
  mobile: string;
  type: string;
  id?: string | number;
}

export default function CreateAddressDialog(props: CreateAddressDialogProps) {
  const [selectedCountry, setSelectedCountry] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const t = useTranslations("profile");

  //type name country city street building address flat mobile
  const createAddress = async (formData: any) => {
    //@ts-ignore
    const country = countryList.getCountryData(selectedCountry || "AE");
    formData.mobile = "+" + country?.phone?.[0] + formData.mobile;
    setIsLoading(true);
    const body: AddressI = {
      name: formData.name,
      country: formData.country,
      city: formData.city,
      street: formData.street,
      building: formData.building,
      flat: formData.flat,
      mobile: formData.mobile,
      type: formData.type,
      address: formData.address,
    };

    const { data, error } = await createCustomerAddress(getToken(), body);

    setIsLoading(false);

    if (error) {
      toast.error(extractError(error), {
        position: "top-right",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "light",
      });
    } else {
      //@ts-ignore
      storeAddresses(data);
      toast.success("Address created successfully", {
        position: "top-right",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "light",
      });
      props.handleCompleted(data);
    }
  };

  useEffect(() => {}, [props.isOpen]);

  const {
    register,
    handleSubmit,
    formState: { errors },
    getValues,
  } = useForm({
    resolver: yupResolver(
      Yup.object({
        name: Yup.string().required("Name is required"),
        country: Yup.string().required("Country is required"),
        city: Yup.string().required("City is required"),
        street: Yup.string().required("Street is required"),
        building: Yup.string().required("Building is required"),
        flat: Yup.string().required("Flat is required"),
        address: Yup.string().required("Address line is required"),
        mobile: Yup.string()
          .required("Mobile is required")
          .test("mobile", "Invalid mobile", (value) => {
            return phone(value, {
              country: selectedCountry,
              strictDetection: true,
            })?.isValid;
          }),
        type: Yup.string().required("Type is required"),
        countryCode: Yup.string().required("Country code is required"),
      })
    ),
  });

  return (
    <Modal isOpen={props.isOpen} onClose={props.handleClose}>
      <ModalContent>
        <CardContainer scissors={false}>
          <ModalHeader>{t("create_new_address")}</ModalHeader>
          <ModalBody>
            <form>
              <ThemeInput
                label={t("name")}
                extras={register("name")}
                errorMessage={errors.name?.message}
              />
              <div className="my-2"></div>
              <ThemeInput
                label={t("country")}
                extras={register("country")}
                errorMessage={errors.country?.message}
              />
              <div className="my-2"></div>
              <ThemeInput
                label={t("city")}
                extras={register("city")}
                errorMessage={errors.city?.message}
              />
              <div className="my-2"></div>
              <ThemeInput
                label={t("street")}
                extras={register("street")}
                errorMessage={errors.street?.message}
              />
              <div className="my-2"></div>
              <ThemeInput
                label={t("building")}
                extras={register("building")}
                errorMessage={errors.building?.message}
              />
              <div className="my-2"></div>
              <ThemeInput
                label={t("flat")}
                extras={register("flat")}
                errorMessage={errors.flat?.message}
              />
              <div className="my-2"></div>
              <ThemeInput
                label={t("address_line")}
                extras={register("address")}
                errorMessage={errors.flat?.message}
              />
              <div className="my-2"></div>
              <MobileInput
                label={t("mobile")}
                extras={register("mobile")}
                errorMessage={errors.mobile?.message}
                countryCodeErrorMessage={errors.countryCode?.message}
                countryCodeExtras={register("countryCode")}
                onCountryChange={setSelectedCountry}
                smaller={true}
              />
              <div className="my-2"></div>
              <ThemeSelect
                label={t("type")}
                extras={register("type")}
                items={[
                  { label: t("home"), value: "home" },
                  { label: t("office"), value: "office" },
                  { label: t("gym"), value: "gym" },
                  { label: t("work"), value: "work" },
                ]}
                errorMessage={errors.type?.message}
              />
            </form>
          </ModalBody>
          <ModalFooter>
            <Button
              disabled={isLoading}
              radius="sm"
              className="bg-transparent hover:bg-white/10"
              onClick={props.handleClose}
            >
              {t("cancel")}
            </Button>
            <Button
              isLoading={isLoading}
              className="bg-secondary-800 text-primary-900 rounded-md"
              radius="sm"
              onClick={handleSubmit(createAddress)}
            >
              {t("create")}
            </Button>
          </ModalFooter>
        </CardContainer>
      </ModalContent>
    </Modal>
  );
}


=== ./app/[locale]/checkout/address/components/UpdateAddressDialog.tsx ===
"use client";
import CardContainer from "@/abstract/CardContainer";
import { ThemeInput } from "@/components/input/theme-input";
import {
  Button,
  Modal,
  ModalBody,
  ModalContent,
  ModalFooter,
  ModalHeader,
} from "@nextui-org/react";
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";
import * as Yup from "yup";
import { yupResolver } from "@hookform/resolvers/yup";
import ThemeSelect from "@/components/input/theme-select";
import { MobileInput } from "@/components/input/mobile-input";
import phone from "phone";
import * as countryList from "countries-list";
import { extractError, updateCustomerAddress } from "@/provider";
import { getToken } from "@/utils";
import { toast } from "react-toastify";
import { storeAddresses } from "@/utils/cart";
import { useTranslations } from "next-intl";

export interface UpdateAddressDialogProps {
  handleCompleted: (data: any) => void;
  handleClose: () => void;
  isOpen: boolean;
  address: AddressI;
}

interface AddressI {
  name: string;
  country: string;
  city: string;
  street: string;
  building: string;
  address: string;
  flat: string;
  mobile: string;
  type: string;
  id?: string | number;
}

export default function UpdateAddressDialog(props: UpdateAddressDialogProps) {
  const [selectedCountry, setSelectedCountry] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const t = useTranslations("profile");

  //type name country city street building address flat mobile
  const updateAddress = async (formData: any) => {
    //@ts-ignore
    const country = countryList.getCountryData(selectedCountry || "AE");
    formData.mobile = "+" + country?.phone?.[0] + formData.mobile;
    setIsLoading(true);

    const body: AddressI = {
      name: formData.name,
      country: formData.country,
      city: formData.city,
      street: formData.street,
      building: formData.building,
      flat: formData.flat,
      mobile: formData.mobile,
      type: formData.type,
      address: formData.address,
      id: props.address.id,
    };

    const { data, error } = await updateCustomerAddress(getToken(), body);

    setIsLoading(false);

    if (error) {
      toast.error(extractError(error), {
        position: "top-right",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "light",
      });
    } else {
      toast.success("Address updated successfully", {
        position: "top-right",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "light",
      });
      storeAddresses(data);
      props.handleCompleted(data);
    }
  };

  const schema = Yup.object({
    name: Yup.string().required("Name is required"),
    country: Yup.string().required("Country is required"),
    city: Yup.string().required("City is required"),
    street: Yup.string().required("Street is required"),
    building: Yup.string().required("Building is required"),
    flat: Yup.string().required("Flat is required"),
    address: Yup.string().required("Address line is required"),
    mobile: Yup.string()
      .required("Mobile is required")
      .test("mobile", "Invalid mobile", (value) => {
        return phone(value, {
          country: selectedCountry,
          strictDetection: true,
        })?.isValid;
      }),
    type: Yup.string().required("Type is required"),
    countryCode: Yup.string().required("Country code is required"),
  });

  const {
    register,
    handleSubmit,
    formState: { errors },
    reset,
    getValues,
  } = useForm({
    resolver: yupResolver(schema),
  });

  useEffect(() => {
    if (props.isOpen) {
      const ph = phone(props.address.mobile);
      setSelectedCountry(ph?.countryIso2 || "AE");
      reset({
        name: props.address.name,
        country: props.address.country,
        city: props.address.city,
        street: props.address.street,
        building: props.address.building,
        flat: props.address.flat,
        address: props.address.address,
        mobile: props.address.mobile.replace(ph.countryCode + "", ""),
        type: props.address.type,
        countryCode: ph?.countryIso2!,
      });
    } else {
      reset();
    }

    return () => reset();
  }, [props.isOpen]);

  const getPhone = (e: any) => {
    if (!e) return "";
    const ph = phone(e);
    return e?.replace(ph.countryCode + "", "");
  };

  const getCountryCode = (e: any) => {
    if (!e) return "";
    const ph = phone(e);
    return ph.countryIso2;
  };
  return (
    <Modal isOpen={props.isOpen} onClose={props.handleClose}>
      <ModalContent>
        <CardContainer scissors={false}>
          <ModalHeader>{t("update_address")}</ModalHeader>
          <ModalBody>
            <form>
              <ThemeInput
                label={t("name")}
                extras={register("name")}
                value={props?.address?.name}
                errorMessage={errors.name?.message}
              />
              <div className="my-2"></div>
              <ThemeInput
                label={t("country")}
                extras={register("country")}
                value={props?.address?.country}
                errorMessage={errors.country?.message}
              />
              <div className="my-2"></div>
              <ThemeInput
                label={t("city")}
                extras={register("city")}
                value={props?.address?.city}
                errorMessage={errors.city?.message}
              />
              <div className="my-2"></div>
              <ThemeInput
                label={t("street")}
                extras={register("street")}
                value={props?.address?.street}
                errorMessage={errors.street?.message}
              />
              <div className="my-2"></div>
              <ThemeInput
                label={t("building")}
                extras={register("building")}
                value={props?.address?.building}
                errorMessage={errors.building?.message}
              />
              <div className="my-2"></div>
              <ThemeInput
                label={t("flat")}
                extras={register("flat")}
                value={props?.address?.flat}
                errorMessage={errors.flat?.message}
              />
              <div className="my-2"></div>
              <ThemeInput
                label={t("address_line")}
                extras={register("address")}
                value={props?.address?.address}
                errorMessage={errors.flat?.message}
              />
              <div className="my-2"></div>
              <MobileInput
                label={t("mobile")}
                extras={register("mobile")}
                value={getPhone(props?.address?.mobile) || ""}
                errorMessage={errors.mobile?.message}
                countryCodeErrorMessage={errors.countryCode?.message}
                countryCodeExtras={register("countryCode")}
                onCountryChange={setSelectedCountry}
                countryCodeValue={getCountryCode(props?.address?.mobile) || ""}
                smaller={true}
              />
              <div className="my-2"></div>
              <ThemeSelect
                label={t("type")}
                extras={register("type")}
                items={[
                  { label: t("home"), value: "home" },
                  { label: t("office"), value: "office" },
                  { label: t("gym"), value: "gym" },
                  { label: t("work"), value: "work" },
                ]}
                errorMessage={errors.type?.message}
                value={props?.address?.type}
              />
            </form>
          </ModalBody>
          <ModalFooter>
            <Button
              radius="sm"
              className="bg-transparent hover:bg-white/10"
              onClick={props.handleClose}
              isDisabled={isLoading}
            >
              {t("cancel")}
            </Button>
            <Button
              color="secondary"
              radius="sm"
              onClick={handleSubmit(updateAddress)}
              isLoading={isLoading}
            >
              {t("update")}
            </Button>
          </ModalFooter>
        </CardContainer>
      </ModalContent>
    </Modal>
  );
}


=== ./app/[locale]/checkout/completion/page.tsx ===
'use client'

import { Link } from "@/utils";
import { getUserCart, storeCart } from "@/utils/cart";
import { IconCircleCheck } from "@tabler/icons-react";
import { useEffect } from "react";

export default function CheckoutCompletion(props: any) {

    useEffect(() => {
        const cart = getUserCart();

        if (cart?.custom?.length) {
            cart.custom = [];
            storeCart(cart);
        }
    }, [])
    return <main className="w-screen h-screen flex flex-col items-center justify-center">
        <IconCircleCheck size={150} className="text-secondary my-5" />
        <h1 className="text-3xl text-secondary">Thank you for your order!</h1>
        <p className="mt-5">Continue shopping <Link className="text-secondary underline" prefetch={true} href="/">Home</Link></p>
    </main>;
}

=== ./app/[locale]/checkout/summary/page.tsx ===
"use client";

import ShopPageHeader from "@/components/shop/shop-page-header";
import {
  applyCoupon,
  getClientSecret,
  getCustomOrderDetails,
  getSiteConfig,
} from "@/provider";
import { useAuth } from "@/provider/AuthContext";
import { getToken } from "@/utils";
import { getUserAddresses, getUserCart } from "@/utils/cart";
import { CircularProgress } from "@nextui-org/react";
import Image from "next/image";
import { useEffect, useState } from "react";
import { Elements } from "@stripe/react-stripe-js";
import { loadStripe } from "@stripe/stripe-js";
import CheckoutForm from "./components/CheckoutForm";
import { useTranslations } from "next-intl";

interface CartItemI {
  id: number;
  name: string;
  price: number;
  quantity: number;
  image?: string;
}

export default async function CheckoutSummary(props: any) {
  const stripePromise = loadStripe(process?.env?.NEXT_PUBLIC_STRIPE_PUBLISHABLE || "");

  const [initialLoadingComplete, setInitialLoadingComplete] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [cartItems, setCartItems] = useState<CartItemI[]>([]);
  const [selectedAddress, setSelectedAddress] = useState<any>(null);
  const [subtotal, setSubtotal] = useState(0);
  const [tax, setTax] = useState(0);
  const [deliveryCharge, setDeliveryCharge] = useState(0);
  const [discount, setDiscount] = useState(0);
  const [total, setTotal] = useState(0);
  const [tailorFee, setTailorFee] = useState(0);
  const [fabricPrice, setFabricPrice] = useState(0);
  const [clientSecret, setClientSecret] = useState("");
  const [customOrderData, setCustomOrderData] = useState<any>(null);
  const t = useTranslations("shop");

  const ctx = useAuth();

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    if (props?.searchParams?.orderType === "custom") {
      await handleCustomOrder();
      return;
    }
    ctx.checkAuth();
    const cart = getUserCart();
    const address = getUserAddresses();
    const { data, error } = await getSiteConfig();
    const deliveryCharge = data?.data?.attributes?.delivery_charge || 0;
    const tax = data?.data?.attributes?.tax || 0;
    let coupon: any = null;

    if (props.searchParams?.couponCode) {
      const token = ctx.token || getToken();
      const { data: couponData, error: couponError } = await applyCoupon(token || "", {
        code: props.searchParams?.couponCode,
      });
      coupon = couponData || null;
    }

    await handleLoadedData(cart, address, tax, deliveryCharge, coupon);
  };

  const handleLoadedData = async (
    cart: any,
    addresses: any,
    taxAmount: number,
    deliveryCharge: number,
    discount: {
      type: "Flat" | "Percentage";
      amount: number;
    } | null
  ) => {
    const cItems: CartItemI[] = [];

    if (cart?.custom?.length > 0) {
      cart.custom.forEach((item: any, index: number) => {
        cItems.push({
          id: item?.mekhwar?.id,
          name: item?.mekhwar?.title,
          price: item?.mekhwar?.price,
          quantity: item?.quantity,
          image: item?.mekhwar?.main_image?.url,
        });
      });
    }

    setCartItems(cItems);

    if (addresses?.length > 0) {
      setSelectedAddress(addresses.find((i: any) => i.id == props?.searchParams.addressId));
    }

    //set subtotal
    const sT = cItems.reduce((p, c: any) => {
      return (+p || 0) + (+c.price || 0) * (+c.quantity || 0);
    }, 0);
    setSubtotal(sT);

    const discountAmount = calcDiscount(sT, discount);
    setDiscount(discountAmount);

    const tAmount = calcTax(sT, taxAmount);
    setTax(tAmount);

    setDeliveryCharge(deliveryCharge);

    setTotal(sT + tAmount + deliveryCharge - discountAmount);

    setInitialLoadingComplete(true);

    const { data: clientSecretData } = await getClientSecret(getToken(), {
      amount: (sT + tAmount + deliveryCharge - discountAmount) * 100,
      cartId: cart?.id,
      userId: ctx?.user.id,
      delivery_charge: deliveryCharge,
      total: sT,
      total_discount: discountAmount,
      total_tax: tAmount,
      customer_address: props?.searchParams.addressId,
      delivery_note: props?.searchParams?.deliveryNote || "",
      orderType: props?.searchParams?.orderType || "",
      orderId: props?.searchParams?.orderId || "",
    });

    //@ts-ignore
    setClientSecret(clientSecretData?.clientSecret || "");
  };

  const handleCustomOrder = async () => {
    ctx.checkAuth();

    const addresses = getUserAddresses();

    if (addresses?.length > 0) {
      setSelectedAddress(addresses.find((i: any) => i.id == props?.searchParams.addressId));
    }

    const { data: orderData, error: orderError }: any = await getCustomOrderDetails(
      ctx.token,
      {
        id: props?.searchParams?.orderId,
      }
    );

    setCustomOrderData(orderData);

    setTax(orderData?.tax || 0);
    setDeliveryCharge(orderData?.delivery_charge || 0);
    setTailorFee(orderData?.tailor_fee || 0);
    setFabricPrice(orderData?.price || 0);
    setDiscount(orderData?.discount || 0);
    setSubtotal(
      (orderData?.delivery_charge || 0) +
        (orderData?.tailor_fee || 0) +
        (orderData?.price || 0) -
        (orderData?.discount || 0)
    );
    setTotal(
      (orderData?.tax || 0) +
        (orderData?.delivery_charge || 0) +
        (orderData?.tailor_fee || 0) +
        (orderData?.price || 0) -
        (orderData?.discount || 0)
    );

    const { data: clientSecretData } = await getClientSecret(getToken(), {
      customer_address: props?.searchParams.addressId,
      delivery_note: props?.searchParams?.deliveryNote || "",
      orderType: props?.searchParams?.orderType || "",
      orderId: props?.searchParams?.orderId || "",
    });

    //@ts-ignore
    setClientSecret(clientSecretData?.clientSecret || "");
    setInitialLoadingComplete(true);
    setIsLoading(false);
  };

  const calcDiscount = (subtotal: number, discount: any) => {
    if (discount?.type == "Flat") {
      return discount?.amount;
    } else if (discount?.type == "Percentage") {
      return (subtotal * discount?.amount) / 100;
    }
    return 0;
  };

  const calcTax = (subtotal: number, tax: number) => {
    return (subtotal * tax) / 100;
  };

  if (!initialLoadingComplete) {
    return (
      <div className="w-full h-screen flex justify-center items-center">
        <CircularProgress color="secondary" />
      </div>
    );
  }

  return (
    <div className="md:min-h-screen min-w-main w-full flex flex-col items-start justify-start overflow-hidden py-12 px-6 xs:px-3">
      <ShopPageHeader
        title=""
        coloredTitle={t("payment")}
        description={t("cart_description")}
      />

      <div className="w-full flex justify-center items-center">
        <section className="md:min-h-screen max-w-main w-full mt-6 grid grid-cols-1 md:grid-cols-2 gap-5">
          <article className="px-3">
            <h3 className="font-medium text-lg text-secondary">{t("summary")}</h3>

            <div className="w-full py-3">
              {cartItems.map((item, index) => (
                <div
                  key={`cart-item-${index}`}
                  className="bg-primary-700 py-3 px-4 my-2 rounded-lg flex flex-row items-center justify-between"
                >
                  <div className="info flex flex-row items-center justify-center">
                    <Image
                      src={item?.image || ""}
                      alt="item image"
                      width={"0"}
                      height={"0"}
                      sizes="100vh"
                      className="w-[35px] h-[35px] object-cover rounded-md border-secondary-800 border-1"
                    />
                    <p className="text-white text-sm ml-5">{item?.name}</p>
                  </div>

                  <p className="text-white text-sm">AED {item.quantity * item.price}</p>
                </div>
              ))}
            </div>

            {props?.searchParams?.orderType === "custom" && (
              <div className="w-full py-3">
                <div className="bg-primary-700 py-3 px-4 my-2 rounded-lg flex flex-row items-center justify-between">
                  {customOrderData?.design?.url ? (
                    <div className="info flex flex-row items-center justify-center">
                      <Image
                        src={customOrderData?.design?.url || ""}
                        alt="item image"
                        width={"0"}
                        height={"0"}
                        sizes="100vh"
                        className="w-[35px] h-[35px] object-cover rounded-md border-secondary-800 border-1"
                      />
                      <p className="text-white text-sm mx-5">{t("design")}</p>
                    </div>
                  ) : (
                    <div className="info flex flex-row items-center justify-center">
                      <Image
                        src={
                          customOrderData?.mukhawar?.main_image?.formats?.thumbnail?.url || ""
                        }
                        alt="item image"
                        width={"0"}
                        height={"0"}
                        sizes="100vh"
                        className="w-[35px] h-[35px] object-cover rounded-md border-secondary-800 border-1"
                      />
                      <p className="text-white text-sm mx-5">
                        {customOrderData?.mukhawar?.title}
                      </p>
                    </div>
                  )}

                  <p className="text-white text-sm"></p>
                </div>

                <div className="bg-primary-700 py-3 px-4 my-2 rounded-lg flex flex-row items-center justify-between">
                  <div className="info flex flex-row items-center justify-center">
                    <Image
                      src={customOrderData?.fabric?.main_image?.url || ""}
                      alt="item image"
                      width={"0"}
                      height={"0"}
                      sizes="100vh"
                      className="w-[35px] h-[35px] object-cover rounded-md border-secondary-800 border-1"
                    />
                    <p className="text-white text-sm mx-5">
                      {customOrderData?.fabric_pattern
                        ? customOrderData.fabric_pattern
                        : customOrderData?.fabric?.name}
                    </p>
                  </div>

                  <p className="text-white text-sm"></p>
                </div>
              </div>
            )}

            <div className="w-full flex flex-col items-start justify-start mt-3">
              <h4 className="text-sm text-secondary font-medium">{t("address_info")}</h4>
              <p className="text-white text-sm mt-2">
                {selectedAddress?.address}, {selectedAddress?.city}, {selectedAddress?.state},{" "}
                {selectedAddress?.country}
              </p>
            </div>

            <div className="w-full flex flex-col items-start justify-start mt-4">
              {discount > 0 && (
                <div className="summaryitem w-full flex flex-row items-center justify-between mt-3">
                  <h3 className="text-sm text-white font-medium">{t("discount")}</h3>
                  <h3 className="text-sm text-white font-medium">AED -{discount}</h3>
                </div>
              )}

              {fabricPrice > 0 && (
                <div className="summaryitem w-full flex flex-row items-center justify-between mt-3">
                  <h3 className="text-sm text-white font-medium">{t("fabric_price")}</h3>
                  <h3 className="text-sm text-white font-medium">AED {fabricPrice}</h3>
                </div>
              )}

              {tailorFee > 0 && (
                <div className="summaryitem w-full flex flex-row items-center justify-between mt-3">
                  <h3 className="text-sm text-white font-medium">{t("tailor_fee")}</h3>
                  <h3 className="text-sm text-white font-medium">AED {tailorFee}</h3>
                </div>
              )}

              {/* <div className="summaryitem w-full flex flex-row items-center justify-between">
                <h4 className="text-md text-secondary font-medium">
                  {t("subtotal")}
                </h4>
                <h4 className="text-md text-secondary font-medium">
                  {subtotal}
                </h4>
              </div> */}

              {tax != null && tax > 0 ? (
                <div className="summaryitem w-full flex flex-row items-center justify-between mt-3">
                  <h3 className="text-sm text-white font-medium">{t("tax")}</h3>
                  <h3 className="text-sm text-white font-medium">AED {tax}</h3>
                </div>
              ) : (
                <></>
              )}

              {deliveryCharge > 0 ? (
                <div className="summaryitem w-full flex flex-row items-center justify-between mt-3">
                  <h3 className="text-sm text-white font-medium">{t("delivery_charge")}</h3>
                  <h3 className="text-sm text-white font-medium">AED {deliveryCharge}</h3>
                </div>
              ) : (
                <> </>
              )}

              <div className="summaryitem w-full flex flex-row items-center justify-between mt-3">
                <h4 className="text-md text-secondary font-medium">{t("total")}</h4>
                <h4 className="text-md text-secondary font-medium">AED {total}</h4>
              </div>
            </div>
          </article>

          {clientSecret && (
            <article className="px-3">
              <h3 className="font-medium text-lg text-secondary">{t("payment")}</h3>
              <div className="mt-3"></div>
              <Elements
                stripe={stripePromise}
                options={{
                  clientSecret,
                  appearance: {
                    theme: "stripe",
                    labels: "above",
                    variables: {
                      fontFamily: "Sohne, system-ui, sans-serif",
                      fontWeightNormal: "500",
                      borderRadius: "8px",
                      colorBackground: "#023435",
                      colorPrimary: "#012828",
                      accessibleColorOnColorPrimary: "#1A1B25",
                      colorText: "white",
                      colorTextSecondary: "white",
                      colorTextPlaceholder: "#727F96",
                      tabIconColor: "white",
                      logoColor: "dark",
                    },
                  },
                }}
              >
                <CheckoutForm />
              </Elements>
            </article>
          )}
        </section>
      </div>
    </div>
  );
}


=== ./app/[locale]/checkout/summary/components/CheckoutForm.tsx ===
"use client";
import { CircularProgress } from "@nextui-org/react";
import {
  LinkAuthenticationElement,
  PaymentElement,
  useElements,
  useStripe,
} from "@stripe/react-stripe-js";
import { useLocale } from "next-intl";
import { useState } from "react";

export default function CheckoutForm() {
  const stripe = useStripe();
  const elements = useElements();
  const [message, setMessage] = useState<any>(null);
  const [isLoading, setIsLoading] = useState<any>(false);
  const locale = useLocale();

  const el = elements?.getElement("card");

  const handleSubmit = async (e: any) => {
    e.preventDefault();

    if (!stripe || !elements) {
      // Stripe.js has not yet loaded.
      // Make sure to disable form submission until Stripe.js has loaded.
      return;
    }

    setIsLoading(true);

    const { error } = await stripe.confirmPayment({
      elements,
      confirmParams: {
        return_url: `${window.location.origin}/${locale}/checkout/completion`,
      },
    });

    if (error.type === "card_error" || error.type === "validation_error") {
      setMessage(error.message);
    } else {
      setMessage("An unexpected error occured.");
    }

    setIsLoading(false);
  };

  return (
    <form id="payment-form" onSubmit={handleSubmit}>
      <PaymentElement
        id="payment-element"
        className=""
        options={{
          layout: {
            type: "tabs",
            spacedAccordionItems: true
          }
        }}
      />
      <button
        className="w-full bg-secondary hover:bg-secondary-800 mt-5 p-3 rounded-md"
        disabled={isLoading || !stripe || !elements}
        id="submit"
      >
        <span className="text-primary-900">
          {isLoading ? (
            <div className="w-full flex items-center justify-center">
              <CircularProgress size={"sm"} className="color-primary" />
            </div>
          ) : (
            "Checkout"
          )}
        </span>
      </button>
      {/* Show any error or success messages */}
      {message && <div id="payment-message">{message}</div>}
    </form>
  );
}


=== ./app/[locale]/contact/page.tsx ===
"use client";
import { useForm, SubmitHandler } from "react-hook-form";
import CardContainer from "@/abstract/CardContainer";
import { ThemeInput } from "@/components/input/theme-input";
import { Button, CircularProgress } from "@nextui-org/react";
import { yupResolver } from "@hookform/resolvers/yup";
import * as Yup from "yup";
import { getSiteConfig, sendContactUs } from "@/provider";
import PhoneInput from "react-phone-input-2";
import { useEffect, useState } from "react";
import "react-phone-input-2/lib/style.css";
import { IconBrandWhatsapp } from "@tabler/icons-react";
import { useTranslations } from "next-intl";
import { ToastContainer, toast } from "react-toastify";

type Inputs = {
  email: string;
  message: string;
};

const Contact = () => {
  const [phoneNumber, setPhoneNumber] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [isLoading1, setIsLoading1] = useState(false);
  const [whatsappNum, setWhatsappNum] = useState("");

  const t = useTranslations("shop");

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    setIsLoading1(true);
    const { data, error } = await getSiteConfig();
    //@ts-ignore
    setWhatsappNum(
      //@ts-ignore
      data?.data?.attributes?.whatsapp_number_for_custom_design?.toString()
    );
    setIsLoading1(false);
  };
  const handleOnChange = (value: any, country: any) => {
    setPhoneNumber(value);
  };
  const onSubmit: SubmitHandler<Inputs> = async (formData: any) => {
    // const country = countryList.getCountryData(formData.countryCode);
    // formData.phone = "+" + country?.phone?.[0] + formData.phone;
    // setIsLoading(true);

    try {
      setIsLoading(true);
      const { data, error, response }: any = await sendContactUs({
        email: formData.email,
        message: formData.message,
        phone: phoneNumber,
      });

      if (data?.success) {
        toast.success("Message sent successfully");
        setValue("email", "");
        setValue("message", "");
        setPhoneNumber("");
      }

      if (error) {
        toast.error("Error sending message");
      }
    } catch (err) {
      toast.error("Error sending message");
      //TODO: handle error
    }
    setIsLoading(false);
    // setIsLoading(false);
  };

  const formSchema = Yup.object().shape({
    email: Yup.string().email("Email is invalid").required("Email is required"),
    message: Yup.string().required("Message is required"),
  });
  const {
    register,
    handleSubmit,
    formState: { errors },
    setValue,
    getValues,
    control,
  } = useForm<Inputs>({
    mode: "onTouched",
    resolver: yupResolver(formSchema),
  });
  return (
    <main className="min-h-[90vh] min-w-screen w-full flex flex-col overflow-hidden mt-0 p-0">
      <div className="grid grid-cols-1 pt-5 medium:mt-5 large:mt-5 xs:grid-cols-1 small:grid-cols-1 medium:grid-cols-1 large:grid-cols-2 gap-8 ">
        <div className="flex flex-col text-center mt-[12vh] xs:mt-0 mx-auto xs:mx-3 max-w-full  items-center small:mt-[3vh]  medium:max-w-[70%] medium:mt-[3vh] large:text-start large:max-w-[90%]   ">
          {" "}
          <p className=" [font-family:'Roboto-Black',Helvetica] font-black text-transparent large:text-[64px] tracking-[0] ">
            <span className="text-[#ffd992] xs:text-[26px] small:text-[42px] medium:text-[42px]">
              {t("contact_us_l")}{" "}
            </span>
            <span className="text-[#ffffff] xs:text-[26px] small:text-[42px] medium:text-[42px]">
              {t("contact_us_t")}
            </span>
          </p>
          <p className="mt-8 [font-family:'SF_Pro_Display-Medium',Helvetica] font-medium text-[#ffffff80] text-[18px] tracking-[0] leading-[20px]">
            {t("contact_us_description")}
          </p>
          <Button
            onClick={() => {
              window.open("https://wa.me/" + whatsappNum, "_blank");
            }}
            className="mt-8 all-[unset] box-border flex items-center justify-center gap-2 w-[319px] bg-[#023435] rounded-[6px]"
            startContent={
              isLoading1 ? (
                <CircularProgress className="text-secondary-800 w-6" />
              ) : (
                <IconBrandWhatsapp size={24} />
              )
            }
          >
            <div className="[font-family:'SF_Pro_Display-Medium',Helvetica] font-medium text-mainwhite text-[16px] text-center tracking-[0] leading-[24px] whitespace-nowrap">
              {t("chat_with_us")}
            </div>
          </Button>
        </div>

        <div className="flex flex-col items-center justify-center  m-5 small:m-3 mt-10">
          <CardContainer scissors={false}>
            <div className="w-full max-w-[100%]">
              <form
                onSubmit={handleSubmit(onSubmit)}
                className="w-full h-full flex flex-col items-center justify-center px-4"
              >
                <div className="w-full">
                  <div className="w-full">
                    <div className="w-full relative rounded-[6px]">
                      <p className="[font-family:'Roboto-Black',Helvetica] font-black text-transparent text-[42px] text-center tracking-[0] pt-[20px]">
                        <span className="text-[#ffd992] mx-1">
                          {t("contact_form_l")}
                        </span>
                        <span className="text-[#ffffff] mx-3">
                          {t("contact_form_t")}
                        </span>
                      </p>
                      <p className="max-w-[85%] mx-auto [font-family:'SF_Pro_Display-Medium',Helvetica] font-medium text-[80%] pt-[10px]  text-center tracking-[0] leading-[20px]">
                        {t("contact_form_description")}
                      </p>

                      <div className="w-[80%] mx-auto mt-[20px]">
                        <ThemeInput
                          errorMessage={errors.email?.message}
                          extras={{ ...register("email") }}
                          label="Email"
                          name="email"
                        />
                      </div>
                      <div className="mx-auto  max-w-[80%] mt-[20px]">
                        <PhoneInput
                          country={"ae"}
                          value={phoneNumber}
                          onChange={(value) => {
                            setPhoneNumber(value);
                          }}
                          inputStyle={{
                            color: "white",
                            background: "#022D2E",
                            height: "55px",
                            border: " #022D2E",
                          }}
                          dropdownStyle={{ color: "black" }}
                          searchStyle={{
                            background: "#022D2E",
                            color: "white",
                          }}
                          buttonStyle={{ background: "#FFD992" }}
                          enableSearch={true}
                          placeholder="+971 50 123 4567"
                        />
                      </div>
                      <div className="w-[85%] mx-auto mt-[20px]">
                        <textarea
                          placeholder={t("your_message")}
                          className="mt-3 p-2 border border-gray-300 bg-primary-800 rounded-md w-full resize-none overflow-y-auto h-[10vw]"
                          {...register("message")}
                        />
                      </div>
                      <div className="flex mx-auto max-w-[85%] items-center gap-[1vw] p-[1vw] mt-[10px]">
                        <p className="font-normal text-[#ffffff] text-[12px] tracking-[0] leading-[15px]">
                          {t("contact_by_checking")}
                        </p>
                      </div>
                      <div className="w-[50px] mx-auto mt-[20px] mb-[20px]">
                        <Button
                          isLoading={isLoading}
                          disabled={isLoading}
                          type="submit"
                          className="bg-secondary-800 rounded-md text-primary-900"
                        >
                          {t("contact_submit")}
                        </Button>
                      </div>
                    </div>
                  </div>
                </div>
              </form>
            </div>
          </CardContainer>
        </div>
      </div>

      <ToastContainer />
    </main>
  );
};
export default Contact;


=== ./app/[locale]/custom/journey/[fabricId]/design/page.tsx ===
import { getLocale } from "next-intl/server";
import { getDesignListing } from "@/provider";
import qs from "qs";
import ShopItemList from "@/app/[locale]/shop/components/item-list";

async function getData(props: any) {
  const locale = await getLocale();
  const searchParams = props.searchParams || {};

  const publicToken = "";
  const parsedQs: any = qs.parse(searchParams);
  const parsedFilter: any = parsedQs.filters;
  const filtersObj: any = {};
  if (parsedFilter?.["$and"]) for (const key in parsedFilter?.["$and"]) {
    filtersObj[key] = parsedFilter["$and"][key];
  }
  if (parsedFilter?.["$and"]) parsedFilter["$and"] = filtersObj;

  const { data: productData, error: productError } = await getDesignListing(publicToken, {
    "pagination[pageSize]": 20,
    "pagination[page]": parsedQs?.pagination?.page || 1,
    locale: locale ?? "en",
    populate: "image,tailor",
    //@ts-ignore
    filters: searchParams?.tailorId ? {
      tailor: searchParams?.tailorId
    } : {},
  });
  
  return { productData };
}

export default async function CustomDesignDesignSelect(props: any) {

  const { productData } = await getData(props);

  return (
    <main className="min-h-screen min-w-screen w-full flex xs:flex-col sm:flex-row items-start justify-start items-start justify-center overflow-hidden m-0 p-0">
      {
        productData?.data?.length ? <ShopItemList
        items={productData?.data?.map((item) => {
          return {
            id: item?.id,
            title: item?.attributes?.name,
            image: item?.attributes?.image?.data?.attributes?.url,
            price: item?.attributes?.price,
            tailorName: item?.attributes?.tailor?.data?.attributes?.name,
            rating: item?.attributes?.rating,
          }
        })}
        design={true}
        query={props?.searchParams}
        pagination={productData?.meta?.pagination}
        title="Choose"
        coloredTitle="Design"
        description="Browse our wide collection of Mekhwar design, made only for your style and luxury"
      /> : <div className="h-screen w-full flex items-center justify-center"><div>Tailor selected has no design submitted</div></div>
      }
    </main>
  )
}


=== ./app/[locale]/custom/journey/[fabricId]/tailor/page.tsx ===
import TailorCard from "@/components/cards/TailorsCard";
import ShopPageHeader from "@/components/shop/shop-page-header";
import ShopPagination from "@/components/shop/pagination";
import { getTailorListing } from "@/provider";
import { getLocale, getTranslations } from "next-intl/server";
import qs from "qs";
import { Suspense } from "react";
import Loading from "@/app/[locale]/loading";

async function getData(props: any) {
  const locale = await getLocale();
  const searchParams = props.searchParams || {};

  const publicToken = "";
  const parsedQs: any = qs.parse(searchParams);
  const parsedFilter: any = parsedQs.filters;

  const { data: tailorsData, error: productError } = await getTailorListing(publicToken, {
    "pagination[pageSize]": 4,
    "pagination[page]": parsedQs?.pagination?.page || 1,
    locale: locale ?? "en",
    populate: "image"
  });
  
  return { tailorsData };
}

export default async function CustomDesignTailorSelect(props: any) {

  const key = JSON.stringify(props?.searchParams);
  const { tailorsData } = await getData(props);
  const t = await getTranslations("shop");

  return (
    <main className="min-h-screen min-w-screen w-full flex xs:flex-col sm:flex-row items-start justify-start items-start justify-center overflow-hidden m-0 p-0">
      <section className="min-h-screen sm:w-[100%] xl:w-[100%] xs:w-full py-12 px-6 xs:px-3">
        <ShopPageHeader title={t("choose_tailor_l")} coloredTitle={t("choose_tailor_t")} description={t("choose_tailor_description")} />
        <Suspense key={key} fallback={<Loading />}>
        <div className="grid items-start xs:grid-cols-1 md:grid-cols-1 lg:grid-cols-2 gap-8">
          {
            tailorsData && tailorsData?.data?.map((item) => {
              return <TailorCard
                image={item?.attributes?.image?.data?.attributes?.url || ""}
                name={item?.attributes?.name || ""}
                id={item.id}
                description={item.attributes?.description || ""}
                rating={item.attributes?.rating || 0}
                key={item.id}
                customJourney={true}
                query={props.searchParams}
                params={props.params}
              />
            })
          }
        </div>
        </Suspense>
        <div className="mt-12 flex justify-center">
          {
            tailorsData?.meta?.pagination?.pageCount ?
            <ShopPagination data={tailorsData.meta.pagination} /> : null
          }
        </div>
      </section>
    </main>
  )
}

=== ./app/[locale]/custom-mekhwar/page.tsx ===
"use client";
import { Button, Progress } from "@nextui-org/react";
import { useEffect, useRef, useState } from "react";
import StepOne from "./components/StepOne";
import { useTranslations } from "next-intl";
import { motion, AnimatePresence } from "framer-motion";
import { toast, ToastContainer } from "react-toastify";
import StepTwo from "./components/StepTwo";
import StepThree from "./components/StepThree";
import StepFour from "./components/StepFour";
import StepFive from "./components/StepFive";
import { IconChevronLeft, IconChevronRight } from "@tabler/icons-react";
import { useSearchParams } from "next/navigation";

export default function CustomizationPageV2() {
  const [selectedDesign, setSelectedDesign] = useState<number | null>(null);
  const [uploadedDesign, setUploadedDesign] = useState<File[] | []>([]);
  const [modalOpen, setModalOpen] = useState(false);
  const [designToSelect, setDesignToSelect] = useState<number | null>(null);
  const [sizes, setSizes] = useState<any>({});

  const [selectedFabricId, setSelectedFabricId] = useState<number | null>(null);
  const [selectedFabricPattern, setSelectedFabricPattern] = useState<number | null>(null);

  const [hasPrice, setHasPrice] = useState(false);

  const [step, setStep] = useState(0);

  const t = useTranslations("customization");
  const step3Ref = useRef<any>(null);

  const urlQuery = useSearchParams();

  const onSelectDesign = (id: number) => {
    if (uploadedDesign?.length) {
      setDesignToSelect(id);
      setModalOpen(true);
      return;
    }
    setSelectedDesign(id);
  };

  const handleUpload = (file: File) => {
    setUploadedDesign((oldFiles) => [...oldFiles, file]);
    setSelectedDesign(null);
  };

  const handleDeleteUpload = (index: number) => {
    setUploadedDesign((oldFiles) => oldFiles.filter((_, i) => i !== index));
  };

  const getTitle = () => {
    switch (step) {
      case 0:
        return t("choose_or_upload_your_design");
      case 1:
        return t("choose_your_fabric");
      case 2:
        return t("fill_your_size");
      case 3:
        return t("order_summary");
      case 4:
        return hasPrice ? t("processing_for_payment") : t("reviewing_your_order");
      default:
        return t("choose_or_upload_your_design");
    }
  };

  const getNext = () => {
    switch (step) {
      case 0:
        return t("next_choose_your_fabric");
      case 1:
        return t("next_fill_your_size");
      case 2:
        return t("next_order_summary");
      case 3:
        return t("next_order_pending");
      case 4:
        return "";
      default:
        return t("next_choose_your_fabric");
    }
  };

  const getPercentage = () => {
    switch (step) {
      case 0:
        return 0;
      case 1:
        return 25;
      case 2:
        return 50;
      case 3:
        return 75;
      case 4:
        return 100;
      default:
        return 0;
    }
  };

  const handleNext = async () => {
    if (step === 0 && !selectedDesign && uploadedDesign.length === 0) {
      toast.error(t("toast_select_a_design_or_upload_one"));
      return;
    }

    if (step === 0 && urlQuery.get("fabricId")) {
      setStep(2);
      return;
    }

    if (step === 1 && !selectedFabricId) {
      toast.error(t("toast_select_a_fabric"));
      return;
    }

    //@ts-ignore
    if (step === 2) {
      const res = await step3Ref.current?.isValid();
      // toast.error(t("toast_fill_your_size"));
      if (!res) return;
      setSizes(res);
    }

    setStep(step + 1);
  };

  const handleBack = () => {
    if (step === 0) {
      return;
    }
    setStep(step - 1);
  };

  const initPage = () => {
    const fabricId = urlQuery.get("fabricId");
    const designId = urlQuery.get("designId");
    const patternId = urlQuery.get("selectedPattern");

    if (fabricId) {
      setSelectedFabricId(parseInt(fabricId));
    }

    if (patternId) {
      setSelectedFabricPattern(parseInt(patternId));
    }

    if (designId) {
      setSelectedDesign(parseInt(designId));
      setStep(1);
    }
  };

  useEffect(() => {
    initPage();
  }, []);

  return (
    <main className="w-full min-h-screen2 flex flex-col justify-start items-center py-10 px-8">
      <section className=" w-full max-w-main flex flex-col items-start justify-start">
        <div className="flex flex-col items-center justify-start w-full">
          <h1 aria-label="title" className="text-xl font-bold text-secondary-800">{getTitle()}</h1>
          <h2 aria-label="title" className="text-sm font-normal text-white my-2">{getNext()}</h2>
          <Progress
            aria-label="Downloading..."
            size="sm"
            value={getPercentage()}
            color="secondary"
            // showValueLabel={true}
            className="max-w-md"
          />
        </div>

        <AnimatePresence mode="wait">
          <motion.div
            key={step ? step : "empty"}
            initial={{ x: 10, opacity: 0 }}
            animate={{ x: 0, opacity: 1 }}
            exit={{ x: -10, opacity: 0 }}
            transition={{ duration: 0.5 }}
            style={{
              width: "100%",
              display: "flex",
              justifyContent: "center",
              alignItems: "center",
            }}
            className="h-full w-full mt-5"
            aria-label="step-content"
          >
            {step === 0 && (
              <StepOne
                selectedDesign={selectedDesign}
                onSelectDesign={onSelectDesign}
                uploadedDesign={uploadedDesign}
                handleUpload={handleUpload}
                handleDeleteUpload={handleDeleteUpload}
                modalOpen={modalOpen}
                setModalOpen={setModalOpen}
                designToSelect={designToSelect}
                setSelectedDesign={setSelectedDesign}
                setUploadedDesign={setUploadedDesign}
              />
            )}

            {step === 1 && (
              <StepTwo
                selectedFabricId={selectedFabricId}
                onSelectFabric={setSelectedFabricId}
                selectedFabricPattern={selectedFabricPattern}
                onSelectFabricPattern={setSelectedFabricPattern}
              />
            )}

            {step === 2 && <StepThree ref={step3Ref} sizes={sizes} />}

            {step === 3 && (
              <StepFour
                selectedDesign={selectedDesign}
                uploadedDesign={uploadedDesign}
                sizes={sizes}
                selectedFabricId={selectedFabricId}
                selectedFabricPattern={selectedFabricPattern}
                handleHasPrice={setHasPrice}
              />
            )}

            {step === 4 && (
              <StepFive
                selectedDesign={selectedDesign}
                uploadedDesign={uploadedDesign}
                sizes={sizes}
                selectedFabricId={selectedFabricId}
                selectedFabricPattern={selectedFabricPattern}
              />
            )}
          </motion.div>
        </AnimatePresence>
      </section>
      <section className={`w-full max-w-main text-end mt-5 justify-center items-center ${step === 4 ? "hidden" : "flex"}`}>
        <Button
          onClick={handleBack}
          className="bg-primary-700 disabled:bg-primary-700/50 text-white rounded-md"
        >
          <IconChevronLeft />
          <span className="mr-1"></span>
          {t("flow_back")}
        </Button>
        <span className="mx-2"></span>
        <Button onClick={handleNext} className="bg-primary-700 text-white rounded-md">
          {t("flow_next")}
          <span className="mr-1"></span>
          <IconChevronRight />
        </Button>
      </section>

      <ToastContainer />
    </main>
  );
}


=== ./app/[locale]/custom-mekhwar/_page.tsx ===
"use client";
import {
  IconUpload,
  IconClock,
  IconDragDrop,
  IconCheck,
} from "@tabler/icons-react";
import { useRef, useState } from "react";
import FirstStep from "./components/FirstStep";
import { ToastContainer } from "react-toastify";
import { SwiperSlide, Swiper, SwiperRef } from "swiper/react";
import SecondStep from "./components/SecondStep";
import { Swiper as Swiper2 } from "swiper/types";
import { Button } from "@nextui-org/react";
import ThirdStep from "./components/ThirdStep";
import Image from "next/image";
import { useTranslations } from "next-intl";

export default function CustomMekhwarPage() {
  const [step, setStep] = useState(0);
  const [fabricID, setFabricID] = useState(0);
  const [swiper, setSwiper] = useState<Swiper2>();
  const [orderData, setOrderData] = useState<any>();

  const swiperRef = useRef<SwiperRef>(null);

  const t = useTranslations("shop");

  const handleNext = (data: any) => {
    if (step === 0) {
      setStep(2);
      setOrderData(data);
      swiper?.slideNext();
      return;
    }

    if (step === 2) {
      if(data==="prev"){
        setStep(0)
        swiper?.slidePrev();
        return
      }else {
      setStep(3);
      setFabricID(data.id);
      swiper?.slideNext();
      
      return;
      }
    }
  };

  const handlePrevious = () => {
    swiper?.slidePrev();
  }

  return (
    <main className=" w-full flex flex-col items-center justify-center mt-10">
      <section className="max-w-main w-full flex flex-col items-center p-1">
        <div className="flex flex-row items-center justify-between">
          <div className="flex items-center gap-1">
            <div className="bg-white rounded-full p-3 text-primary primary">
              <IconUpload
                size={20}
                className="text-primary-900 primary"
              />
            </div>
            <div className="flex flex-col items-start">
              <div className={`text-[14px] font-medium sm:text-secondary`}>
                {t("step_1")}
              </div>
              <div className={`text-[19px] font-medium sm:text-secondary`}>
                {t("upload_info")}
              </div>
            </div>
          </div>
          <div className="flex">
            <img
              className="hidden sm:block flex-1"
              alt="Line"
              src="/assets/images/Line.svg"
            />
          </div>

          <div className="flex items-center gap-1">
            <div
              className={`bg-white rounded-full p-3 text-primary primary ${
                step === 0 ? "opacity-60" : ""
              }`}
            >
              <IconCheck
                size={20}
                className="text-primary-900 primary"
              />
            </div>
            <div className="flex flex-col items-start">
              <div
                className={`text-[14px] font-medium sm:text-secondary ${
                  step === 2 || step === 0 ? "opacity-60" : ""
                }`}
              >
                {t("step_2")}
              </div>
              <div
                className={`text-[19px] font-medium sm:text-secondary ${
                  step === 2 || step === 0 ? "opacity-60" : ""
                }`}
              >
                {t("choose_fabric")}
              </div>
            </div>
          </div>
          <div className="flex">
            <img
              className="hidden sm:block flex-1 h-px"
              alt="Line"
              src="/assets/images/Line.svg"
            />
          </div>

          <div className="flex items-center gap-1">
            <div
              className={`bg-white rounded-full p-3 text-primary primary ${
                step === 0 || step === 2 ? "opacity-60" : ""
              }`}
            >
              <IconClock
                size={20}
                className="text-primary-900 primary"
              />
            </div>
            <div className="flex flex-col items-start">
              <div
                className={`text-[14px] font-medium leading-[16px] ${
                  step === 3 ? "text-secondary" : "text-white"
                } ${step === 0 || step === 2 ? "opacity-60" : ""}`}
              >
                {t("step_3")}
              </div>
              <div
                className={`text-[19px] font-medium leading-[24px] ${
                  step === 3 ? "text-secondary" : "text-white"
                } ${step === 0 || step === 2 ? "opacity-60" : ""}`}
              >
                {t("pending")}
              </div>
            </div>
          </div>
        </div>

        <div className="my-5"></div>
      </section>

      <section className="w-full flex flex-row items-center justify-center mt-2">
        <Swiper
          onSwiper={(swiper) => setSwiper(swiper)}
          slidesPerView={1}
          autoHeight={true}
          className="max-w-main"
          preventInteractionOnTransition={true}
          initialSlide={step}
          ref={swiperRef}
          allowTouchMove={false}
        >
          <SwiperSlide>
            <FirstStep
              onNext={handleNext}
              handResize={() => swiper?.slideTo(step)}
            />
          </SwiperSlide>

          <SwiperSlide>
            <SecondStep
              onNext={handleNext}
              orderData={orderData}
              handResize={() => swiper?.slideTo(step)}
              onPrevious={handlePrevious}
            />
          </SwiperSlide>

          <SwiperSlide>
            <ThirdStep />
          </SwiperSlide>
        </Swiper>
      </section>

      <ToastContainer />
    </main>
  );
}


=== ./app/[locale]/custom-mekhwar/components/BuyOptions.tsx ===
"use client";
import React from "react";
import { IconInfoCircle } from "@tabler/icons-react";
import { HexColorPicker } from "react-colorful";
import { ThemeInput } from "@/components/input/theme-input";
import {
  Button,
  Checkbox,
  Dropdown,
  DropdownTrigger,
  DropdownMenu,
  DropdownItem,
} from "@nextui-org/react";
import { useEffect, useMemo, useRef, useState } from "react";
import * as Yup from "yup";
import { yupResolver } from "@hookform/resolvers/yup";
import { useForm } from "react-hook-form";
import { IconChevronRight } from "@tabler/icons-react";
import { toast } from "react-toastify";
import DropdownComponent from "./Drop";
import { getUserProfiles } from "@/utils/cart";
import { Link } from "@/utils";
import { useTranslations } from "next-intl";

const colors = [
  { label: "White", value: "#E8E8E8" },
  { label: "Black", value: "#000000" },
  { label: "Green", value: "#CCDE69" },
  { label: "Red", value: "#FF4B4B" },
  { label: "Yellow", value: "#E1B000" },
];

//array for Short sleeve V Neck Long Sleeves Winter Cut No Sleeves Embodied
const tailoringStyles = [
  { label: "Short Sleeve", value: "Short Sleeve" },
  { label: "V Neck", value: "V Neck" },
  { label: "Long Sleeves", value: "Long Sleeves" },
  { label: "Winter Cut", value: "Winter Cut" },
  { label: "No Sleeves", value: "No Sleeves" },
  { label: "Embodied", value: "Embodied" },
];

const sizes = [
  /*  { value: "S", label: "Small" },
  { value: "M", label: "Medium" },
  { value: "L", label: "Large" },*/
  { value: "CUSTOM", label: "Custom" },
];

export interface BuyOptionsProps {
  onNext: (data: any) => void;
  handleResize: (f: any) => void;
}

export default function BuyOptions(props: BuyOptionsProps) {
  const [selectedColor, setSelectedColor] = useState<null | string>(null);
  const [color1, setColor1] = useState("#ffb84d");
  const [selectedStyles, setSelectedStyles] = useState(["Embodied"]);
  const [selectedSize, setSelectedSize] = useState("CUSTOM");
  const [sizeProfiles, setSizeProfiles] = useState<any[]>([]);
  const [selectedSizeProfile, setSelectedSizeProfile] = useState<any>(null);

  const t = useTranslations("shop");

  const [saveSizeProfile, setSaveSizeProfile] = useState(false);
  const [customerInstructions, setcustomerInstructions] = useState("");
  const [showColorPicker, setShowColorPicker] = useState<boolean>(false);
  const [selectedWristOption, setSelectedWristOption] = useState(t("wrist_style"));
  const [selectedNeckOption, setSelectedNeckOption] = useState(t("neck_style"));
  const [selectedChestOption, setSelectedChestOption] = useState(t("chest_point"));
  const [selectedCupOption, setSelectedCupOption] = useState(t("cup_size"));
  const [shoulder, setShoulder] = useState<number>();
  const [neck, setNeck] = useState<number>();
  const [height, setHeight] = useState<number>();
  const [wrist, setWrist] = useState<number>();
  const [sleevesLength, setSleevesLength] = useState<number>();
  const [armWidth, setArmWidth] = useState<number>();
  const [hips, setHips] = useState<number>();
  const [bust, setBust] = useState<number>();

  const colorPickerRef = useRef<HTMLDivElement>(null);

  const handleWristChange = (value: string) => {
    setSelectedWristOption(value);
  };
  const handleNeckChange = (value: string) => {
    setSelectedNeckOption(value);
  };
  const handleChestChange = (value: string) => {
    setSelectedChestOption(value);
  };
  const handleCupChange = (value: string) => {
    setSelectedCupOption(value);
  };
  const handleSelectSavedSize = (item: any) => {
    reset();
    setSaveSizeProfile(false);
    setSelectedSize("saved");
    setSelectedChestOption(item.chest_point.toString());
    setSelectedCupOption(item.cup);
    setShoulder((prevShoulder) => item.shoulder);
    setNeck((prevNeck) => item.neck);
    setHeight(item.height);
    setWrist(item.wrist);
    setSleevesLength(item.sleeves_length);
    setArmWidth(item.arm_width);
    setHips(item.hips);
    setBust(item.bust);
  };
  const handleColorChange = (newColor: string) => {
    setColor1(newColor);
  };
  useEffect(() => {
    const handleClickOutside = (e: MouseEvent) => {
      if (colorPickerRef.current && !colorPickerRef.current.contains(e.target as Node)) {
        setShowColorPicker(false);
      }
    };

    const handleMouseDown = () => {
      document.addEventListener("mousedown", handleClickOutside);
    };

    const handleMouseUp = () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };

    // Attach event listeners when the color picker is shown
    if (showColorPicker) {
      handleMouseDown();
    } else {
      handleMouseUp();
    }

    // Clean up the event listener when the component unmounts
    return () => {
      handleMouseUp();
    };
  }, [showColorPicker]);
  useEffect(() => {
    loadData();
  }, []);

  const loadData = () => {
    const sizeProfiles = getUserProfiles();
    setSizeProfiles(sizeProfiles);
  };

  let patternTwoDigisAfterComma = /^\d+(\.\d{0,2})?$/;

  const customSizeSchema = Yup.object({
    bust: Yup.number()
      .positive()
      .test(
        "is-decimal",
        "The amount should be a decimal with maximum two digits after comma",
        (val: any) => {
          if (val != undefined) {
            return patternTwoDigisAfterComma.test(val);
          }
          return true;
        }
      )
      .typeError("Number required")
      .required("Required")
      .max(300)
      .min(1),
    shoulder: Yup.number()
      .positive()
      .test(
        "is-decimal",
        "The amount should be a decimal with maximum two digits after comma",
        (val: any) => {
          if (val != undefined) {
            return patternTwoDigisAfterComma.test(val);
          }
          return true;
        }
      )
      .typeError("Number required")
      .required("Required")
      .max(300)
      .min(1),
    sleeves_length: Yup.number()
      .positive()
      .test(
        "is-decimal",
        "The amount should be a decimal with maximum two digits after comma",
        (val: any) => {
          if (val != undefined) {
            return patternTwoDigisAfterComma.test(val);
          }
          return true;
        }
      )
      .typeError("Number required")
      .required("Required")
      .max(300)
      .min(1),
    hips: Yup.number()
      .positive()
      .test(
        "is-decimal",
        "The amount should be a decimal with maximum two digits after comma",
        (val: any) => {
          if (val != undefined) {
            return patternTwoDigisAfterComma.test(val);
          }
          return true;
        }
      )
      .typeError("Number required")
      .required("Required")
      .max(300)
      .min(1),
    arm_width: Yup.number()
      .positive()
      .test(
        "is-decimal",
        "The amount should be a decimal with maximum two digits after comma",
        (val: any) => {
          if (val != undefined) {
            return patternTwoDigisAfterComma.test(val);
          }
          return true;
        }
      )
      .typeError("Number required")
      .required("Required")
      .max(300)
      .min(1),
    wrist: Yup.number()
      .positive()
      .test(
        "is-decimal",
        "The amount should be a decimal with maximum two digits after comma",
        (val: any) => {
          if (val != undefined) {
            return patternTwoDigisAfterComma.test(val);
          }
          return true;
        }
      )
      .typeError("Number required")
      .required("Required")
      .max(300)
      .min(1),
    height: Yup.number()
      .positive()
      .test(
        "is-decimal",
        "The amount should be a decimal with maximum two digits after comma",
        (val: any) => {
          if (val != undefined) {
            return patternTwoDigisAfterComma.test(val);
          }
          return true;
        }
      )
      .typeError("Number required")
      .required("Required")
      .max(300)
      .min(1),
    neck: Yup.number()
      .positive()
      .test(
        "is-decimal",
        "The amount should be a decimal with maximum two digits after comma",
        (val: any) => {
          if (val != undefined) {
            return patternTwoDigisAfterComma.test(val);
          }
          return true;
        }
      )
      .typeError("Number required")
      .required("Required")
      .max(300)
      .min(1),
  });

  const {
    register,
    formState: { errors, isValidating },
    trigger,
    getValues,
    setValue,
    reset,
  } = useForm({
    mode: "onTouched",
    //@ts-ignore
    resolver: yupResolver(customSizeSchema),
  });

  const handleNewSize = () => {
    setSelectedSize("CUSTOM");
    setWrist(undefined);
    setShoulder(undefined);
    setNeck(undefined);
    setHeight(undefined);
    setWrist(undefined);
    setSleevesLength(undefined);
    setArmWidth(undefined);
    setHips(undefined);
    setBust(undefined);
    reset();
  };
  const handleOnNext = async (d: any) => {
    if (shoulder && neck && height && wrist && sleevesLength && armWidth && hips && bust) {
      setValue("shoulder", shoulder);
      setValue("neck", neck);
      setValue("height", height);
      setValue("wrist", wrist);
      setValue("sleeves_length", sleevesLength);
      setValue("arm_width", armWidth);
      setValue("hips", hips);
      setValue("bust", bust);
    } else {
      await trigger();
    }

    if (selectedWristOption === t("wrist_style")) {
      toast.error("Please select a Wrist Style", {
        position: "bottom-center",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "light",
      });
      return;
    }
    if (selectedNeckOption === t("neck_style")) {
      toast.error("Please select a Neck Style", {
        position: "bottom-center",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "light",
      });
      return;
    }
    if (selectedChestOption === t("chest_point")) {
      toast.error("Please select a Chest Point size", {
        position: "bottom-center",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "light",
      });
      return;
    }

    if (selectedCupOption === t("cup_size")) {
      toast.error("Please select a Cup size", {
        position: "bottom-center",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "light",
      });
      return;
    }

    if (!selectedSize) {
      toast.error("Please select a size", {
        position: "bottom-center",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "light",
      });
      return;
    }

    if (selectedSize === "CUSTOM" && Object?.keys(errors)?.length > 0) {
      return;
    }

    props.onNext({
      color: selectedColor,
      wrist_style: selectedWristOption,
      neck_style: selectedNeckOption,
      customerInstructions: customerInstructions,
      styles: selectedStyles,
      size: "CUSTOM",
      cup: selectedCupOption,
      chest_point: selectedChestOption,
      saveSizeProfile: saveSizeProfile,
      ...getValues(),
    });
  };

  useEffect(() => {
    props.handleResize(null);
  }, [selectedSize]);

  useEffect(() => {
    props.handleResize(null);
  }, [isValidating]);

  return (
    <div className="w-full flex flex-col items-start justify-start px-5">
      <div className="color-picker flex flex-row items-start justify-start">
        <div className="flex items-center">
          <div
            className={`relative w-[30px] h-[30px] rounded-md mr-2 cursor-pointer`}
            onClick={(e) => {
              e.stopPropagation(); // Prevent the click event from reaching the document
              setShowColorPicker(true);
            }}
          >
            {showColorPicker && (
              <div className="absolute mt-8 top-0 left-0 z-20" ref={colorPickerRef}>
                <HexColorPicker color={color1} onChange={handleColorChange} />
              </div>
            )}
            {/* Display the selected color in the div */}
            <div
              style={{
                backgroundColor: color1,
                width: "30px",
                height: "30px",
                borderRadius: "20%",
              }}
            />
          </div>
          {/* Label beside the color picker */}
          <div className="mx-2">
            <span>{t("pick_your_color")}</span>
          </div>
        </div>
      </div>

      <div className="w-full">
        <div className="style-picker mt-5 grid grid-cols-2 gap-5">
          <DropdownComponent
            describe={t("wrist_style")}
            selectedValue={selectedWristOption}
            onSelectionChange={handleWristChange}
            items={[
              { key: "Round open", label: t("round_open") },
              { key: "Triangular open", label: t("triangular_open") },
              { key: "Wide open", label: t("wide_open") },
              { key: "Unique Batwings style", label: t("unique_batwing_style") },
            ]}
          />
          <DropdownComponent
            describe={t("neck_style")}
            selectedValue={selectedNeckOption}
            onSelectionChange={handleNeckChange}
            items={[
              { key: "High neck", label: t("high_neck") },
              { key: "Square neck", label: t("square_neck") },
              { key: "Round neck", label: t("round_neck") },
              { key: "Triangle neck", label: t("triangle_neck") },
              { key: "Oval neck", label: t("oval_neck") },
            ]}
          />
        </div>
      </div>
      <div className="w-full">
        <div className="options mt-5 grid grid-cols-2 gap-5">
          <Dropdown>
            <DropdownTrigger>
              <Button
                className={`${
                  selectedSize === "saved"
                    ? "border-secondary text-secondary"
                    : "border-white/20 text-white/50"
                } grid-col rounded-[8px] min-w-0 min-h-0 p-0 text-[14px] xs:px-4 xs:py-5 sm:px-6 sm:py-5`}
                variant="bordered"
              >
                {t("saved_size")}
              </Button>
            </DropdownTrigger>
            <DropdownMenu aria-label="Static Actions">
              {sizeProfiles?.map((item, index) => {
                return (
                  <DropdownItem onClick={() => handleSelectSavedSize(item)} key={index}>
                    {item.title}
                  </DropdownItem>
                );
              })}
            </DropdownMenu>
          </Dropdown>

          <Button onClick={handleNewSize} className="bg-primary-700">
            {t("new_size")}
          </Button>
        </div>
      </div>

      {/* <div className="my-[8px]"></div> */}

      {/* <div className="w-full flex items-start justify-start">
        <div className="options grid grid-cols-4 gap-2">
          {sizes?.map((item, index) => {
            return (
              <Button
                key={index}
                onClick={() => setSelectedSize(item?.value || null)}
                variant="bordered"
                className={`${
                  item.value === selectedSize
                    ? "border-secondary text-secondary"
                    : "border-white/20 text-white/50"
                } rounded-[8px] min-w-0 min-h-0 p-0 text-[14px] xs:px-4 xs:py-5 sm:px-6 sm:py-4`}
              >
                {item.label}
              </Button>
            );
          })}
        </div>
      </div> */}

      <div className="my-[12px]"></div>

      <form className={"grid available xs:grid-cols-3 sm:grid-cols-3 w-full gap-4"}>
        <DropdownComponent
          describe={t("chest_point")}
          selectedValue={selectedChestOption}
          onSelectionChange={handleChestChange}
          items={[
            { key: "18", label: "18" },
            { key: "20", label: "20" },
            { key: "22", label: "22" },
            { key: "24", label: "24" },
            { key: "26", label: "26" },
          ]}
        />
        <div className="flex flex-row xs:flex-col small:flex-col medium:flex-col gap-2">
          <DropdownComponent
            describe={t("cup_size")}
            selectedValue={selectedCupOption}
            onSelectionChange={handleCupChange}
            items={[
              { key: "A", label: "A" },
              { key: "AA", label: "AA" },
              { key: "B", label: "B" },
              { key: "C", label: "C" },
              { key: "D", label: "D" },
              { key: "DD", label: "DD" },
              { key: "DDD", label: "DDD" },
              { key: "G", label: "G" },
              { key: "H", label: "H" },
            ]}
          />
        </div>
        <ThemeInput
          custom={true}
          value2={shoulder}
          errorMessage={errors.shoulder?.message}
          disabled={selectedSize === "saved" ? true : false}
          type="text"
          maxLength={3}
          allowOnlyNumbers={true}
          extras={{ ...register("shoulder") }}
          label={t("shoulder")}
          classNames={{ inputWrapper: ["px-[16px] py-[12px] h-[60px]"] }}
          endItem={<p className="text-white font-[14px]">{t("in")}</p>}
        />
        <ThemeInput
          custom={true}
          value2={bust}
          errorMessage={errors.bust?.message}
          disabled={selectedSize === "saved" ? true : false}
          type="text"
          maxLength={3}
          allowOnlyNumbers={true}
          extras={{ ...register("bust") }}
          label={t("bust")}
          classNames={{ inputWrapper: ["px-[16px] py-[12px] h-[60px]"] }}
          endItem={<p className="text-white font-[14px]">{t("in")}</p>}
        />
        <ThemeInput
          custom={true}
          value2={neck}
          disabled={selectedSize === "saved" ? true : false}
          type="text"
          maxLength={3}
          allowOnlyNumbers={true}
          errorMessage={errors.neck?.message}
          extras={{ ...register("neck") }}
          label={t("neck")}
          classNames={{ inputWrapper: ["px-[16px] py-[12px] h-[60px]"] }}
          endItem={<p className="text-white font-[14px]">{t("in")}</p>}
        />
        <ThemeInput
          custom={true}
          value2={height}
          disabled={selectedSize === "saved" ? true : false}
          errorMessage={errors.height?.message}
          type="text"
          maxLength={3}
          allowOnlyNumbers={true}
          extras={{ ...register("height") }}
          label={t("height")}
          classNames={{ inputWrapper: ["px-[16px] py-[12px] h-[60px]"] }}
          endItem={<p className="text-white font-[14px]">{t("in")}</p>}
        />
        <ThemeInput
          custom={true}
          value2={wrist}
          disabled={selectedSize === "saved" ? true : false}
          errorMessage={errors.wrist?.message}
          type="text"
          maxLength={3}
          allowOnlyNumbers={true}
          extras={{ ...register("wrist") }}
          label={t("wrist")}
          classNames={{ inputWrapper: ["px-[16px] py-[12px] h-[60px]"] }}
          endItem={<p className="text-white font-[14px]">{t("in")}</p>}
        />
        <ThemeInput
          custom={true}
          value2={sleevesLength}
          disabled={selectedSize === "saved" ? true : false}
          errorMessage={errors.sleeves_length?.message}
          type="text"
          maxLength={3}
          allowOnlyNumbers={true}
          extras={{ ...register("sleeves_length") }}
          label={t("sleeves_length")}
          classNames={{ inputWrapper: ["px-[16px] py-[12px] h-[60px]"] }}
          endItem={<p className="text-white font-[14px]">{t("in")}</p>}
        />
        <ThemeInput
          custom={true}
          value2={armWidth}
          disabled={selectedSize === "saved" ? true : false}
          errorMessage={errors.arm_width?.message}
          type="text"
          maxLength={3}
          allowOnlyNumbers={true}
          extras={{ ...register("arm_width") }}
          label={t("arm_width")}
          classNames={{ inputWrapper: ["px-[16px] py-[12px] h-[60px]"] }}
          endItem={<p className="text-white font-[14px]">{t("in")}</p>}
        />
        <ThemeInput
          custom={true}
          value2={hips}
          disabled={selectedSize === "saved" ? true : false}
          errorMessage={errors.hips?.message}
          type="text"
          maxLength={3}
          allowOnlyNumbers={true}
          extras={{ ...register("hips") }}
          label={t("hips")}
          classNames={{ inputWrapper: ["px-[16px] py-[12px] h-[60px]"] }}
          endItem={<p className="text-white font-[14px]">{t("in")}</p>}
        />
      </form>
      <textarea
        placeholder={t("additional_tailoring_requests")}
        className="mt-3 p-2 border border-gray-300 bg-primary-800 rounded-md w-full resize-none overflow-y-auto"
        style={{ minHeight: "80px" }}
        value={customerInstructions}
        onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>
          setcustomerInstructions(e.target.value)
        }
      />
      <div className="w-full flex flex-row items-center justify-between mt-[15px]">
        <Checkbox
          className={`${selectedSize === "CUSTOM" ? "black" : "hidden"}`}
          color="secondary"
          onChange={(e) => setSaveSizeProfile(e.target.checked)}
          isSelected={saveSizeProfile}
        >
          <span className="mx-2">{t("save_size")}</span>
        </Checkbox>

        <span className="flex items-end">
          <Link
            href="/size-guide"
            prefetch={true}
            className="flex flex-row items-center font-normal text-white text-md tracking-tight leading-tight underline whitespace-nowrap"
          >
            <IconInfoCircle color="#ffb84d" size={25} />
            {t("need_help_taking_sizes")}
          </Link>
        </span>
      </div>
      <div className="my-[10px]"></div>

      <Button
        onClick={handleOnNext}
        className="bg-primary-700 text-white text-[16px] font-bold min-w-full min-h-0 py-6 rounded-[6px]"
        startContent={<IconChevronRight size={18} />}
      >
        {t("next")}
      </Button>
    </div>
  );
}


=== ./app/[locale]/custom-mekhwar/components/Drop.tsx ===
"use client"
import React, { FC } from 'react';
import {
  Dropdown,
  DropdownTrigger,
  DropdownMenu,
  DropdownItem,
  Button,
} from '@nextui-org/react'; 
import { useTranslations } from 'next-intl';

interface DropdownProps {
  selectedValue: string;
  onSelectionChange: (value: string) => void;
  items: { key: string; label: string }[];
  describe:string;
  classNames?: {}
  fullHeight?:boolean;
}

const DropdownComponent: FC<DropdownProps> = ({
  selectedValue,
  onSelectionChange,
  items ,
  describe,
  classNames,
  fullHeight,
}) => {
    const [selectedKeys, setSelectedKeys] = React.useState(new Set([selectedValue]));

  const handleSelectionChange = (selectedItems:any) => {
    const selectedKey = selectedItems.currentKey;      
    setSelectedKeys(selectedKey);
    onSelectionChange(selectedKey);

  };

  const t = useTranslations("shop");

  return (
    <Dropdown aria-labelledby='label' className={`bg-primary-700 ${fullHeight ? 'h-full' : ''}`} classNames={{ trigger: [fullHeight ? 'h-full': '']}}>
      <DropdownTrigger aria-label='label'>
      <Button
          variant="bordered"
          className="capitalize bg-primary-800 border-primary-800 relative"
          style={{ paddingRight: '32px' }} // Add padding for the arrow
          aria-labelledby='label'
        >
         {items.filter(i => i.key === selectedValue)[0]?.label || selectedValue || describe}
          <span
            className="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none"
            style={{ top: '50%', transform: 'translateY(-50%)' }}
          >
            {/* Dropdown arrow SVG */}
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-5 w-5"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                fillRule="evenodd"
                d="M10 12l-6-6h12l-6 6z"
                clipRule="evenodd"
              />
            </svg>
          </span>
        </Button>
      </DropdownTrigger>
      <DropdownMenu
        aria-label="Single selection example"
        variant="flat"
        disallowEmptySelection
        selectionMode="single"
        style={{ maxHeight: "150px", overflowY: "auto" }}
        selectedKeys={selectedKeys}
        onSelectionChange={(e) => handleSelectionChange(e)}
      >
        {items.map((item) => (
           
          <DropdownItem description={describe} key={item.key}>{item.label}</DropdownItem>
        
        ))}
      </DropdownMenu>
    </Dropdown>
  );
};

export default DropdownComponent;

=== ./app/[locale]/custom-mekhwar/components/FirstStep.tsx ===
"use client";

import { useState } from "react";
import BuyOptions from "./BuyOptions";
import ImageUpload from "./ImageUpload";
import { toast } from "react-toastify";

export interface FirstStepProps {
  onNext: (f: any) => void;
  handResize: (f: any) => void;
}
export default function FirstStep(props: FirstStepProps) {
  const [uploadedFile, setUploadedFile] = useState(null);
  const [uploadedFile2, setUploadedFile2] = useState(null);
  const [uploadedFile3, setUploadedFile3] = useState(null);
  const [uploadedFile4, setUploadedFile4] = useState(null);
  const handleMoveToFabric = (data: any) => {
    if (!uploadedFile && !uploadedFile2 && !uploadedFile3 && !uploadedFile4) {
      toast.error("Please upload an image", {
        position: "bottom-center",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
      });
      return;
    }

    props.onNext({
      ...data,
      image: uploadedFile,
      image2: uploadedFile2,
      image3: uploadedFile3,
      image4: uploadedFile4,
    });
  };
  return (
    <div className="grid grid-cols-2 small:grid-cols-1 xs:grid-cols-1 gap-4 p-3 justify-items-center items-center">
      <div className="col-span-1 xs:max-w-[95vw] small:max-w-[95vw] large:w-[600px] m-5 flex-row">
        <ImageUpload check={true} onUpload={(e) => setUploadedFile(e)} height="403px" />
        <div className="grid grid-cols-3 gap-4">
          <ImageUpload onUpload={(e) => setUploadedFile2(e)} />
          <ImageUpload onUpload={(e) => setUploadedFile3(e)} />
          <ImageUpload onUpload={(e) => setUploadedFile4(e)} />
        </div>
      </div>

      <div className="col-span-1 max-w-[95vw]">
        <BuyOptions
          onNext={handleMoveToFabric}
          handleResize={props.handResize}
        />
      </div>
    </div>
  );
}


=== ./app/[locale]/custom-mekhwar/components/ImageUpload.tsx ===
"use client";

import CardContainer from "@/abstract/CardContainer";
import { quseUploadFile } from "@/provider";
import { useAuth } from "@/provider/AuthContext";
import { Button, CircularProgress } from "@nextui-org/react";
import { IconCloudUp, IconLink } from "@tabler/icons-react";
import { useTranslations } from "next-intl";
import Image from "next/image";
import { useEffect, useRef, useState } from "react";
import { toast } from "react-toastify";

export interface ImageUploadProps {
  onUpload: (f: any) => void;
  height?: string;
  check?:boolean;
}

const fileToDataUri = (file: any) =>
  new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = (event: any) => {
      resolve(event.target.result);
    };
    reader.readAsArrayBuffer(file);
  });

export default function ImageUpload(props: ImageUploadProps) {
  const [isLoading, setIsLoading] = useState(false);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [uploadedFile, setUploadedFile] = useState<any | null>(null);

  const ctx = useAuth();
  const fileInputRef = useRef<HTMLInputElement>(null);
  const t = useTranslations("shop");

  useEffect(() => {
    ctx.checkAuth();
  }, []);

  const handleUpload = async (f: any) => {
    if (f) {
      setIsLoading(true);
      const newF = await fileToDataUri(f);
      let fd = new FormData();
      //@ts-ignore
      fd.append("files", f);
      fd.append("abc", "123");

      try {
        const res = await quseUploadFile(ctx.token, fd);
        setUploadedFile(res.data[0]);
        toast.success("File uploaded successfully");
        props.onUpload(res.data[0]);
      } catch (err: any) {
        toast.error(err?.message || "Error uploading file");
      }

      setIsLoading(false);
    }
  };

  const handleFileChange = (e: any) => {
    setSelectedFile(e.target.files?.[0]);
    handleUpload(e.target.files?.[0]);
  };

  const handleUploadClick = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  return (
      
      <div className={`w-15 ${props.height ? "" : "h-15"} flex mb-2 items-start justify-end p-[2px] relative overflow-hidden`} style={{ height: props.height }}>
        {/**@ts-ignore */}
        <input
          ref={fileInputRef}
          accept="image/*"
          type="file"
          onChange={handleFileChange}
          className="hidden"
        />

        {
          uploadedFile?.url && (
            <Image alt="" src={uploadedFile?.url} width="0" height="0" sizes="100vw" className="w-full h-full absolute top-0 left-0 object-cover" />
          )
        }
        
        <div className="w-full bg-white aspect-square rounded-[25px] h-full flex items-center justify-center">
          {!isLoading && !uploadedFile && (
            <Button
              onClick={handleUploadClick}
              className="rounded-md bg-primary-900 px-10 py-5 text-white"
            >
              <IconCloudUp /> {props.check ? t("upload_one_or_more_photos") : ""}
            </Button>
          )}

          {isLoading && (
            <Button className="rounded-md bg-primary-900 px-10 py-5 text-white">
              <CircularProgress
                isDisabled
                color="secondary"
                classNames={{ svgWrapper: "mr-3", svg: "w-[25px]" }}
                className="w-[15px] h-[15px]"
              />{" "}
              {props.check ? t("upload_one_or_more_photos") : ""}
            </Button>
          )}

          {!isLoading && uploadedFile && (
            <Button
              onClick={handleUploadClick}
              className="rounded-md bg-primary-900 px-10 py-5 text-white"
            >
              <IconLink /> Edit Uploaded
            </Button>
          )}
        </div>
      </div>
      
  );
}


=== ./app/[locale]/custom-mekhwar/components/SecondStep.tsx ===
"use client";

import { FabricCard } from "@/components";
import { createCustomOder, extractError, getFabricListing } from "@/provider";
import { useAuth } from "@/provider/AuthContext";
import { Button, CircularProgress, Pagination } from "@nextui-org/react";
import {
  IconCheck,
  IconChevronRight,
  IconChevronLeft,
} from "@tabler/icons-react";
import { useEffect, useState } from "react";
import { toast } from "react-toastify";
import { motion } from "framer-motion";
import { useTranslations } from "next-intl";

export interface SecondStepProps {
  onNext: (data: any) => void;
  orderData: any;
  handResize: (f: any) => void;
  onPrevious: () => void;
}

interface CustomOrderPostI {
  color: string;
  customerInstructions: string;
  design: number;
  design2: number;
  design3: number;
  design4: number;
  fabric: number;
  style: string;
  arm_length: number;
  shoulder: number;
  cup: string;
  wrist_style: string;
  neck_style: string;
  chest_point: number;
  bust: number;
  wrist: number;
  neck: number;
  hips: number;
  height: number;
  arm_width: number;
  sleeves_length: number;
  top_length: number;
  top_width: number;
  size: string;
  save_size_profile: boolean;
}

export default function SecondStep(props: SecondStepProps) {
  const [initialLoading, setInitialLoading] = useState(true);
  const [isLoading, setIsLoading] = useState(false);
  const [fabricData, setFabricData] = useState<any[]>();
  const [page, setPage] = useState(0);
  const [totalPages, setTotalPages] = useState(0);
  const [selectedFabric, setSelectedFabric] = useState<any>();
  const [isOrdering, setIsOrdering] = useState(false);

  const ctx = useAuth();
  const t = useTranslations("shop");

  useEffect(() => {
    getFabricData();
  }, []);

  const getFabricData = async () => {
    ctx.checkAuth();
    const { data, error } = await getFabricListing(ctx.token, {
      "pagination[page]": page,
      "pagination[pageSize]": 10,
    });

    if (error) {
      toast.error(extractError(error));
    }

    setFabricData(data?.data);

    setTotalPages(data?.meta?.pagination?.pageCount || 0);
    setPage(data?.meta?.pagination?.page || 0);

    setInitialLoading(false);
  };

  const handlePageChange = async (p: number) => {
    setIsLoading(true);
    setPage(p);
    const { data, error } = await getFabricListing(ctx.token, {
      "pagination[page]": p,
      "pagination[pageSize]": 10,
    });

    if (error) {
      toast.error(extractError(error));
    }

    setFabricData(data?.data);

    setTotalPages(data?.meta?.pagination?.pageCount || 0);
    setIsLoading(false);
  };

  const handleOnNext = async () => {
    if (!selectedFabric) {
      toast.error("Please select a fabric");
      return;
    }
    setIsOrdering(true);

    const uploadData: CustomOrderPostI = {
      fabric: selectedFabric,
      color: props?.orderData?.color,
      customerInstructions: props?.orderData?.customerInstructions,
      design: props?.orderData?.image.id,
      design2: props?.orderData?.image2?.id,
      design3: props?.orderData?.image3?.id,
      design4: props?.orderData?.image4?.id,
      style: props?.orderData?.styles,
      size: props?.orderData?.size,
      shoulder: props?.orderData?.shoulder || 0,
      bust: props?.orderData?.bust || 0,
      wrist: props?.orderData?.wrist || 0,
      top_length: props?.orderData?.top_length || 0,
      top_width: props?.orderData?.top_width || 0,
      arm_length: props?.orderData?.arm_length || 0,
      cup: props?.orderData?.cup || "A",
      chest_point: props?.orderData?.chest_point || 0,
      neck: props?.orderData?.neck || 0,
      hips: props?.orderData?.hips || 0,
      height: props?.orderData?.height || 0,
      arm_width: props?.orderData?.hips || 0,
      sleeves_length: props?.orderData?.sleeves_length || 0,
      wrist_style: props?.orderData?.wrist_style || 0,
      neck_style: props?.orderData?.neck_style || 0,
      save_size_profile: props?.orderData?.saveSizeProfile,
    };

    try {
      const { data, error } = await createCustomOder(ctx.token, {
        data: uploadData,
      });

      if (error) {
        toast.error(extractError(error));
        setIsOrdering(false);
        return;
      }
      setIsOrdering(false);
      props.onNext(data);
    } catch (err) {
      toast.error(extractError(err));
      setIsOrdering(false);
      return;
    }
  };


  const handleOnBack = () =>{
    props.onNext("prev");
  };

  return (
    <div className="w-full min-h-main xs:flex xs:flex-col xs:items-center p-3">
      <div>
        {initialLoading && (
          <div className="w-full h-full flex items-center justify-center">
            <CircularProgress color="secondary" size="sm" />
          </div>
        )}

        {isLoading && (
          <div className="w-screen h-screen fixed top-0 flex justify-center items-center z-10 backdrop-blur-sm">
            <CircularProgress color="secondary" />
          </div>
        )}

        {!initialLoading && fabricData?.length && (
          <div
            className="w-full grid gap-4"
            style={{
              gridTemplateColumns: "repeat(auto-fill, minmax(240px, 1fr))",
            }}
          >
            {fabricData.map((fabric, index) => {
              return (
                <div
                  key={`fabric-${index}`}
                  className="relative"
                  onClick={() => setSelectedFabric(fabric.id)}
                >
                  {
                    <motion.div
                      initial={
                        selectedFabric === fabric?.id
                          ? { scale: 0 }
                          : { scale: 1 }
                      }
                      animate={
                        selectedFabric === fabric?.id
                          ? { rotate: 360, scale: 1 }
                          : { scale: 0, rotate: -360 }
                      }
                      transition={{
                        type: "spring",
                        stiffness: 260,
                        damping: 20,
                      }}
                      className={`absolute top-[12px] right-[32px] z-[100000] bg-secondary rounded-full p-2 shadow-xl`}
                    >
                      <IconCheck size={16} />
                    </motion.div>
                  }

                  <FabricCard
                    image={
                      fabric?.attributes?.main_image?.data?.attributes?.url
                    }
                    name={fabric?.attributes?.name}
                    price={fabric?.attributes?.price}
                    tailorName={
                      fabric?.attributes?.tailor?.data?.attributes?.name
                    }
                    key={`fabric-${index}`}
                    preventDefault={true}
                  />
                </div>
              );
            })}
          </div>
        )}

        <div className="w-full mt-5 flex justify-center items-center">
          {totalPages > 1 && (
            <Pagination
              color="secondary"
              total={totalPages}
              initialPage={page}
              onChange={handlePageChange}
            />
          )}
        </div>
      </div>
      <div className="w-full mt-5 flex justify-center items-center">
        <Button
          isDisabled={!selectedFabric || isOrdering}
           onClick={handleOnBack}
          className="bg-primary-700 text-white max-w-[300px] text-[16px] font-bold w-full min-h-0 py-6 rounded-[6px] m-2"
        >
          {t("back")}
        </Button>
        <Button
          isDisabled={!selectedFabric || isOrdering}
          onClick={handleOnNext}
          className="bg-primary-700 text-white max-w-[300px] text-[16px] font-bold w-full min-h-0 py-6 rounded-[6px]"
          startContent={
            isOrdering ? (
              <CircularProgress
                color="secondary"
                classNames={{ svg: "w-[20px]" }}
              />
            ) : (
              <IconChevronRight size={18} />
            )
          }
        >
          {t("next")}
        </Button>
      </div>
    </div>
  );
}


=== ./app/[locale]/custom-mekhwar/components/SizeGuideModal.tsx ===
"use client";
import CardContainer from "@/abstract/CardContainer";
import { useRouter } from "@/utils";
import { Button } from "@nextui-org/react";
import { IconChevronLeft, IconX } from "@tabler/icons-react";
import { useLocale, useTranslations } from "next-intl";
import Image from "next/image";

export interface SizeGuideModalProps {
  onClose: () => void;
}

export default function SizeGuideModal(props: SizeGuideModalProps) {
  const locale = useLocale();
  const router = useRouter();
  const t = useTranslations("size_guide");

  return (
    <CardContainer scissors={false} extraClasses="overflow-auto mt-0">
      <div className="w-full flex justify-center items-center">
        <section className="w-full max-w-main flex flex-col lg:flex-row justify-center items-start overflow-auto relative bg-primary m-0 pt-10 xs:pt-[70px]">
          <Button
            className="bg-transparent rounded-full w-[40px] absolute left-3 top-3 min-w-[40px] h-[40px] bg-primary-700 p-3"
            onClick={() => props.onClose()}
          >
            <IconX className="text-secondary" />
          </Button>
          <article className="flex flex-col items-start lg:w-[50%] lg:max-w-[400px] w-full">
            <p className="text-caption mb-10 lg:text-start text-center">
              {t("page_description_1")}
              <br /> <br />
              {t("page_description_2")}
              <br /> {t("page_description_3")}
            </p>

            <div className="table-containers w-full flex flex-col lg:flex-row justify-center items-center lg:justify-start lg:items-start">
              <table className="border-separate w-full lg:w-auto">
                <thead className="bg-primary-700">
                  <tr className="">
                    <th className="text-secondary text-[14px] text-left p-4 py-5 font-normal lg:rounded-tl-lg min-w-[56px]">
                      {t("height")}
                    </th>
                    <th className="text-secondary text-[14px] text-left p-5 font-normal">
                      {t("chest_point")}
                    </th>
                    <th className="lg:table-cell text-secondary text-[14px] text-left p-5 font-normal">
                      {t("cup_size")}
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-primary-700">
                  <tr>
                    <td className="text-secondary text-[14px] text-left p-5 font-normal">
                      <div className="flex items-center justify-between">
                        <span>52</span>
                        <span>{t("inch")}</span>
                      </div>
                    </td>
                    <td className="text-secondary text-[14px] text-left p-5 font-normal">
                      <div className="flex items-center justify-between">
                        <span>18</span>
                        <span>{t("inch")}</span>
                      </div>
                    </td>
                    <td className="table-cell text-secondary text-[14px] text-left p-5 font-normal">
                      AA - A
                    </td>
                  </tr>
                  <tr>
                    <td className="text-secondary text-[14px] text-left p-5 font-normal">
                      <div className="flex items-center justify-between">
                        <span>54</span>
                        <span>{t("inch")}</span>
                      </div>
                    </td>
                    <td className="text-secondary text-[14px] text-left p-5 font-normal">
                      <div className="flex items-center justify-between">
                        <span>20</span>
                        <span>{t("inch")}</span>
                      </div>
                    </td>
                    <td className="table-cell text-secondary text-[14px] text-left p-5 font-normal">
                      B
                    </td>
                  </tr>
                  <tr>
                    <td className="text-secondary text-[14px] text-left p-5 font-normal">
                      <div className="flex items-center justify-between">
                        <span>56</span>
                        <span>{t("inch")}</span>
                      </div>
                    </td>
                    <td className="text-secondary text-[14px] text-left p-5 font-normal">
                      <div className="flex items-center justify-between">
                        <span>22</span>
                        <span>{t("inch")}</span>
                      </div>
                    </td>
                    <td className="table-cell text-secondary text-[14px] text-left p-5 font-normal">
                      C
                    </td>
                  </tr>
                  <tr>
                    <td className="text-secondary text-[14px] text-left p-5 font-normal">
                      <div className="flex items-center justify-between">
                        <span>58</span>
                        <span>{t("inch")}</span>
                      </div>
                    </td>
                    <td className="text-secondary text-[14px] text-left p-5 font-normal">
                      <div className="flex items-center justify-between">
                        <span>24</span>
                        <span>{t("inch")}</span>
                      </div>
                    </td>
                    <td className="table-cell text-secondary text-[14px] text-left p-5 font-normal">
                      D - DD -DDD
                    </td>
                  </tr>
                  <tr>
                    <td className="text-secondary text-[14px] text-left p-5 font-normal">
                      <div className="flex items-center justify-between">
                        <span>60</span>
                        <span>{t("inch")}</span>
                      </div>
                    </td>
                    <td className="text-secondary text-[14px] text-left p-5 font-normal">
                      <div className="flex items-center justify-between">
                        <span>26</span>
                        <span>{t("inch")}</span>
                      </div>
                    </td>
                    <td className="table-cell text-secondary text-[14px] text-left p-5 font-normal">
                      G - H
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
            <div className="w-full flex flex-col justify-start mt-5 lg:items-start items-center">
              <h3 className="font-medium text-secondary lg:text-start text-lg">
                {t("chest_point")}:
              </h3>
              <p className="text-caption mb-10 lg:text-start text-center lg:max-w-[60%]">
                {t("chest_point_description")}
              </p>
            </div>
            <div className="w-full flex flex-col justify-start mt-5 lg:items-start items-center">
              <h3 className="font-medium text-secondary lg:text-start text-lg">{t("bust")}:</h3>
              <p className="text-caption mb-10 lg:text-start text-center lg:max-w-[60%]">
                {t("bust_description")}
              </p>
            </div>
          </article>

          <div className="lg:w-[40%] w-full mt-5 lg:mt-0">
            <Image
              src={`/assets/images/size-guide-${locale}.png`}
              unoptimized
              // property={"high"}
              alt=""
              width="0"
              height="0"
              // sizes="100vw"
              style={{
                width: "100%",
                height: "auto",
                maxHeight: "600px",
                objectFit: "contain",
              }}
            />
          </div>
        </section>
      </div>
    </CardContainer>
  );
}


=== ./app/[locale]/custom-mekhwar/components/ThirdStep.tsx ===
"use client";
import { getSiteConfig } from "@/provider";
import { useRouter } from "@/utils";
import { Button, CircularProgress } from "@nextui-org/react";
import { IconBrandWhatsapp, IconClock, IconUser } from "@tabler/icons-react";
import { useTranslations } from "next-intl";
import { useEffect, useState } from "react";

export interface ThirdStepProps {
  swiperRef?: any;
}

export default function ThirdStep() {
  const [isLoading, setIsLoading] = useState(false);
  const [whatsappNum, setWhatsappNum] = useState("");

  const router = useRouter();
  const t = useTranslations("shop");

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    setIsLoading(true);
    const { data, error } = await getSiteConfig();
    //@ts-ignore
    setWhatsappNum(data?.data?.attributes?.whatsapp_number_for_custom_design?.toString());
    setIsLoading(false);
  };

  return (
    <div className="flex flex-col items-center pb-5">
      <div className="w-300">
      <IconClock size={300}  className=" sm:text-4xl md:text-5xl lg:text-6xl"/>

      </div>

      <h1 className="text-5xl xs:text-3xl small:text-4xl medium:4xl font-bold text-center mb-5">
       {t("your_order_is_pending_l")} <span className="text-secondary-800">{t("your_order_is_pending_t")}</span>
      </h1>

      <p className="max-w-md text-center mb-5 px-5">
        {t("your_order_is_pending_description")}
      </p>

      <Button
        onClick={() => {
          window.open(("https://wa.me/" + whatsappNum), "_blank");
        }}
        className="bg-primary-700 text-white max-w-[300px] text-[16px] font-bold w-full min-h-0 py-6 rounded-[6px]"
        startContent={isLoading ? <CircularProgress className="text-secondary-800" classNames={{ svg: "w-[24px]" }} /> : <IconBrandWhatsapp size={24} />}
      >
        {t("chat_with_us")}
      </Button>

      <Button
        onClick={() => {
          router.push("/profile");
        }}
        className="bg-primary-700 text-white max-w-[300px] text-[16px] font-bold w-full min-h-0 py-6 rounded-[6px] mt-5"
        startContent={<IconUser size={24} />}
      >
        {t("view_order")}
      </Button>
    </div>
  );
}


=== ./app/[locale]/custom-mekhwar/components/StepFive/index.tsx ===
"use client";
import { createCustomOder, extractError, getSiteConfig, quseUploadFile } from "@/provider";
import { useAuth } from "@/provider/AuthContext";
import { useRouter } from "@/utils";
import { Button, CircularProgress } from "@nextui-org/react";
import { IconBrandWhatsapp, IconClock, IconUser } from "@tabler/icons-react";
import { useTranslations } from "next-intl";
import { useEffect, useState } from "react";
import { toast } from "react-toastify";

export interface StepFiveProps {
  selectedDesign: any;
  uploadedDesign: any;
  sizes: any;
  selectedFabricId: any;
  selectedFabricPattern: any;
}

export default function StepFive({
  selectedDesign,
  uploadedDesign,
  sizes,
  selectedFabricId,
  selectedFabricPattern,
}: StepFiveProps) {
  const [isLoading, setIsLoading] = useState(true);
  const [showPending, setShowPending] = useState(false);
  const [whatsappNum, setWhatsappNum] = useState("");

  const ctx = useAuth();
  const router = useRouter();
  const t = useTranslations("shop");

  const uploadedDesigns = async (designs: any) => {
    const uploadedData = [];

    for (const design of designs) {
      const formData = new FormData();
      formData.append("files", design);
      const res: any = await quseUploadFile(ctx.token, formData);
      uploadedData.push(res.data[0].id);
    }

    return uploadedData;
  };

  const loadConfig = async () => {
    const { data: siteConfigData, error: siteConfigError }: any = await getSiteConfig();

    if (siteConfigData?.data?.attributes) {
      setWhatsappNum(siteConfigData.data.attributes.whatsapp_number_for_custom_design);
    }
  };

  const processData = async () => {
    setIsLoading(true);
    try {
      const orderObj = {
        design: null,
        design2: null,
        design3: null,
        design4: null,
        fabricId: null,
        designId: null,
        patternId: null,
        shoulder: null,
        bust: null,
        wrist: null,
        cup: null,
        chest_point: null,
        neck: null,
        hips: null,
        height: null,
        arm_width: null,
        sleeves_length: null,
        addressId: null,
        size: null,
        customerInstructions: null,
        save_size_profile: null,
        size_profile_id: null,
      };

      await loadConfig();

      if (uploadedDesigns?.length) {
        const res = await uploadedDesigns(uploadedDesign);

        if (res[0]) orderObj["design"] = res[0];
        if (res[1]) orderObj["design2"] = res[1];
        if (res[2]) orderObj["design3"] = res[2];
        if (res[3]) orderObj["design4"] = res[3];
      }

      orderObj["fabricId"] = selectedFabricId;
      if (selectedFabricPattern) orderObj["patternId"] = selectedFabricPattern;

      if (sizes) {
        orderObj["shoulder"] = sizes?.shoulder;
        orderObj["bust"] = sizes?.bust;
        orderObj["wrist"] = sizes?.wrist;
        orderObj["cup"] = sizes?.cup;
        orderObj["chest_point"] = sizes?.chest_point;
        orderObj["neck"] = sizes?.neck;
        orderObj["hips"] = sizes?.hips;
        orderObj["height"] = sizes?.height;
        orderObj["arm_width"] = sizes?.arm_width;
        orderObj["sleeves_length"] = sizes?.sleeves_length;
        orderObj["save_size_profile"] = sizes?.saveSizeProfile;
        orderObj["size_profile_id"] = sizes?.size_profile_id;
      }

      if (selectedDesign) orderObj["designId"] = selectedDesign;

      orderObj["customerInstructions"] = sizes?.customerInstructions;

      const { data, error }: any = await createCustomOder(ctx.token, orderObj);

      if (data?.canPay && data?.orderId) {
        router.push({
          pathname: "/checkout/address",
          query: {
            orderType: "custom",
            orderId: data?.orderId,
          },
        });
        return;
      }

      if (!data?.canPay) {
        setShowPending(true);
      }

      setIsLoading(false);
    } catch (err: any) {
      if (err?.message) {
        toast.error(err.message);
      }

      if (err?.response?.data?.message) {
        toast.error(err.response.data.message);
      }

      if (extractError(err)) {
        toast.error(extractError(err));
      }

      setIsLoading(false);
    }
  };

  useEffect(() => {
    processData();
  }, []);

  if (isLoading) {
    return (
      <div className="w-full flex justify-between items-start">
        <div className="container w-full min-h-[400px] flex flex-col justify-center items-center">
          <CircularProgress color="secondary" />
        </div>
      </div>
    );
  }

  return (
    <div className="w-full flex flex-col justify-center items-center">
      <div className="container w-full max-w-[750px] min-h-[400px] flex flex-col justify-center items-center">
        {showPending && (
          <div className="flex flex-col items-center pb-5">
            <div className="w-300 flex justify-center items-center">
              <IconClock size={300} className=" sm:text-4xl md:text-5xl lg:text-6xl sx:text-medium xs:w-[50%]" />
            </div>

            <h1 className="text-5xl xs:text-3xl small:text-4xl medium:4xl font-bold text-center mb-5">
              {t("your_order_is_pending_l")}{" "}
              <span className="text-secondary-800">{t("your_order_is_pending_t")}</span>
            </h1>

            <p className="max-w-md text-center mb-5 px-5">
              {t("your_order_is_pending_description")}
            </p>

            <Button
              onClick={() => {
                window.open("https://wa.me/" + whatsappNum, "_blank");
              }}
              className="bg-primary-700 text-white max-w-[300px] text-[16px] font-bold w-full min-h-0 py-6 rounded-[6px]"
              startContent={
                isLoading ? (
                  <CircularProgress
                    className="text-secondary-800"
                    classNames={{ svg: "w-[24px]" }}
                  />
                ) : (
                  <IconBrandWhatsapp size={24} />
                )
              }
            >
              {t("chat_with_us")}
            </Button>

            <Button
              onClick={() => {
                router.push("/profile");
              }}
              className="bg-primary-700 text-white max-w-[300px] text-[16px] font-bold w-full min-h-0 py-6 rounded-[6px] mt-5"
              startContent={<IconUser size={24} />}
            >
              {t("view_order")}
            </Button>
          </div>
        )}
      </div>
    </div>
  );
}


=== ./app/[locale]/custom-mekhwar/components/StepFour/index.tsx ===
import { filterFabric, filterMekhwar, getSiteConfig } from "@/provider";
import { CircularProgress } from "@nextui-org/react";
import { useLocale, useTranslations } from "next-intl";
import Image from "next/image";
import { useEffect, useState } from "react";

export interface StepFourProps {
  selectedDesign: any;
  uploadedDesign: any;
  sizes: any;
  selectedFabricId: any;
  selectedFabricPattern: any;
  handleHasPrice: any;
}

export default function StepFour({
  selectedDesign,
  uploadedDesign,
  selectedFabricId,
  selectedFabricPattern,
  handleHasPrice,
  sizes,
}: StepFourProps) {
  const [fabric, setFabric] = useState<any>(null);
  const [design, setDesign] = useState<any>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [siteConfig, setSiteConfig] = useState<any>({});
  const [total, setTotal] = useState(0);
  const [tax, setTax] = useState(0);
  const [deliveryCharge, setDeliveryCharge] = useState(0);
  const [designPrice, setDesignPrice] = useState(0);
  const [fabricPrice, setFabricPrice] = useState(0);

  const t = useTranslations("customization");
  const locale = useLocale();

  const loadData = async () => {
    const fabricObj: any = {};
    const designObj: any = {};
    let siteCnf: any = {};

    setIsLoading(true);

    if (selectedFabricId) {
      const fabricFilters: any = {
        filters: {
          id: {
            $eq: selectedFabricId,
          },
        },
        populate: ["fabric_pattern", "main_image", "fabric_pattern.image", "localizations"],
        locale,
      };

      let { data: fabrics, error: fabricError }: any = await filterFabric(fabricFilters);

      if (fabric?.attributes?.locale != "en") {
        const enFab = fabrics?.data?.[0]?.attributes?.localizations?.data?.find(
          (fab: any) => fab?.attributes?.locale === "en"
        );
        console.log("enFab", enFab);
        if (enFab && fabric?.data?.[0]) {
          fabrics.data[0].id = enFab?.id;
        }
      }

      const fabricRes = fabrics?.data[0];
      fabricObj["id"] = fabricRes?.id;
      fabricObj["name"] = fabricRes.attributes?.name;
      fabricObj["price"] = fabricRes.attributes?.price;
      fabricObj["image"] = fabricRes.attributes?.main_image;
      fabricObj["pattern"] = {};

      if (
        fabricRes?.attributes?.children_price > 0 &&
        fabricRes?.attributes?.children_length > 0
      ) {
        if (sizes?.height <= fabricRes?.attributes?.children_length) {
          fabricObj["price"] = fabricRes?.attributes?.children_price;
        }
      }

      if (selectedFabricPattern) {
        const pattern = fabricRes.attributes.fabric_pattern.find(
          (pattern: any) => pattern?.id === selectedFabricPattern
        );
        fabricObj["pattern"]["id"] = pattern?.id;
        fabricObj["pattern"]["name"] = pattern.title;
        fabricObj["pattern"]["price"] = pattern.price;
        fabricObj["pattern"]["image"] = pattern.image;
      }
      setFabric(fabricObj);
    }

    if (selectedDesign) {
      const mekhwarFilters: any = {
        filters: {
          id: {
            $eq: selectedDesign,
          },
        },
        populate: ["main_image", "localizations"],
        locale,
      };

      let { data: mekhwarData, error: mekhwarError }: any = await filterMekhwar(
        mekhwarFilters
      );

      const selectedDesignRes = mekhwarData?.data[0];

      if (selectedDesignRes?.attributes?.locale != "en") {
        const enFab = selectedDesignRes?.attributes?.localizations?.data?.find(
          (fab: any) => fab?.attributes?.locale === "en"
        );
        if (enFab) {
          selectedDesignRes.id = enFab?.id;
        }
      }

      designObj["id"] = selectedDesignRes.id;
      designObj["name"] = selectedDesignRes.attributes.title;
      designObj["price"] = selectedDesignRes.attributes.price;
      designObj["image"] = selectedDesignRes.attributes.main_image;
      setDesign(designObj);
    }

    const { data: siteConfigData, error: siteConfigError } = await getSiteConfig();

    if (siteConfigData?.data?.attributes) {
      setSiteConfig(siteConfigData.data.attributes);
      siteCnf = siteConfigData.data.attributes;
    }

    calculatePrice(fabricObj, designObj, siteCnf);
  };

  const calculatePrice = (fb: any, ds: any, st: any) => {
    //set delivery
    setDeliveryCharge(st?.delivery_charge);

    //set design price
    if (ds?.price) {
      setDesignPrice(ds?.price);
    }

    //set fabric price
    if (fb?.price) {
      setFabricPrice(fb?.price);
    }

    //set tax
    if (st?.tax) {
      setTax((ds?.price + fb?.price) * (st?.tax / 100));
    }

    //set total
    const t =
      ds?.price +
      fb?.price +
      (ds?.price + fb?.price) * ((st?.tax || 0) / 100);

    if (t && ds?.price && fb?.price) {
      setTotal(t);
      handleHasPrice(true);
      setIsLoading(false);
    } else {
      handleHasPrice(false);
      setIsLoading(false);
    }
  };

  useEffect(() => {
    loadData();
  }, []);

  if (isLoading) {
    return (
      <div className="w-full flex justify-between items-start">
        <div className="container w-full min-h-[400px] flex flex-col justify-center items-center">
          <CircularProgress color="secondary" />
        </div>
      </div>
    );
  }

  return (
    <div className="w-full flex flex-col justify-center items-center">
      <div className="container w-full max-w-[750px] min-h-[400px] flex flex-col justify-center items-start">
        <div className="w-full flex flex-col items-start justify-start">
          {uploadedDesign?.length > 0 && (
            <div className="w-full h-[70px] bg-primary-700 rounded-md p-3 flex justify-between items-center">
              <div className="items-cont flex justify-start items-center h-full">
                {uploadedDesign.map((design: any, index: number) => (
                  <div
                    className="relative h-full aspect-square border-secondary border-solid rounded-md border-2 mx-1"
                    key={`design-image-${index}`}
                  >
                    <Image
                      src={URL.createObjectURL(design)}
                      alt="design"
                      fill
                      className="w-full h-full aspect-square object-cover"
                    />
                  </div>
                ))}
              </div>
              <p className="items-price text-[14px] font-medium">
                {t("price_after_confirmation")}
              </p>
            </div>
          )}

          {design && (
            <div className="w-full h-[70px] bg-primary-700 rounded-md p-3 flex justify-between items-center">
              <div className="items-cont flex justify-start items-center h-full">
                <div className="relative h-full aspect-square border-secondary border-solid rounded-md border-2 mx-1">
                  <Image
                    src={design?.image?.data?.attributes?.url}
                    alt="design"
                    fill
                    className="w-full h-full aspect-square object-cover"
                  />
                </div>
                <p className="text-white font-medium text-[14px] w-auto">{design.name}</p>
              </div>
              <p className="items-price text-[14px] font-medium">{design.price} AED</p>
            </div>
          )}

          {fabric && !selectedFabricPattern && (
            <div className="w-full h-[70px] bg-primary-700 rounded-md p-3 flex justify-between items-center mt-3">
              <div className="items-cont flex justify-start items-center h-full">
                <div className="relative h-full aspect-square border-secondary border-solid rounded-md border-2 mx-1">
                  <Image
                    src={fabric?.image?.data?.attributes?.url}
                    alt="fabric"
                    fill
                    className="w-full h-full aspect-square object-cover"
                  />
                </div>
                <p className="text-white font-medium text-[14px] w-auto">{fabric.name}</p>
              </div>
              {fabricPrice ? (
                <p className="items-price text-[14px] font-medium">{fabricPrice} AED</p>
              ) : (
                <p className="items-price text-[14px] font-medium">
                  {t("price_after_confirmation")}
                </p>
              )}
            </div>
          )}

          {selectedFabricPattern && (
            <div className="w-full h-[70px] bg-primary-700 rounded-md p-3 flex justify-between items-center mt-3">
              <div className="items-cont flex justify-start items-center h-full">
                <div className="relative h-full aspect-square border-secondary border-solid rounded-md border-2 mx-1">
                  <Image
                    src={fabric?.pattern?.image?.data?.attributes?.url}
                    alt="fabric"
                    fill
                    className="w-full h-full aspect-square object-cover"
                  />
                </div>
                <p className="text-white font-medium text-[14px] w-auto">
                  {fabric?.pattern?.name}
                </p>
              </div>
              {fabricPrice ? (
                <p className="items-price text-[14px] font-medium">{fabricPrice} AED</p>
              ) : (
                <p className="items-price text-[14px] font-medium">
                  {t("price_after_confirmation")}
                </p>
              )}
            </div>
          )}

          {/* Start Price */}
          {design?.price && design?.price > 0 && fabric?.price && fabric?.price > 0 ? (
            <div className="w-full flex flex-col mt-4 p-1">
              {/* <div className="w-full flex items-center justify-between mb-2">
                <p className="text-secondary font-medium text-[16px]">{t("subtotal")}</p>
                <p className="text-secondary font-medium text-[16px]">
                  {design.price + fabric.price} AED
                </p>
              </div> */}
              {siteConfig?.tax > 0 ? (
                <div className="w-full flex items-center justify-between mt-3">
                  <p className="text-white text-[16px]">{t("estimated_tax")}</p>
                  <p className="text-white text-[16px]">{tax} AED</p>
                </div>
              ) : null}
              {siteConfig?.deliveryCharge > 0 && (
                <div className="w-full flex items-center justify-between mt-3">
                  <p className="text-white text-[16px]">{t("estimated_shipping_handling")}</p>
                  <p className="text-white text-[16px]">
                    {siteConfig?.delivery_charge ? (
                      <>{deliveryCharge} AED</>
                    ) : (
                      <>{t("free")}</>
                    )}
                  </p>
                </div>
              )}
              <div className="w-full flex items-center justify-between mt-5">
                <p className="text-secondary font-medium text-[16px]">{t("total")}</p>
                <p className="text-secondary font-medium text-[16px]">{total} AED</p>
              </div>
            </div>
          ) : (
            <div className="w-full mt-3 flex justify-center items-center">
              <h2 className="text-white font-medium text-[18px] mt-3">
                {t("price_after_confirmation")}
              </h2>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}


=== ./app/[locale]/custom-mekhwar/components/StepOne/ChooseDesignComponent.tsx ===
"use client";
import CardContainer from "@/abstract/CardContainer";
import { filterMekhwar } from "@/provider";
import { CircularProgress } from "@nextui-org/react";
import { useLocale, useTranslations } from "next-intl";
import Image from "next/image";
import React, { useEffect } from "react";
import { useState } from "react";
import DesignCard from "./DesignCard";

export interface ChooseDesignComponentProps {
  selectedDesign: number | null;
  onSelectDesign: (id: number) => void;
}

export default function ChooseDesignComponent({
  selectedDesign,
  onSelectDesign,
}: ChooseDesignComponentProps) {
  const [designList, setDesignList] = useState<any[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  const t = useTranslations("customization");
  const locale = useLocale();

  const loadData = async () => {
    setIsLoading(true);
    const { data, error } = await filterMekhwar({
      filters: {
        //@ts-ignore
        customizable: {
          $eq: true,
        },
        //@ts-ignore
      },
      locale,
      populate: "main_image,tailor,images",
    });
    if (error) {
      console.error(error);
      setIsLoading(false);
      return;
    }

    if (data?.data) {
      setDesignList(data.data);
      setIsLoading(false);
    }
  };

  useEffect(() => {
    loadData();
  }, []);

  return (
    <div className="container xs:w-full sm:w-[45%] min-h-[400px] flex flex-col justify-start items-start xs:mt-3">
      <h1 aria-label="title" className="text-white font-medium text-[18px]">{t("choose_design")}</h1>
      <div className="w-full h-full mt-2 min-h-[400px] max-h-[400px] overflow-y-auto">
        {isLoading && (
          <div className="w-full h-full flex items-center justify-center">
            <CircularProgress aria-label="progess" color="secondary" />
          </div>
        )}
        {!isLoading && designList.length === 0 && (
          <div className="w-full h-full flex items-center justify-center">
            <p aria-label="desc" className="text-white">{t("no_designs")}</p>
          </div>
        )}
        {!isLoading && designList.length > 0 && (
          <div className="h-full w-full grid grid-cols-[repeat(auto-fill,_minmax(130px,_1fr))] gap-3">
            {designList.map((design, index) => (
              <DesignCard
                key={index}
                imgUrl={design?.attributes?.main_image?.data?.attributes?.url}
                name={design?.attributes?.title}
                price={design?.attributes?.price}
                id={design.id}
                selectedDesign={selectedDesign}
                onSelectDesign={onSelectDesign}
                otherImages={design?.attributes?.images?.data?.map(
                  (img: any) => img?.attributes?.url
                )}
              />
            ))}
          </div>
        )}
      </div>
    </div>
  );
}


=== ./app/[locale]/custom-mekhwar/components/StepOne/DesignCard.tsx ===
import CardContainer from "@/abstract/CardContainer";
import { Button } from "@nextui-org/react";
import { IconCheck, IconEye } from "@tabler/icons-react";
import Image from "next/image";
import { useState } from "react";
import Lightbox from "yet-another-react-lightbox";
import LightboxZoom from "yet-another-react-lightbox/plugins/zoom";
import "yet-another-react-lightbox/styles.css";
import { motion } from "framer-motion";
export interface DesignCardProps {
  imgUrl: string;
  name: string;
  price: number;
  id: number;
  selectedDesign?: number | null;
  onSelectDesign?: (id: number) => void;
  otherImages?: string[];
}

export default function DesignCard({
  imgUrl,
  name,
  price,
  id,
  selectedDesign,
  onSelectDesign,
  otherImages,
}: DesignCardProps) {
  const [lightboxOpen, setLightboxOpen] = useState(false);

  const handleOpenLightbox = () => {
    setLightboxOpen(true);
  };
  const handleCloseLightbox = () => {
    setLightboxOpen(false);
  };

  const handleSelectDesign = () => {
    if (onSelectDesign) {
      onSelectDesign(id);
    }
  };

  return (
    <CardContainer scissors={false}>
      <div
        className="w-full h-full flex flex-col justify-start items-start cursor-pointer relative"
        onClick={handleSelectDesign}
      >
        {selectedDesign === id && (
          <motion.div
            initial={selectedDesign === id ? { scale: 0 } : { scale: 1 }}
            animate={
              selectedDesign === id ? { rotate: 360, scale: 1 } : { scale: 0, rotate: -360 }
            }
            transition={{
              type: "spring",
              stiffness: 260,
              damping: 20,
            }}
            className="absolute top-2 right-2 z-[50] bg-secondary rounded-full p-2 shadow-xl"
            aria-label="selected-design"
          >
            <IconCheck aria-label="icon" size={16} />
          </motion.div>
        )}
        <div className="w-full aspect-square relative choose-design-item-image">
          <Image
            src={imgUrl}
            alt={name || "design"}
            fill
            className="rounded-md w-full h-[125px] max-h-[130px] aspect-square object-cover"
            aria-label="image"
          />

          <Button
            onClick={handleOpenLightbox}
            className="bg-primary text-secondary hidden xs:flex absolute z-50 right-0 bottom-[10px]"
            aria-label="view-image"
          >
            <IconEye size={24} />
          </Button>

          <div className="design-card-image-item-overlay xs:hidden">
            <Button
              onClick={handleOpenLightbox}
              className="bg-primary text-secondary"
              aria-label="view-image"
            >
              <IconEye size={24} />
            </Button>
          </div>
        </div>
        <div className="w-full flex flex-col items-start justify-start mt-2">
          <p className="text-white font-medium text-[12px] line-clamp-1">{name}</p>
          <p className="text-secondary font-medium mt-2 text-[12px]">{price} AED</p>
        </div>
      </div>

      <Lightbox
        open={lightboxOpen}
        close={handleCloseLightbox}
        slides={[
          ...(otherImages?.map((img) => ({ src: img, caption: name })) ?? []),
          { src: imgUrl, caption: name },
        ]}
        plugins={[LightboxZoom]}
        animation={{ zoom: 500 }}
        zoom={{
          maxZoomPixelRatio: 3,
          zoomInMultiplier: 2,
          doubleTapDelay: 300,
          doubleClickDelay: 300,
          doubleClickMaxStops: 2,
          keyboardMoveDistance: 50,
          wheelZoomDistanceFactor: 100,
          pinchZoomDistanceFactor: 100,
          scrollToZoom: false,
        }}
      />
    </CardContainer>
  );
}


=== ./app/[locale]/custom-mekhwar/components/StepOne/index.tsx ===
"use client";
import React from "react";
import { IconEye, IconTrash, IconUpload } from "@tabler/icons-react";
import Image from "next/image";
import { useRef, useState } from "react";
import {
  Button,
  Modal,
  ModalBody,
  ModalContent,
  ModalFooter,
  ModalHeader,
} from "@nextui-org/react";
import "yet-another-react-lightbox/styles.css";
import { useTranslations } from "next-intl";
import UploadDesignComponent from "./UploadDesignComponent";
import ChooseDesignComponent from "./ChooseDesignComponent";
import CardContainer from "@/abstract/CardContainer";

export interface StepOneProps {
  selectedDesign: number | null;
  onSelectDesign: (id: number) => void;
  uploadedDesign: File[] | [];
  handleUpload: (file: File) => void;
  handleDeleteUpload: (index: number) => void;
  modalOpen: boolean;
  setModalOpen: (open: boolean) => void;
  designToSelect: number | null;
  setSelectedDesign: (id: number | null) => void;
  setUploadedDesign: (files: File[] | []) => void;
}

export default function StepOne({ selectedDesign, onSelectDesign, uploadedDesign, handleUpload, handleDeleteUpload, modalOpen, designToSelect, setSelectedDesign, setUploadedDesign, setModalOpen}: StepOneProps) {
  const t = useTranslations("customization");

  return (
    <div className="w-full flex justify-between items-start xs:flex-col-reverse flex-row">
      <UploadDesignComponent
        uploadedDesigns={uploadedDesign}
        handleUpload={handleUpload}
        handleDelete={handleDeleteUpload}
      />
      <ChooseDesignComponent
        selectedDesign={selectedDesign}
        onSelectDesign={onSelectDesign}
      />

      <Modal isOpen={modalOpen} onClose={() => setModalOpen(false)} size="sm">
        <ModalContent>
          <CardContainer scissors={false}>
            <ModalHeader>{t("modal_choose_design")}</ModalHeader>
            <ModalBody>
              {t("modal_your_uploaded_designs_will_be_deleted")}
            </ModalBody>
            <ModalFooter>
              <Button
                onClick={() => {
                  setModalOpen(false);
                }}
                className="bg-transparent text-danger"
              >
                {t("modal_cancel")}
              </Button>
              <Button
                onClick={() => {
                  setSelectedDesign(designToSelect);
                  setUploadedDesign([]);
                  setModalOpen(false);
                }}
                className="bg-primary text-white"
              >
                {t("modal_confirm")}
              </Button>
            </ModalFooter>
          </CardContainer>
        </ModalContent>
      </Modal>
    </div>
  );
}


=== ./app/[locale]/custom-mekhwar/components/StepOne/UploadDesignComponent.tsx ===
"use client";
import React from "react";
import { Button } from "@nextui-org/react";
import { IconCloudUp, IconEye, IconTrash } from "@tabler/icons-react";
import Image from "next/image";
import { useRef, useState } from "react";
import { useTranslations } from "next-intl";
import CardContainer from "@/abstract/CardContainer";
import Lightbox from "yet-another-react-lightbox";
import LightboxZoom from "yet-another-react-lightbox/plugins/zoom";
import "yet-another-react-lightbox/styles.css";

export interface UploadDesignComponentProps {
  handleUpload: (file: File) => void;
  uploadedDesigns: File[] | [];
  handleDelete: (index: number) => void;
}

export default function UploadDesignComponent({ uploadedDesigns, handleUpload, handleDelete}: UploadDesignComponentProps) {
  const [lightboxOpen, setLightboxOpen] = useState(false);
  const [currentSlide, setCurrentSlide] = useState(0);

  const inputRef = useRef<HTMLInputElement>(null);
  const t = useTranslations("customization");

  const onFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      handleUpload(file);
      //reset file input to empty the file input from files
      if (inputRef.current) {
        inputRef.current.value = "";
      }
    }
  };
  return (
    <div className="container xs:w-full sm:w-[45%] min-h-[400px] flex flex-col justify-start items-start xs:mt-5">
      <h1 aria-label="title" className="text-white font-medium text-[18px]">{t("upload_design")}</h1>
      <CardContainer
        scissors={false}
        extraClasses="w-full h-full min-h-[400px] mt-2"
      >
        {/* <div className="uploader flex justify-start items-start flex-wrap"> */}
        <div className="h-full w-full grid grid-cols-[repeat(auto-fill,_minmax(100px,_1fr))] gap-1">
          {uploadedDesigns.map((file, index) => (
            <div
              key={index}
              className={`w-[100px] h-[100px] flex flex-col justify-center items-center border-small border-black/15 rounded-md select-none cursor-pointer hover:shadow-sm hover:shadow-secondary/20 transition-shadow relative upload-item`}
            >
              <Image
                src={URL.createObjectURL(file)}
                alt="design"
                className="w-full h-full object-cover rounded-md"
                fill
                aria-label="image"
              />

              <div className="upload-item-overlay">
                <Button
                  className="min-w-[25px] min-h-[25px] w-[30px] h-[30px] text-secondary mr-2 bg-primary"
                  isIconOnly
                  onClick={() => {
                    setCurrentSlide(index);
                    setLightboxOpen(true);
                  }}
                >
                  <IconEye size={16} />
                </Button>
                <Button
                  className="min-w-[25px] min-h-[25px] w-[30px] h-[30px] text-danger bg-primary"
                  isIconOnly
                  onClick={() => handleDelete(index)}
                >
                  <IconTrash size={16} />
                </Button>
              </div>
            </div>
          ))}
          <input
            ref={inputRef}
            type="file"
            accept="image/*"
            className="hidden"
            onChange={onFileChange}
          />

          {uploadedDesigns.length < 4 && (
            <div
              className={`w-[100px] h-[100px] flex flex-col justify-center items-center border-small border-black/15 rounded-md select-none cursor-pointer hover:shadow-sm hover:shadow-secondary/20 transition-shadow relative`}
            >
              <Button
                onClick={() => {
                  if (inputRef.current) {
                    inputRef.current.click();
                  }
                }}
                className="w-full h-full flex items-center justify-center bg-primary text-white rounded-md"
              >
                <IconCloudUp size={24} />
              </Button>
            </div>
          )}
        </div>
      </CardContainer>

      <Lightbox
        slides={uploadedDesigns.map((file) => ({ src: URL.createObjectURL(file) }))}
        open={lightboxOpen}
        close={() => setLightboxOpen(false)}
        index={currentSlide}
        plugins={[LightboxZoom]}
        animation={{ zoom: 500 }}
        zoom={{
          maxZoomPixelRatio: 3,
          zoomInMultiplier: 2,
          doubleTapDelay: 300,
          doubleClickDelay: 300,
          doubleClickMaxStops: 2,
          keyboardMoveDistance: 50,
          wheelZoomDistanceFactor: 100,
          pinchZoomDistanceFactor: 100,
          scrollToZoom: false,
        }}
      />
    </div>
  );
}


=== ./app/[locale]/custom-mekhwar/components/StepThree/index.tsx ===
import { useTranslations } from "next-intl";
import { forwardRef, useEffect, useImperativeHandle, useState } from "react";
import { useForm } from "react-hook-form";
import { toast } from "react-toastify";
import * as Yup from "yup";
import DropdownComponent from "../Drop";
import {
  Button,
  Checkbox,
  Dropdown,
  DropdownItem,
  DropdownMenu,
  DropdownTrigger,
  Modal,
  ModalContent,
} from "@nextui-org/react";
import { ThemeInput } from "@/components/input/theme-input";
import { Link } from "@/utils";
import { IconInfoCircle } from "@tabler/icons-react";
import { getUserProfiles } from "@/utils/cart";
import { yupResolver } from "@hookform/resolvers/yup";
import SizeGuideModal from "../SizeGuideModal";

let patternTwoDigisAfterComma = /^\d+(\.\d{0,2})?$/;

const customSizeSchema = Yup.object({
  bust: Yup.number()
    .positive()
    .test(
      "is-decimal",
      "The amount should be a decimal with maximum two digits after comma",
      (val: any) => {
        if (val != undefined) {
          return patternTwoDigisAfterComma.test(val);
        }
        return true;
      }
    )
    .typeError("Number required")
    .required("Required")
    .max(42)
    .min(32),
  shoulder: Yup.number()
    .positive()
    .test(
      "is-decimal",
      "The amount should be a decimal with maximum two digits after comma",
      (val: any) => {
        if (val != undefined) {
          return patternTwoDigisAfterComma.test(val);
        }
        return true;
      }
    )
    .typeError("Number required")
    .required("Required")
    .max(13.5)
    .min(5),
  sleeves_length: Yup.number()
    .positive()
    .test(
      "is-decimal",
      "The amount should be a decimal with maximum two digits after comma",
      (val: any) => {
        if (val != undefined) {
          return patternTwoDigisAfterComma.test(val);
        }
        return true;
      }
    )
    .typeError("Number required")
    .required("Required")
    .max(30)
    .min(19),
  hips: Yup.number()
    .positive()
    .test(
      "is-decimal",
      "The amount should be a decimal with maximum two digits after comma",
      (val: any) => {
        if (val != undefined) {
          return patternTwoDigisAfterComma.test(val);
        }
        return true;
      }
    )
    .typeError("Number required")
    .required("Required")
    .max(44)
    .min(34),
  arm_width: Yup.number()
    .positive()
    .test(
      "is-decimal",
      "The amount should be a decimal with maximum two digits after comma",
      (val: any) => {
        if (val != undefined) {
          return patternTwoDigisAfterComma.test(val);
        }
        return true;
      }
    )
    .typeError("Number required")
    .required("Required")
    .max(20.5)
    .min(10),
  wrist: Yup.number()
    .positive()
    .test(
      "is-decimal",
      "The amount should be a decimal with maximum two digits after comma",
      (val: any) => {
        if (val != undefined) {
          return patternTwoDigisAfterComma.test(val);
        }
        return true;
      }
    )
    .typeError("Number required")
    .required("Required")
    .max(9.25)
    .min(6.8),
  height: Yup.number()
    .positive()
    .test(
      "is-decimal",
      "The amount should be a decimal with maximum two digits after comma",
      (val: any) => {
        if (val != undefined) {
          return patternTwoDigisAfterComma.test(val);
        }
        return true;
      }
    )
    .typeError("Number required")
    .required("Required")
    .min(50),
  neck: Yup.number()
    .positive()
    .test(
      "is-decimal",
      "The amount should be a decimal with maximum two digits after comma",
      (val: any) => {
        if (val != undefined) {
          return patternTwoDigisAfterComma.test(val);
        }
        return true;
      }
    )
    .typeError("Number required")
    .required("Required")
    .max(9)
    .min(5.5),
});

const StepThreeComponent = (props: any, ref: any) => {
  const [selectedSize, setSelectedSize] = useState("CUSTOM");
  const [selectedSizeProfileId, setSelectedSizeProfileId] = useState<any>(null);
  const [sizeProfiles, setSizeProfiles] = useState<any[]>([]);

  const t = useTranslations("shop");

  const [saveSizeProfile, setSaveSizeProfile] = useState(false);
  const [customerInstructions, setcustomerInstructions] = useState("");
  const [selectedChestOption, setSelectedChestOption] = useState(t("chest_point"));
  const [selectedCupOption, setSelectedCupOption] = useState(t("cup_size"));
  const [shoulder, setShoulder] = useState<number>();
  const [neck, setNeck] = useState<number>();
  const [height, setHeight] = useState<number>();
  const [wrist, setWrist] = useState<number>();
  const [sleevesLength, setSleevesLength] = useState<number>();
  const [armWidth, setArmWidth] = useState<number>();
  const [hips, setHips] = useState<number>();
  const [bust, setBust] = useState<number>();
  const [sizeGuideModalOpen, setSizeGuideModalOpen] = useState(false);

  const handleChestChange = (value: string) => {
    setSelectedChestOption(value);
  };
  const handleCupChange = (value: string) => {
    setSelectedCupOption(value);
  };
  const handleSelectSavedSize = (item: any) => {
    reset();
    setSaveSizeProfile(false);
    setSelectedSizeProfileId(item.id);
    setSelectedSize("SAVED");
    setSelectedChestOption(item.chest_point.toString());
    setSelectedCupOption(item.cup);
    setHeight(item.height);
    setWrist(item.wrist);
    setSleevesLength(item.sleeves_length);
    setBust(item.bust);
    setArmWidth(item.arm_width);
    setHips(item.hips);
    setShoulder(item.shoulder);
    setNeck(item.neck);
  };

  const loadData = () => {
    const sizeProfiles = getUserProfiles();
    setSizeProfiles(sizeProfiles);

    if (props?.sizes) {
      const { sizes } = props;
      // setSelectedSize(sizes.size);
      setSelectedSizeProfileId(sizes.size_profile_id);
      setSelectedChestOption(sizes.chest_point);
      setSelectedCupOption(sizes.cup);
      setHeight(sizes.height);
      setBust(sizes.bust);
      setWrist(sizes.wrist);
      setSleevesLength(sizes.sleeves_length);
      setArmWidth(sizes.arm_width);
      setHips(sizes.hips);
      setShoulder(sizes.shoulder);
      setNeck(sizes.neck);
      setcustomerInstructions(sizes.customerInstructions);
    }
  };

  const {
    register,
    formState: { errors, isValidating },
    trigger,
    getValues,
    setValue,
    reset,
  } = useForm({
    mode: "onTouched",
    //@ts-ignore
    resolver: yupResolver(customSizeSchema),
  });

  const handleNewSize = () => {
    setSelectedSize("CUSTOM");
    setSelectedSizeProfileId(null);
    setWrist(undefined);
    setShoulder(undefined);
    setNeck(undefined);
    setHeight(undefined);
    setWrist(undefined);
    setSleevesLength(undefined);
    setArmWidth(undefined);
    setHips(undefined);
    reset();
  };

  const handleOnNext = async (d: any) => {
    if (shoulder && neck && height && wrist && sleevesLength && armWidth && hips && bust) {
      setValue("shoulder", shoulder);
      setValue("neck", neck);
      setValue("height", height);
      setValue("wrist", wrist);
      setValue("sleeves_length", sleevesLength);
      setValue("arm_width", armWidth);
      setValue("hips", hips);
      setValue("bust", bust);
    } else {
    }
    const vals = await trigger();

    if (!vals) {
      return;
    }

    if (selectedChestOption === t("chest_point") || !selectedChestOption) {
      toast.error("Please select a Chest Point size", {
        position: "bottom-center",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "light",
      });
      return false;
    }
    if (selectedCupOption === t("cup_size") || !selectedCupOption) {
      toast.error("Please select a Cup size", {
        position: "bottom-center",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "light",
      });
      return false;
    }

    // if (!selectedSize) {
    //   toast.error("Please select a size", {
    //     position: "bottom-center",
    //     autoClose: 5000,
    //     hideProgressBar: false,
    //     closeOnClick: true,
    //     pauseOnHover: true,
    //     draggable: true,
    //     progress: undefined,
    //     theme: "light",
    //   });
    //   return false;
    // }

    if (selectedSize === "CUSTOM" && Object?.keys(errors)?.length > 0) {
      return false;
    }

    if (
      errors?.arm_width ||
      errors?.height ||
      errors?.hips ||
      errors?.neck ||
      errors?.shoulder ||
      errors?.sleeves_length ||
      errors?.wrist ||
      errors?.bust
    ) {
      return false;
    }

    return {
      customerInstructions: customerInstructions,
      size: selectedSize,
      size_profile_id: selectedSizeProfileId,
      cup: selectedCupOption,
      chest_point: selectedChestOption,
      saveSizeProfile,
      ...getValues(),
    };
  };

  useImperativeHandle(ref, () => ({
    isValid: handleOnNext,
  }));

  useEffect(() => {
    loadData();
  }, []);

  return (
    <div className="w-full flex flex-col items-start justify-start px-5">
      <div className="w-full">
        <div className="options mt-5 grid grid-cols-2 gap-5">
          <Dropdown aria-label="label">
            <DropdownTrigger aria-label="label">
              <Button
                className={`${
                  selectedSize === "SAVED"
                    ? "border-secondary text-secondary"
                    : "border-white/20 text-white/50"
                } grid-col rounded-[8px] min-w-0 min-h-0 p-0 text-[14px] xs:px-4 xs:py-5 sm:px-6 sm:py-5`}
                variant="bordered"
                aria-label="label"
              >
                {t("saved_size")}
              </Button>
            </DropdownTrigger>
            <DropdownMenu aria-label="Static Actions">
              {sizeProfiles?.map((item, index) => {
                return (
                  <DropdownItem
                    onClick={() => handleSelectSavedSize(item)}
                    key={index}
                    aria-labelledby="label"
                  >
                    {item.title}
                  </DropdownItem>
                );
              })}
            </DropdownMenu>
          </Dropdown>

          <Button onClick={handleNewSize} className="bg-primary-700">
            {t("new_size")}
          </Button>
        </div>
      </div>

      <div className="my-[12px]"></div>

      <form className={"grid available xs:grid-cols-2 sm:grid-cols-3 w-full gap-4"}>
        <DropdownComponent
          describe={t("chest_point")}
          selectedValue={selectedChestOption}
          onSelectionChange={handleChestChange}
          items={[
            { key: "18", label: "18" },
            { key: "20", label: "20" },
            { key: "22", label: "22" },
            { key: "24", label: "24" },
            { key: "26", label: "26" },
          ]}
        />
        <DropdownComponent
          describe={t("cup_size")}
          selectedValue={selectedCupOption}
          onSelectionChange={handleCupChange}
          items={[
            { key: "A", label: "A" },
            { key: "AA", label: "AA" },
            { key: "B", label: "B" },
            { key: "C", label: "C" },
            { key: "D", label: "D" },
            { key: "DD", label: "DD" },
            { key: "DDD", label: "DDD" },
            { key: "G", label: "G" },
            { key: "H", label: "H" },
          ]}
        />
        <ThemeInput
          custom={true}
          value2={shoulder}
          value={shoulder}
          errorMessage={errors.shoulder?.message}
          disabled={selectedSize === "SAVED" ? true : false}
          type="text"
          extras={{ ...register("shoulder") }}
          label={t("shoulder")}
          classNames={{ inputWrapper: ["px-[16px] py-[12px] h-[60px]"] }}
          endItem={<p className="text-white font-[14px]">in</p>}
        />
        <ThemeInput
          custom={true}
          value2={bust}
          value={bust}
          errorMessage={errors.bust?.message}
          disabled={selectedSize === "SAVED" ? true : false}
          type="text"
          extras={{ ...register("bust") }}
          label={t("bust")}
          classNames={{ inputWrapper: ["px-[16px] py-[12px] h-[60px]"] }}
          endItem={<p className="text-white font-[14px]">in</p>}
        />
        <ThemeInput
          custom={true}
          value2={neck}
          disabled={selectedSize === "SAVED" ? true : false}
          type="text"
          errorMessage={errors.neck?.message}
          extras={{ ...register("neck") }}
          label={t("neck")}
          classNames={{ inputWrapper: ["px-[16px] py-[12px] h-[60px]"] }}
          endItem={<p className="text-white font-[14px]">in</p>}
        />
        <ThemeInput
          custom={true}
          value2={height}
          disabled={selectedSize === "SAVED" ? true : false}
          errorMessage={errors.height?.message}
          type="text"
          extras={{ ...register("height") }}
          label={t("height")}
          classNames={{ inputWrapper: ["px-[16px] py-[12px] h-[60px]"] }}
          endItem={<p className="text-white font-[14px]">in</p>}
        />
        <ThemeInput
          custom={true}
          value2={wrist}
          disabled={selectedSize === "SAVED" ? true : false}
          errorMessage={errors.wrist?.message}
          type="text"
          extras={{ ...register("wrist") }}
          label={t("wrist")}
          classNames={{ inputWrapper: ["px-[16px] py-[12px] h-[60px]"] }}
          endItem={<p className="text-white font-[14px]">in</p>}
        />
        <ThemeInput
          custom={true}
          value2={sleevesLength}
          disabled={selectedSize === "SAVED" ? true : false}
          errorMessage={errors.sleeves_length?.message}
          type="text"
          extras={{ ...register("sleeves_length") }}
          label={t("sleeves_length")}
          classNames={{ inputWrapper: ["px-[16px] py-[12px] h-[60px]"] }}
          endItem={<p className="text-white font-[14px]">in</p>}
        />
        <ThemeInput
          custom={true}
          value2={armWidth}
          disabled={selectedSize === "SAVED" ? true : false}
          errorMessage={errors.arm_width?.message}
          type="text"
          extras={{ ...register("arm_width") }}
          label={t("arm_width")}
          classNames={{ inputWrapper: ["px-[16px] py-[12px] h-[60px]"] }}
          endItem={<p className="text-white font-[14px]">in</p>}
        />
        <ThemeInput
          custom={true}
          value2={hips}
          disabled={selectedSize === "SAVED" ? true : false}
          errorMessage={errors.hips?.message}
          type="text"
          extras={{ ...register("hips") }}
          label={t("hips")}
          classNames={{ inputWrapper: ["px-[16px] py-[12px] h-[60px]"] }}
          endItem={<p className="text-white font-[14px]">in</p>}
        />
      </form>
      <textarea
        placeholder={t("additional_tailoring_requests")}
        className="mt-3 p-2 border border-gray-300 bg-primary-800 rounded-md w-full resize-none overflow-y-auto"
        style={{ minHeight: "80px" }}
        value={customerInstructions}
        onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>
          setcustomerInstructions(e.target.value)
        }
      />
      <div className="w-full flex flex-row items-center justify-between mt-[15px] xs:flex-col xs:items-start">
        <Checkbox
          className={`${selectedSize === "CUSTOM" ? "black" : "hidden"}`}
          color="secondary"
          onChange={(e) => setSaveSizeProfile(e.target.checked)}
          isSelected={saveSizeProfile}
        >
          <span className="mx-2">{t("save_size")}</span>
        </Checkbox>

        <span className="flex items-end xs:mt-3">
          <Link
            href="/size-guide"
            onClick={(e) => {
              e.preventDefault();
              setSizeGuideModalOpen(true);
            }}
            prefetch={true}
            className="flex flex-row items-center font-normal text-white text-md tracking-tight leading-tight underline whitespace-nowrap"
          >
            <IconInfoCircle color="#ffb84d" size={25} />
            {t("need_help_taking_sizes")}
          </Link>
        </span>
      </div>
      <div className="my-[10px]"></div>
      <Modal
        isOpen={sizeGuideModalOpen}
        onClose={() => {
          setSizeGuideModalOpen(false);
        }}
        size="full"
      >
        <ModalContent>
          <SizeGuideModal onClose={() => setSizeGuideModalOpen(false)} />
        </ModalContent>
      </Modal>
    </div>
  );
};

const StepThree = forwardRef(StepThreeComponent);

export default StepThree;


=== ./app/[locale]/custom-mekhwar/components/StepTwo/FabricCard.tsx ===
"use client";
import CardContainer from "@/abstract/CardContainer";
import React from "react";
import { motion } from "framer-motion";
import Image from "next/image";
import { Avatar, Button, Card, CardHeader, Modal, ModalContent } from "@nextui-org/react";
import { IconCheck, IconEye } from "@tabler/icons-react";
import { useTranslations } from "next-intl";
import Lightbox from "yet-another-react-lightbox";
import LightboxZoom from "yet-another-react-lightbox/plugins/zoom";
import "yet-another-react-lightbox/styles.css";

export interface FabricCardProps {
  selectedFabricId: number | null;
  id: number;
  name: string;
  price: number;
  patterns: any[];
  onSelectFabric: (id: number) => void;
  onSelectPattern: (id: any) => void;
  imageUrl: string;
  otherImages: any;
  selectedPattern: number | null;
}

export default function FabricCard({
  selectedFabricId,
  id,
  name,
  price,
  patterns,
  onSelectFabric,
  imageUrl,
  otherImages,
  onSelectPattern,
  selectedPattern,
}: FabricCardProps) {
  const [lightboxOpen, setLightboxOpen] = React.useState(false);
  const [patternDialogOpen, setPatternDialogOpen] = React.useState(false);
  const [patternLightboxOpen, setPatternLightboxOpen] = React.useState(false);
  const [openPattern, setOpenPattern] = React.useState<any>(null);

  const t = useTranslations("customization");

  const handleOpenLightbox = () => {
    setLightboxOpen(true);
  };

  const handleCloseLightbox = () => {
    setLightboxOpen(false);
  };

  const handleSelectFabric = () => {
    onSelectPattern(null);
    if (patterns?.length) {
      setPatternDialogOpen(true);
      return;
    }

    onSelectFabric(id);
  };

  const handleSelectPattern = (patternId: number) => {
    setPatternDialogOpen(false);
    onSelectFabric(id);
    onSelectPattern(patternId);
  };

  return (
    <CardContainer scissors={false}>
      <div
        className="w-full h-full flex flex-col justify-start items-start cursor-pointer relative"
        onClick={handleSelectFabric}
      >
        {selectedFabricId === id && (
          <motion.div
            initial={selectedFabricId === id ? { scale: 0 } : { scale: 1 }}
            animate={
              selectedFabricId === id ? { rotate: 360, scale: 1 } : { scale: 0, rotate: -360 }
            }
            transition={{
              type: "spring",
              stiffness: 260,
              damping: 20,
            }}
            className="absolute top-2 right-2 z-[50] bg-secondary rounded-full p-2 shadow-xl"
          >
            <IconCheck size={16} />
          </motion.div>
        )}
        <div className="w-full aspect-square  relative choose-design-item-image">
          <Image
            src={imageUrl}
            alt={name || "design"}
            fill
            objectFit="cover"
            className="rounded-md w-[100px] h-[100px] object-cover"
            aria-label="design-image"
          />

          <Button
            onClick={handleOpenLightbox}
            className="bg-primary text-secondary hidden xs:flex absolute z-50 right-0 bottom-[10px]"
            aria-label="view-image"
          >
            <IconEye size={24} />
          </Button>

          <div className="design-card-image-item-overlay xs:hidden">
            <Button
              onClick={handleOpenLightbox}
              className="bg-primary text-secondary"
              aria-label="view-image"
            >
              <IconEye size={24} />
            </Button>
          </div>
        </div>
        <div className="w-full flex flex-col items-start justify-start mt-2">
          <p className="text-white font-medium text-[12px] line-clamp-1">{name}</p>
          {price ? (
            <p className="text-secondary font-medium mt-2 text-[12px]">{price} AED</p>
          ) : (
            <span className="text-secondary text-[12px]">{t("price_after_confirmation")}</span>
          )}
        </div>
        <div className="w-full flex-row items-start justify-start mt-2 hidden">
          {patterns?.map((pattern) => (
            <div key={pattern.id} className="flex items-center justify-start">
              <Image
                src={pattern.image?.data?.attributes?.formats?.small?.url}
                alt={pattern?.name || "fabric"}
                width={30}
                height={30}
                objectFit="cover"
                className="rounded-md w-[30px] h-[30px] max-h-[30px] object-cover"
              />
              <p className="text-white font-medium text-[12px] line-clamp-2 ml-2">
                {pattern.name}
              </p>
            </div>
          ))}
        </div>
      </div>

      <Lightbox
        open={lightboxOpen}
        close={handleCloseLightbox}
        slides={[
          ...(otherImages?.data?.map((img: any) => ({
            src: img?.attributes?.formats?.medium?.url,
            caption: name,
          })) ?? []),
          { src: imageUrl, caption: name },
        ]}
        plugins={[LightboxZoom]}
        animation={{ zoom: 500 }}
        zoom={{
          maxZoomPixelRatio: 3,
          zoomInMultiplier: 2,
          doubleTapDelay: 300,
          doubleClickDelay: 300,
          doubleClickMaxStops: 2,
          keyboardMoveDistance: 50,
          wheelZoomDistanceFactor: 100,
          pinchZoomDistanceFactor: 100,
          scrollToZoom: false,
        }}
      />

      <Modal isOpen={patternDialogOpen} onClose={() => setPatternDialogOpen(false)} size="sm">
        <ModalContent>
          <CardContainer scissors={false}>
            <div className="w-full h-full flex flex-col items-start justify-start p-3">
              <h1 className="text-xl font-bold text-secondary text-[16px]">Select Pattern</h1>
              <div className="w-full h-full flex flex-col">
                {patterns?.map((pattern) => (
                  <Card
                    key={pattern.id}
                    className="max-w-[340px] bg-transparent shadow-sm px-0"
                  >
                    <CardHeader className="justify-between pr-0 pl-1">
                      <div className="flex gap-5">
                        <Avatar
                          isBordered
                          radius="sm"
                          size="md"
                          src={pattern?.image?.data?.attributes?.url}
                        />
                        <div className="flex flex-col gap-1 items-start justify-center">
                          <h4 className="text-small font-semibold leading-none text-default-600">
                            {pattern?.title}
                          </h4>
                          {/* <h5 className="text-small tracking-tight text-default-400">
                            {pattern?.price} AED
                          </h5> */}
                        </div>
                      </div>
                      <Button
                        color="primary"
                        radius="full"
                        size="sm"
                        onClick={() => {
                          setOpenPattern(pattern);
                          setPatternLightboxOpen(true);
                        }}
                      >
                        <IconEye size={20} />
                      </Button>
                      <Button
                        color="primary"
                        radius="full"
                        size="sm"
                        onClick={() => handleSelectPattern(pattern.id)}
                      >
                        {t("select")}
                      </Button>
                    </CardHeader>
                  </Card>
                ))}
              </div>
            </div>
          </CardContainer>
        </ModalContent>
      </Modal>
      <Lightbox
        open={patternLightboxOpen && openPattern}
        close={() => {
          setPatternLightboxOpen(false);
          setPatternDialogOpen(true);
        }}
        slides={[
          {
            src: openPattern?.image?.data?.attributes.url || "",
            alt: openPattern?.title || "fabric image",
          },
        ]}
        plugins={[LightboxZoom]}
        animation={{ zoom: 500 }}
        zoom={{
          maxZoomPixelRatio: 3,
          zoomInMultiplier: 2,
          doubleTapDelay: 300,
          doubleClickDelay: 300,
          doubleClickMaxStops: 2,
          keyboardMoveDistance: 50,
          wheelZoomDistanceFactor: 100,
          pinchZoomDistanceFactor: 100,
          scrollToZoom: false,
        }}
      />
    </CardContainer>
  );
}


=== ./app/[locale]/custom-mekhwar/components/StepTwo/index.tsx ===
"use client";
import { useLocale, useTranslations } from "next-intl";
import React, { useState, useEffect, useCallback } from "react";
import FabricCard from "./FabricCard";
import { CircularProgress } from "@nextui-org/react";
import { filterFabric } from "@/provider";

export interface StepTwoProps {
  selectedFabricId: number | null;
  onSelectFabric: (id: number) => void;
  selectedFabricPattern: number | null;
  onSelectFabricPattern: (id: number) => void;
}

export default function StepTwo({
  selectedFabricId,
  onSelectFabric,
  selectedFabricPattern,
  onSelectFabricPattern
}: StepTwoProps) {
  const [fabrics, setFabrics] = useState<any[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  const t = useTranslations("customization");
  const locale = useLocale();

  const loadData = useCallback(async () => {
    setIsLoading(true);
    try {
      const { data, error } = await filterFabric({
        populate: "main_image,images,fabric_pattern,fabric_pattern.image",
        "pagination[limit]": 200,
        locale,
      });
  
      if (error) {
        console.error(error);
        return;
      }
  
      setFabrics(data?.data ?? []);
    } catch (error) {
      console.error(error);
    }
    setIsLoading(false);
  }, [setIsLoading, setFabrics, locale]);

  useEffect(() => {
    loadData();
  }, [loadData]);
  return (
    <div className="w-full min-h-[400px] flex flex-col justify-start items-start">
      <h1 className="text-white font-medium text-[18px]">{t("choose_your_fabric")}</h1>

      <div className="w-full h-full mt-2 min-h-[400px] max-h-[400px] overflow-y-auto">
        {isLoading && (
          <div className="w-full h-full flex items-center justify-center">
            <CircularProgress color="secondary" />
          </div>
        )}
        {!isLoading && fabrics.length === 0 && (
          <div className="w-full h-full flex items-center justify-center">
            <p className="text-white">{t("no_designs")}</p>
          </div>
        )}
        {!isLoading && fabrics.length > 0 && (
          <div className="h-full w-full grid grid-cols-[repeat(auto-fill,_minmax(135px,_1fr))] gap-3">
            {fabrics.map((fabric: any) => (
              <FabricCard
                key={fabric.id}
                selectedFabricId={selectedFabricId}
                onSelectFabric={onSelectFabric}
                name={fabric?.attributes?.name}
                imageUrl={fabric.attributes.main_image?.data?.attributes?.formats?.medium?.url}
                price={fabric?.attributes?.price}
                otherImages={fabric?.attributes?.images}
                id={fabric.id}
                patterns={fabric?.attributes?.fabric_pattern}
                onSelectPattern={onSelectFabricPattern}
                selectedPattern={selectedFabricPattern}
              />
            ))}
          </div>
        )}
      </div>
    </div>
  );
}


=== ./app/[locale]/favorites/page.tsx ===
"use client";

import { SolitaireCardSingle } from "@/components";
import ShopPageHeader from "@/components/shop/shop-page-header";
import { filterMekhwar } from "@/provider";
import { getLocalFavorites } from "@/utils";
import { useLocale } from "next-intl";
import { useEffect, useState } from "react";

export default function FavoritesPage() {
  const [items, setItems] = useState<any[]>([]);
  const [isLoading, setIsLoading] = useState(false);

  const locale = useLocale();

  const loadData = async () => {
    setIsLoading(true);
    const favs: any = getLocalFavorites();
    const { data, error }: any = await filterMekhwar({
      filters: {
        //@ts-ignore
        id: {
          $in: favs,
        },
        //@ts-ignore
        locale,
      },
      populate: "main_image,tailor"
    });
    setItems(data?.data);
    setIsLoading(false);
  };

  useEffect(() => {
    loadData();
  }, []);

  return (
    <main className="min-h-screen min-w-screen w-full flex flex-col items-start justify-start overflow-hidden m-0 p-5">
      <ShopPageHeader title="" coloredTitle="Favorites" description="" />

      <div className="grid xs:grid-cols-auto-fill-100 sm:grid-cols-auto-fit-100 gap-4 items-center justify-items-center w-full">
        {items?.map((item) => (
          <article
            key={item.id}
            className="w-full xs:max-w-[180px] sm:max-w-[250px]"
          >
            <SolitaireCardSingle
              autWidth={true}
              title={item?.attributes?.title}
              id={item?.id}
              image={item?.attributes?.main_image?.data?.attributes?.url}
              price={item?.attributes?.price}
              tailorName={item?.attributes?.tailor?.data?.attributes?.name}
              rating={item?.rating}
              customizable={item?.attributes?.customizable}
            />
          </article>
        ))}
      </div>
    </main>
  );
}


=== ./app/[locale]/forgetPassword/page.tsx ===
"use client";

import CardContainer from "@/abstract/CardContainer";
import React, { useState } from "react";
import "react-toastify/dist/ReactToastify.css";
import { ToastContainer, toast } from "react-toastify";
import { ThemeInput } from "@/components/input/theme-input";
import { Button } from "@nextui-org/react";
import BackButton from "../signup/components/BackButton";
import { useForm } from "react-hook-form";
import { yupResolver } from "@hookform/resolvers/yup";
import * as Yup from "yup";
import { extractError, requestResetPassword } from "@/provider";
import { useRouter } from "@/utils";

const formSchema = Yup.object().shape({
  email: Yup.string()
    .required("Please enter your email")
    .email("Email is not valid"),
});

const ForgotPassword = () => {
  const [isLoading, setIsLoading] = useState(false);

  const router = useRouter();

  const {
    register,
    handleSubmit,
    reset,
    formState: { errors },
  } = useForm({
    mode: "onTouched",
    //@ts-ignore
    resolver: yupResolver(formSchema),
  });

  const handleSendEmail = async (body: any) => {
    setIsLoading(true);

    try {
      const { data, error } = await requestResetPassword(body);
      if (data) {
        toast.success("Email sent successfully");
        router.push("/login");
      }

      if (error) {
        toast.error(extractError(error));
      }

      setIsLoading(false);
    } catch (err: any) {
      if (err?.message) {
        toast.error(err?.message);
      }
    }
  };

  return (
    <main className="min-h-[90vh] min-w-screen w-full flex flex-col items-center justify-center overflow-hidden m-0 p-0 xs:py-2">
      <div className="login-container xs:w-full px-5">
        <CardContainer scissors={false}>
          <form className="w-full h-full flex flex-col items-center justify-center sm:w-100 sm:h-50 md:w-[573px] md:h-[600px] xs:w-full xs:py-5  px-4 sm:px-12">
            <h1 className="text-white sm:text-[44px] xs:text-[18.94px] font-black">
              Forgot your password?
            </h1>

            <p className="text-caption xs:mb-2 xs:mt-4 sm:my-5 text-md text-center sm:w-[70%] my-5 sm:text-[15px] xs:text-[14px]">
              Please enter the email address associated with your account and We
              will email you a link to reset your password.
            </p>
            <ThemeInput
              extras={{ ...register("email") }}
              label="Email"
              errorMessage={errors?.email?.message}
              disabled={isLoading}
            />
            <div className="my-3"></div>

            <Button
              onClick={handleSubmit(handleSendEmail)}
              className="bg-secondary-800 mb- w-full h-[48px] text-[19px] font-medium text-theme-900 rounded"
              isLoading={isLoading}
            >
              Send Email
            </Button>
            <BackButton onClick={() => router.back()} />
          </form>
        </CardContainer>
      </div>
      <ToastContainer />
    </main>
  );
};

export default ForgotPassword;


=== ./app/[locale]/login/page.tsx ===
"use client";
import { Link, storeLocalFavorites } from "@/utils";
import CardContainer from "@/abstract/CardContainer";
import Image from "next/image";
import LoginButton from "./components/LoginButton";
import * as Yup from "yup";
import { useState } from "react";
import { SubmitHandler, useForm } from "react-hook-form";
import "react-toastify/dist/ReactToastify.css";
import { ToastContainer, toast } from "react-toastify";
import { ThemeInput } from "@/components/input/theme-input";
import { yupResolver } from "@hookform/resolvers/yup";
import { extractError, getCart, getFavoritedProducts, getMe, loginApi } from "@/provider";
import { useRouter } from "next/navigation";
import { setToken } from "@/utils";
import { useAuth } from "@/provider/AuthContext";
import { saveCartItems, setUserAddresses, setUserProfiles } from "@/utils/cart";
import { Checkbox } from "@nextui-org/react";
import RequestPasswordResetDialog from "./components/RequestPasswordResetDialog";
import { useTranslations } from "next-intl";

type Inputs = {
  emailOrPhone: string;
  password: string;
};

const formSchema = Yup.object().shape({
  emailOrPhone: Yup.string()
    .required("Please enter your email")
    .email("Email is not valid"),
  password: Yup.string()
    .required("Please enter your password")
    .min(6, "Password length should be at least 6 characters"),
});

const LoginPage = () => {
  const [idLoading, setIsLoading] = useState(false);
  const [isPasswordResetDialogOpen, setIsPasswordResetDialogOpen] =
    useState(false);

    const t = useTranslations("auth");
  const router = useRouter();
  const authCtx = useAuth();

  const backendUrl = process.env.NEXT_PUBLIC_API_HOST;
  const googleProvider = "google";

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<Inputs>({
    mode: "onTouched",
    //@ts-ignore
    resolver: yupResolver(formSchema),
  });

  const onSubmit: SubmitHandler<Inputs> = async (formData) => {
    setIsLoading(true);
    try {
      const { data, error }: any = await loginApi({
        identifier: formData.emailOrPhone,
        password: formData.password,
      });

      const extractedError = extractError(error);

      if (extractedError) {
        toast.error(extractedError, {
          position: "top-right",
          autoClose: 5000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
          theme: "light",
        });
      }

      if (data) {
        toast.success("Login Successful", {
          position: "top-right",
          autoClose: 5000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
          theme: "light",
        });
        setToken(data);
        const { data: cartData, error } = await getCart(data.jwt);
        //@ts-ignore
        saveCartItems(cartData);

        //get othter details
        const { data: userData } = await getMe(data.jwt);

        //get favorite products
        const { data: favoritesData }:any = await getFavoritedProducts(data.jwt);

        const fab: any = [];

        favoritesData?.res.forEach((item: any) => {
          fab.push(item.id);
        });
        //@ts-ignore
        setUserAddresses(userData?.addresses);
        //@ts-ignore
        setUserProfiles(userData?.size_profiles);

        storeLocalFavorites(fab);
        authCtx.setIsAuthenticated(true);
        authCtx.setToken(data?.jwt || "");
        authCtx.setUser({
          id: data?.user?.id,
          name: data?.user?.name,
          email: data?.user?.email,
        });
        setIsLoading(false);
        router.push("/");
      }
    } catch (err: any) {
      toast.error(err?.message || err, {
        position: "top-right",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "light",
      });
      console.error(err);
    }
    setIsLoading(false);
  };

  return (
    <main className="min-h-[90vh] min-w-screen w-full flex flex-col items-center justify-center overflow-hidden m-0 p-0 xs:py-2">
      <div className="login-container xs:w-full px-5">
        <CardContainer scissors={false}>
          <form
            onSubmit={handleSubmit(onSubmit)}
            className="w-full h-full flex flex-col items-center justify-center sm:w-100 sm:h-50 md:w-[573px] md:h-[600px] xs:w-full xs:py-5  px-4 sm:px-12"
          >
            {/* LOGIN */}
            <h1 className="text-secondary sm:text-[44px] xs:text-[18.94px] font-black">
              {t("login")}
            </h1>

            <p className="text-caption xs:mb-2 xs:mt-4 sm:my-5 text-md text-center sm:w-[70%] my-5 sm:text-[15px] xs:text-[14px]">
              {t("login_to_your_account_to_continue")}
            </p>

            <div className="w-full flex justify-center xs:my-2 mt-5 mb-7">
              {/* <Image priority={true} unoptimized className="sm:w-[70px] sm:h-[70px] xs:w-[30px] xs:h-[30px] object-contain mx-3" src="/assets/images/facebook-logo.png" width={70} height={70} alt="" /> */}
              {/*@ts-ignore */}
              <Link href={`${backendUrl}connect/${googleProvider}`}>
                <Image
                  priority={true}
                  unoptimized
                  className="sm:w-[70px] sm:h-[70px] xs:w-[30px] xs:h-[30px] object-contain mx-3"
                  src="/assets/images/google-logo.png"
                  width={70}
                  height={70}
                  alt=""
                />
              </Link>
              {/* <Image priority={true} unoptimized className="sm:w-[70px] sm:h-[70px] xs:w-[30px] xs:h-[30px] object-contain mx-3" src="/assets/images/x-logo.png" width={70} height={70} alt="" /> */}
            </div>

            <div className="w-[70%] flex flex-row justify-center items-center">
              <div className="w-[40%] border-t-1 opacity-30 border-black"></div>
              <div className="mx-5 text-center text-white text-opacity-50 text-base font-medium  leading-tight">
                {t("or")}
              </div>
              <div className="w-[40%] border-t-1 opacity-30 border-black"></div>
            </div>

            <div className="my-3"></div>
            <ThemeInput
              errorMessage={errors.emailOrPhone?.message}
              extras={{ ...register("emailOrPhone") }}
              label={t("email")}
            />
            <div className="my-3"></div>
            <ThemeInput
              type="password"
              errorMessage={errors.password?.message}
              extras={{ ...register("password") }}
              label={t("password")}
            />

            <div className="w-full flex justify-between mt-3">
              <label className="flex ">
                {/* <Checkbox color="secondary" /> */}
                {/* <span className="ml-1 mr-20 text-sm ">Remember Me</span> */}
              </label>
              <p className="text-sm text-gray-600">
                <Link href={"/forgetPassword"} prefetch={true}>
                  {" "}
                  <span className=" text-secondary  cursor-pointer">
                    {t("forgot_password")}
                  </span>{" "}
                </Link>
              </p>
            </div>

            <div className="mt-12 w-full flex flex-col items-center">
              <LoginButton label={t("login")} isLoading={idLoading} type="submit" />
              <p className="mt-4 text-sm text-white">
                {t("dont_have_an_account")}{" "}
                <Link href={"/signup"} prefetch={true}>
                  <span className="text-secondary text-base cursor-pointer">
                    {t("get_started")}
                  </span>{" "}
                </Link>
              </p>
              {/* <SignupButton /> */}
            </div>
          </form>
        </CardContainer>
      </div>
      <ToastContainer />
      <RequestPasswordResetDialog
        dialogOpen={isPasswordResetDialogOpen}
        handleClose={() => setIsPasswordResetDialogOpen(false)}
      />
    </main>
  );
};

export default LoginPage;


=== ./app/[locale]/login/components/LoginButton.tsx ===
import { Button } from "@nextui-org/react";

const LoginButton = ({label, onClick, type, isLoading }: { label: string, onClick?: () => void, type?: "button" | "submit" | "reset" | undefined, isLoading?: boolean }) => {
  return (<Button 
    isLoading={isLoading} 
    type={type} 
    onClick={onClick} 
    className="bg-secondary-800 w-full h-[48px] text-[19px] font-medium text-theme-900 rounded"
    >{label}</Button>);
}

export default LoginButton;

=== ./app/[locale]/login/components/RequestPasswordResetDialog.tsx ===
"use client";

import CardContainer from "@/abstract/CardContainer";
import { ThemeInput } from "@/components/input/theme-input";
import {
  Button,
  Modal,
  ModalBody,
  ModalContent,
  ModalFooter,
  ModalHeader,
} from "@nextui-org/react";
import { useState } from "react";
import { useForm } from "react-hook-form";
import * as Yup from "yup";
import { yupResolver } from "@hookform/resolvers/yup";

export interface RequestPasswordResetDialogProps {
  dialogOpen: boolean;
  handleClose: () => void;
}

const formSchema = Yup.object().shape({
  email: Yup.string()
    .required("Please enter your email")
    .email("Email is not valid"),
});

export default function RequestPasswordResetDialog(
  props: RequestPasswordResetDialogProps
) {
  const [isLoading, setIsLoading] = useState(false);

  const {
    register,
    handleSubmit,
    reset,
    formState: { errors },
  } = useForm({
    mode: "onTouched",
    //@ts-ignore
    resolver: yupResolver(formSchema),
  });

  const handleSendEmail = (v: any) => {
  };

  const handleCancel = () => {
    reset({ email: "" });
    props.handleClose();
  };

  return (
    <Modal isOpen={props.dialogOpen} onClose={props.handleClose}>
      <ModalContent>
        <CardContainer scissors={false}>
          <ModalHeader>
            <h1>Request Password Reset</h1>
          </ModalHeader>
          <ModalBody className="flex flex-col ">
            <ThemeInput
              label="Email"
              extras={{ ...register("email") }}
              errorMessage={errors.email?.message}
            />
          </ModalBody>

          <ModalFooter className="w-full flex justify-end items-end">
            <Button
              onClick={handleCancel}
              className="bg-transparent"
              variant="bordered"
              color="secondary"
            >
              Cancel
            </Button>
            <Button
              onClick={handleSubmit(handleSendEmail)}
              variant="solid"
              color="secondary"
            >
              Submit
            </Button>
          </ModalFooter>
        </CardContainer>
      </ModalContent>
    </Modal>
  );
}


=== ./app/[locale]/login/components/SignupButton.tsx ===
import { Link } from "@/utils";
import { Button } from "@nextui-org/react";
import { IconChevronRight } from "@tabler/icons-react";

const SignupButton = () => {
  return <Link href={"/signup"} prefetch={true}><Button className={`bg-transparent sm:w-[148px] xs:w-[120px] sm:h-[48px] xs:h-[49.13px] sm:text-[19px] xs:text-[17px] xs:font-medium text-white rounded rounded-s ml-2`} endContent={<IconChevronRight />}>Sign up</Button></Link>
}

export default SignupButton;

=== ./app/[locale]/login/redirect/google/page.tsx ===
'use client'

import { Button, CircularProgress } from "@nextui-org/react";
import { useEffect } from "react";
import qs from "querystring";
import axios from "axios";
import { getCart, getMe } from "@/provider";
import { useAuth } from "@/provider/AuthContext";
import { setToken, useRouter } from "@/utils";
import { saveCartItems, setUserAddresses, setUserProfiles } from "@/utils/cart";
import { ToastContainer, toast } from "react-toastify";

export default function AuthGoogleCallback(props: any) {

    const authCtx = useAuth();
    const router = useRouter();


    useEffect(() => {
        handleLoadInformation();
    }, [])


    const handleLoadInformation = async () => {
        const query = props.searchParams;
        const apiHost = process.env.NEXT_PUBLIC_API_HOST;
        const baseUrl = apiHost + "auth/google/callback";
        try {
            const res = await axios.get(baseUrl + "?" + qs.stringify(query));
            const data = res.data;
            setToken(data);
            const { data: cartData, error } = await getCart(data.jwt);
            //@ts-ignore
            saveCartItems(cartData);
    
            //get othter details
            const { data: userData } = await getMe(data.jwt);
            //@ts-ignore
            setUserAddresses(userData?.addresses);
            //@ts-ignore
            setUserProfiles(userData?.size_profiles);
            authCtx.setIsAuthenticated(true);
            authCtx.setToken(data?.jwt || "");
            authCtx.setUser({
              id: data?.user?.id,
              name: data?.user?.name,
              email: data?.user?.email
            });
            router.push("/");
        } catch (err) {
            toast.error("Email already used, please use password for login");
            setTimeout(() => {
                router.push("/login");
            }, 2000);
        }
    }

    return (
        <div className="min-w-main w-full h-dvh flex flex-col justify-center items-center">
            <CircularProgress color="secondary"/>
            <h1 className="text-white mt-3">Loading your information...</h1>
            <ToastContainer />
        </div>
    )
}

=== ./app/[locale]/privacy-policy/page.tsx ===
import { getLocale } from "next-intl/server";
import { getPrivacyPolicy } from "@/provider";
import { Metadata } from "next";

export const metadata: Metadata = {
  title: "E-Khayati | Privacy Policy",
  description: "E-Khayati Privacy Policy Page",
};

const getData = async () => {
  const locale = await getLocale();
  const { data } = await getPrivacyPolicy(locale);
  return data;
};

export default async function PrivacyPolicy(props: any) {
  const data = await getData();
  return (
    <main className="min-w-main px-5 py-10 min-h-dvh">
      <article
        dangerouslySetInnerHTML={{
          __html: data?.data?.attributes?.value || "Privacy Policy",
        }}
      />
    </main>
  );
}


=== ./app/[locale]/profile/page.tsx ===
"use client";

import { useEffect, useState } from "react";
import { useAuth } from "@/provider/AuthContext";
import { getToken } from "@/utils";
import { extractError, getUserProfile } from "@/provider";
import { ToastContainer, toast } from "react-toastify";
import {
  Button,
  Chip,
  CircularProgress,
  Table,
  TableBody,
  TableCell,
  TableColumn,
  TableHeader,
  TableRow,
} from "@nextui-org/react";
import {
  IconEdit,
  IconEye,
  IconNeedleThread,
  IconTrash,
} from "@tabler/icons-react";
import CardContainer from "@/abstract/CardContainer";
import moment from "moment";
import UserAddresses from "./components/UserAddresses";
import UserSizeProfiles from "./components/UserSizeProfiles";
import OrderDetailsDialog from "./components/OrderDetials";
import UpdateUserProfile from "./components/UpdateUserProfile";
import { useTranslations } from "next-intl";

const CustomerProfilePage = (props: any) => {
  const [initialLoading, setInitialLoading] = useState(true);
  const [userData, setUserData] = useState<any>({});
  const [orders, setOrders] = useState<any[]>([]);
  const [addresses, setAddresses] = useState<any[]>([]);
  const [sizeProfiles, setSizeProfiles] = useState<any[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [customOrders, setCustomOrders] = useState<any[]>([]);
  const [selectedOrderData, setSelectedOrderData] = useState<any>(null);
  const [orderDataDialogOpen, setOrderDataDialogOpen] = useState(false);
  const [editProfileDialogOpen, setEditProfileDialogOpen] = useState(false);

  const ctx = useAuth();
  const t = useTranslations("profile");

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    const token: any = ctx.token || getToken();
    const { data, error }: any = await getUserProfile(token);
    console.log(data?.customOrders);

    if (error) {
      toast.error(extractError(error));
    }

    setOrders(data.orders);
    setUserData(data.userData?.[0]);
    setAddresses(data.addresses);
    setSizeProfiles(data.sizeProfiles);
    setCustomOrders([...(data?.customOrders || []), ...(data?.orders || [])]);
    setInitialLoading(false);
    setIsLoading(false);
  };

  const handleReload = () => {
    setIsLoading(true);
    loadData();
  };

  const handleOpenProfileEditDialog = () => {
    setEditProfileDialogOpen(true);
  };

  const handleCancelSuccessful = () => {
    setOrderDataDialogOpen(false);
    loadData();
  }

  const getStatusChip = (status: string) => {
    switch (status) {
      case "PENDING":
        return <Chip className="bg-blue-500">{t("pending")}</Chip>;
      case "PROCESSING":
        return <Chip className="bg-secondary text-primary">{t("sewing")}</Chip>;
      case "SEWING":
        return <Chip className="bg-secondary text-primary">{t("sewing")}</Chip>;
      case "APPROVED":
        return <Chip className="bg-success text-white">{t("approved")}</Chip>;
      case "ON THE WAY":
        return <Chip className="bg-secondary text-primary">{t("on_the_way")}</Chip>;
      case "DELIVERED":
        return <Chip className="bg-success text-primary">{t("delivered")}</Chip>;
      case "CANCELLED":
        return <Chip className="bg-danger text-primary">{t("cancelled")}</Chip>;
      case "REJECTED":
        return <Chip className="bg-danger text-primary">{t("rejected")}</Chip>;
      default:
        return <Chip className="bg-secondary text-primary">{t(status.toLowerCase())}</Chip>;
    }
  };

  if (initialLoading) {
    return (
      <main className="min-h-screen min-w-screen w-full flex flex-col items-center justify-start overflow-hidden py-12 px-6 xs:px-3">
        <section className="w-full min-h-[400px] max-w-main flex flex-col items-center justify-center">
          <CircularProgress color="secondary" />
        </section>
      </main>
    );
  }

  return (
    <main className="min-h-screen min-w-screen w-full flex flex-col items-center justify-start overflow-hidden py-12 px-6 xs:px-3">
      <section className="w-full max-w-main flex flex-col items-center justify-center">
        <header className="w-full flex flex-col items-start justify-start">
          <h1
            style={{ textTransform: "capitalize" }}
            className="text-white xs:text-[25px] text-4xl font-black"
          >
            {userData?.name || userData?.username || userData?.email }{t("apostrophe_s")}{" "}
            <span className="text-secondary">{t("profile")}</span>{" "}
            <Button
              isIconOnly
              className="bg-secondary text-[20px] min-w-[30px] min-h-[30px] p-x-0 rounded-xl hover:bg-secondary/80"
              onClick={handleOpenProfileEditDialog}
            >
              <IconEdit size={18} />
            </Button>
          </h1>
          <p className="text-caption">{t("here_you_can_edit")}</p>
        </header>

        <div className="my-5"></div>

        <div className="w-full">
          <CardContainer scissors={false}>
            <Table
              classNames={{
                wrapper: ["bg-transparent w-full"],
                th: ["bg-primary", "text-secondary"],
                thead: ["text-[26px]"],
              }}
            >
              <TableHeader>
                <TableColumn className="text-[14px] text-start">{t("name")}</TableColumn>
                <TableColumn className="text-[14px] text-start">{t("last_update")}</TableColumn>
                <TableColumn className="text-[14px] text-start">{t("status")}</TableColumn>
                <TableColumn className="text-[14px] text-start">{t("actions")}</TableColumn>
              </TableHeader>
              <TableBody>
                {/**@ts-ignore */}
                {customOrders?.map((item: any, i) => {
                  return (
                    <TableRow key={"custom-order-" + i}>
                      <TableCell colSpan={1}>
                        <div className="flex items-center">
                          <IconNeedleThread className="text-secondary mx-1" />
                          {Object(item).hasOwnProperty("delivery_note") ? (
                            <p className="ml-2">{t("order_number")} {item.id}</p>
                          ) : (
                            <p className="ml-2">{t("custom_order_number")} {item.id}</p>
                          )}
                        </div>
                      </TableCell>
                      <TableCell colSpan={1}>
                        {moment(item.updatedAt).format("DD/MM/YYYY hh:mm")}
                      </TableCell>
                      <TableCell colSpan={1}>
                        {getStatusChip(item.status)}
                      </TableCell>
                      <TableCell colSpan={1}>
                        <span>
                          <Button
                            onClick={() => {
                              setSelectedOrderData(item);
                              setOrderDataDialogOpen(true);
                            }}
                            className="bg-transparent min-w-[16px] min-h-[16px]"
                          >
                            <IconEye size={16} />
                          </Button>

                          {/* {["PENDING", "APPROVED"].includes(item?.status) && (
                            <Button className="bg-transparent min-w-[16px] min-h-[16px]">
                              <IconTrash size={16} />
                            </Button>
                          )} */}
                        </span>
                      </TableCell>
                    </TableRow>
                  );
                })}
              </TableBody>
            </Table>
          </CardContainer>
        </div>
      </section>

      <div className="my-8"></div>

      <section className="w-full max-w-main flex flex-col items-center justify-center">
        <UserAddresses
          setIsLoading={setIsLoading}
          addresses={addresses}
          onComplete={handleReload}
        />
      </section>

      <div className="my-8"></div>

      <section className="w-full max-w-main flex flex-col items-center justify-center">
        <UserSizeProfiles
          setIsLoading={setIsLoading}
          sizeProfiles={sizeProfiles}
          onComplete={handleReload}
        />
      </section>

      <ToastContainer />

      {isLoading && (
        <div className="w-screen h-screen bg-black/50 flex items-center justify-center fixed top-0 left-0 z-[9999] overflow-hidden">
          <CircularProgress color="secondary" />
        </div>
      )}

      <OrderDetailsDialog
        onClose={() => setOrderDataDialogOpen(false)}
        onCancel={handleCancelSuccessful}
        isOpen={orderDataDialogOpen}
        orderData={selectedOrderData}
      />

      <UpdateUserProfile
        onClose={() => setEditProfileDialogOpen(false)}
        isOpen={editProfileDialogOpen}
        handleCompleted={handleReload}
        userData={userData}
      />
    </main>
  );
};

export default CustomerProfilePage;


=== ./app/[locale]/profile/components/OrderDetials.tsx ===
"use client";

import { cancelCustomOrder, extractError } from "@/provider";
import { useAuth } from "@/provider/AuthContext";
import { useRouter } from "@/utils";
import {
  Button,
  Image,
  Modal,
  ModalBody,
  ModalContent,
  ModalFooter,
  ModalHeader,
  Table,
  TableBody,
  TableCell,
  TableColumn,
  TableHeader,
  TableRow,
} from "@nextui-org/react";
import { useTranslations } from "next-intl";
import { useEffect, useState } from "react";
import { toast } from "react-toastify";

export interface OrderDetailsDialogProps {
  isOpen: boolean;
  orderData: any;
  onClose: () => void;
  onCancel: () => void;
}

export default function OrderDetailsDialog(props: OrderDetailsDialogProps) {
  const [isLoading, setIsLoading] = useState(false);

  const router = useRouter();
  const t = useTranslations("profile");
  const ctx = useAuth();

  const handleCancelOrder = async () => {
    const body = { id: props?.orderData?.id };
    const token = ctx?.token;
    setIsLoading(true);

    try {
      const { data, error } = await cancelCustomOrder(token, body);

      if (data) {
        toast.success("Order cancelled successfully");
        props.onCancel();
      }

      if (error) {
        toast.error(extractError(error));
      }

      setIsLoading(false);
    } catch (err: any) {
      setIsLoading(false);

      if (err?.message) {
        toast.error(err?.message);
      }
    }
  };

  const handleMakePaymentForCustom = () => {
    router.push({
      pathname: "/checkout/address",
      query: {
        orderType: "custom",
        orderId: props?.orderData?.id,
      },
    });
  };

  useEffect(() => {
    console.log(props);
  }, [])

  return (
    <Modal isOpen={props.isOpen} onClose={props.onClose}>
      <ModalContent>
        <ModalHeader>{t("order_details")}</ModalHeader>
        <ModalBody></ModalBody>
        <ModalFooter>
          {!Object(props.orderData).hasOwnProperty("delivery_note") ? (
            <div className="w-full grid grid-cols-2 gap-4">
              <div className="flex flex-col">
                <h1 className="">{t("design")}:</h1>
                <div className="my-3"></div>
                <Image
                  src={props?.orderData?.design?.url || props?.orderData?.mukhawar?.main_image?.url}
                  width={150}
                  height={150}
                  className="object-cover aspect-square"
                />
              </div>

              <div className="flex flex-col">
                <h1 className="w-full">{t("fabric")}:</h1>
                <div className="my-3"></div>
                <Image
                  src={props?.orderData?.fabric?.main_image?.url}
                  width={150}
                  height={150}
                  className="object-cover aspect-square"
                />
              </div>

              <div className="flex flex-row items-center justify-between px-2 col-span-2">
                <h3>{t("fabric_price")}</h3>
                <h3>AED {props?.orderData?.price}</h3>
              </div>

              <div className="flex flex-row items-center justify-between px-2 col-span-2">
                <h3>{t("design_price")}</h3>
                <h3>AED {props?.orderData?.tailor_fee}</h3>
              </div>

              {props?.orderData?.tax > 0 ? (
                <div className="flex flex-row items-center justify-between px-2 col-span-2">
                  <h3>{t("tax")}</h3>
                  <h3>AED {props?.orderData?.tax}</h3>
                </div>
              ) : (
                <></>
              )}

              <div className="flex flex-row items-center justify-between px-2 col-span-2">
                <h3>{t("delivery_charge")}</h3>
                <h3>AED {props?.orderData?.delivery_charge}</h3>
              </div>

              <div className="flex flex-row items-center justify-between px-2 col-span-2">
                <h3 className="font-bold text-lg">{t("total_amount")}</h3>
                <h3 className="font-bold text-lg">
                  AED{" "}
                  {(props?.orderData?.tailor_fee || 0) +
                    (props?.orderData?.delivery_charge || 0) +
                    (props?.orderData?.tax || 0) +
                    (props?.orderData?.price || 0)}
                </h3>
              </div>

              {props?.orderData?.status === "APPROVED" && (
                <div className="flex flex-row items-center justify-end col-span-2">
                  <Button
                    isLoading={isLoading}
                    onClick={handleCancelOrder}
                    color="danger"
                    className="mx-2 rounded-md"
                  >
                    {t("cancel_order")}
                  </Button>
                  <Button
                    disabled={isLoading}
                    onClick={handleMakePaymentForCustom}
                    className="bg-secondary rounded-md"
                  >
                    {t("make_payment")}
                  </Button>
                </div>
              )}

              {props?.orderData?.status === "ON THE WAY" && props?.orderData?.tracking_link && (
                <div className="flex flex-row items-center justify-end col-span-2">
                  <Button
                    disabled={isLoading}
                    onClick={() => {
                      window.open(props?.orderData?.tracking_link, "_blank");
                    }}
                    className="bg-secondary rounded-md"
                  >
                    {t("track_order")}
                  </Button>
                </div>
              )}
            </div>
          ) : (
            <div className="w-full">
              <Table>
                <TableHeader
                  columns={[
                    { name: t("item") },
                    { name: t("quantity") },
                    { name: t("price") },
                  ]}
                >
                  {(column) => <TableColumn key={column.name}>{column.name}</TableColumn>}
                </TableHeader>
                <TableBody>
                  {props?.orderData?.mekhwar?.map((item: any, i: number) => {
                    return (
                      <TableRow key={"mekhwar-in-table" + i}>
                        <TableCell>
                          <Image
                            width={50}
                            height={50}
                            alt={item?.mekhwar?.title}
                            src={item?.mekhwar?.main_image?.url}
                          />
                        </TableCell>
                        <TableCell>{item.quantity}</TableCell>
                        <TableCell>{item.mekhwar?.price}</TableCell>
                      </TableRow>
                    );
                  })}

                  <TableRow className={`${props?.orderData?.tax ? "" : "hidden"}`}>
                    <TableCell>{t("tax")}</TableCell>
                    <TableCell>{""}</TableCell>
                    <TableCell>AED {props?.orderData?.tax}</TableCell>
                  </TableRow>

                  <TableRow className={`${props?.orderData?.delivery_charge ? "" : "hidden"}`}>
                    <TableCell>{t("delivery_charge")}</TableCell>
                    <TableCell>{""}</TableCell>
                    <TableCell>AED {props?.orderData?.delivery_charge}</TableCell>
                  </TableRow>

                  <TableRow className={`${props?.orderData?.discount ? "" : "hidden"}`}>
                    <TableCell>{t("discount")}</TableCell>
                    <TableCell>{""}</TableCell>
                    <TableCell>AED {props?.orderData?.discount}</TableCell>
                  </TableRow>

                  <TableRow>
                    <TableCell>{t("total")}</TableCell>
                    <TableCell>{""}</TableCell>
                    <TableCell>{props?.orderData?.total}</TableCell>
                  </TableRow>
                </TableBody>
              </Table>
            </div>
          )}
        </ModalFooter>
      </ModalContent>
    </Modal>
  );
}


=== ./app/[locale]/profile/components/OrderList.tsx ===

export default function OrderList() {
    return (
        <div>OrderList</div>
    )
}

=== ./app/[locale]/profile/components/ProfileSettings.tsx ===

export default function ProfileSettings() {
    return (
        <div>ProfileSettings</div>
    )
}

=== ./app/[locale]/profile/components/UpdateUserProfile/index.tsx ===
"use client";
import CardContainer from "@/abstract/CardContainer";
import { ThemeInput } from "@/components/input/theme-input";
import { extractError, updateCustomerDetails } from "@/provider";
import {
  Button,
  Modal,
  ModalBody,
  ModalContent,
  ModalFooter,
  ModalHeader,
} from "@nextui-org/react";
import { IconSettings } from "@tabler/icons-react";
import { useEffect, useState } from "react";
import { toast } from "react-toastify";
import { MobileInput } from "@/components/input/mobile-input";
import phone from "phone";
import * as countryList from "countries-list";
import * as Yup from "yup";
import { yupResolver } from "@hookform/resolvers/yup";
import { useForm } from "react-hook-form";
import { useAuth } from "@/provider/AuthContext";
import { useTranslations } from "next-intl";

export interface UpdateUserProfileProps {
  isOpen: boolean;
  onClose: () => void;
  handleCompleted: (data: any) => void;
  userData: any;
}

export default function UpdateUserProfile(props: UpdateUserProfileProps) {
  const { isOpen, onClose, handleCompleted, userData } = props;

  const [selectedCountry, setSelectedCountry] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  const ctx = useAuth();
  const t = useTranslations("profile");

  const handleLoadData = () => {
    const ph = phone(userData.phone);
    setSelectedCountry(ph?.countryIso2 || "AE");
  };

  useEffect(() => {
    handleLoadData();
  }, []);

  useEffect(() => {
    if (isOpen) {
      const ph = phone(userData?.phone);
      setSelectedCountry(ph?.countryIso2 || "AE");
      reset({
        name: userData?.name,
        email: userData?.email,
        phone: userData?.phone?.replace(ph?.countryCode + "", ""),
        countryCode: ph?.countryIso2!,
        password: "",
        confirmPassword: "",
      });
    } else {
      reset();
    }

    return () => reset();
  }, [isOpen]);

  const updateProfile = async (formData: any) => {
    //@ts-ignore
    const country = countryList.getCountryData(selectedCountry || "AE");
    formData.phone = "+" + country?.phone?.[0] + formData.phone;
    setIsLoading(true);

    const updateData: any = {
      name: formData.name,
      email: formData.email,
      phone: formData.phone,
    }

    if (formData.password) {
      updateData["password"] = formData.password;
    }

    const { data, error } = await updateCustomerDetails(ctx.token, ctx.user.id, updateData);

    setIsLoading(false);

    if (error) {
      toast.error(extractError(error), {
        position: "top-right",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "light",
      });
    } else {
      toast.success("Profile updated successfully", {
        position: "top-right",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "light",
      });
      handleCompleted(data);
      onClose();
    }
  };

  const handleClose = () => {
    onClose();
  };

  const getPhone = (e: any) => {
    if (!e) return "";
    const ph = phone(e);
    return e?.replace(ph.countryCode + "", "");
  };

  const getCountryCode = (e: any) => {
    if (!e) return "";
    const ph = phone(e);
    return ph.countryIso2;
  };

  const schema = Yup.object({
    name: Yup.string().required("Name is required"),
    email: Yup.string().email("Email is invalid").required("Email is required"),
    phone: Yup.string()
      .required("Phone is required")
      .test("phone", "Invalid phone", (value) => {
        return phone(value, {
          country: selectedCountry,
          strictDetection: true,
        })?.isValid;
      }),
    countryCode: Yup.string().required("Country code is required"),
    password: Yup.string().notRequired()
      .min(6, "Password length should be at least 6 characters")
      .max(12, "Password cannot exceed more than 12 characters").nullable().transform((value) => !!value ? value : null),
    confirmPassword: Yup.string().notRequired()
      .min(6, "Password length should be at least 6 characters")
      .max(12, "Password cannot exceed more than 12 characters")
      .oneOf([Yup.ref("password")], "Passwords do not match").nullable().transform((value) => !!value ? value : null),
  });

  const {
    register,
    handleSubmit,
    reset,
    formState: { errors },
    getValues
  } = useForm({
    resolver: yupResolver(schema),
  });

  return (
    <Modal isOpen={isOpen} onClose={handleClose}>
      <ModalContent>
        <CardContainer scissors={false}>
          <ModalHeader className="bg-primary-800 rounded-md p-3">
            <IconSettings className="text-secondary" />
            <h3 className="text-secondary ml-2">{t("account_data")}</h3>
          </ModalHeader>
          <ModalBody className="my-3 py-2 px-0">
            <ThemeInput
              label={t("name")}
              extras={register("name")}
              value={userData?.name}
              errorMessage={errors.name?.message}
            />
            <ThemeInput
              label={t("email")}
              extras={register("email")}
              value={userData?.email}
              errorMessage={errors.email?.message}
            />
            <MobileInput
              label={t("phone")}
              extras={register("phone")}
              value={getPhone(userData?.phone) || ""}
              errorMessage={errors.phone?.message}
              countryCodeErrorMessage={errors.countryCode?.message}
              countryCodeExtras={register("countryCode")}
              onCountryChange={setSelectedCountry}
              countryCodeValue={getCountryCode(userData?.phone) || ""}
              smaller={true}
            />

            {
              userData?.provider === "local" ?
              <>
              <ThemeInput
              label={t("password")}
              type="password"
              extras={register("password")}
              errorMessage={errors.password?.message}
              value={undefined}
            />
            <ThemeInput
              label={t("confirm_password")}
              type="password"
              extras={register("confirmPassword")}
              errorMessage={errors.confirmPassword?.message}
              value={undefined}
            />
            </> : <></>
            }
          </ModalBody>
          <ModalFooter>
            <Button color="danger" onClick={handleClose}>
              {t("cancel")}
            </Button>
            <Button 
                isLoading={isLoading}
                color="secondary" 
                onClick={handleSubmit(updateProfile)}>
              {t("update")}
            </Button>
          </ModalFooter>
        </CardContainer>
      </ModalContent>
    </Modal>
  );
}


=== ./app/[locale]/profile/components/UserAddresses/index.tsx ===
"use client";

import ShopPageHeader from "@/components/shop/shop-page-header";
import { useEffect, useState } from "react";
import AddressLine from "./components/AddressLine";
import CreateAddressDialog from "./components/CreateAddressDialog";
import { Button, CircularProgress } from "@nextui-org/react";
import { IconChevronRight, IconEdit, IconPlus } from "@tabler/icons-react";
import { getToken, useRouter } from "@/utils";
import { deleteCustomerAddress, extractError } from "@/provider";
import { toast } from "react-toastify";
import UpdateAddressDialog from "./components/UpdateAddressDialog";
import { getUserAddresses, storeAddresses } from "@/utils/cart";
import { useTranslations } from "next-intl";

export interface UserAddressesProps {
  addresses: any[];
  onComplete: () => void;
  setIsLoading: (v: boolean) => void;
}

export default function UserAddresses(props: UserAddressesProps) {
  const [addresses, setAddresses] = useState<any[]>([]);
  const [createAddressDialogOpen, setCreateAddressDialogOpen] = useState(false);
  const [editAddressDialogOpen, setEditAddressDialogOpen] = useState(false);
  const [editAddressData, setEditAddressData] = useState<any>(null);
  const [initialLoadComplete, setInitialLoadComplete] = useState(true);

  const t = useTranslations("profile");

  useEffect(() => {
    const add = props.addresses;
    setAddresses(add);
    setInitialLoadComplete(false);
  }, [props.addresses]);

  const handleDelete = async (id: any) => {
    props.setIsLoading(false);
    const { data, error } = await deleteCustomerAddress(getToken(), { id });

    if (data) {
      props.setIsLoading(false);
      //@ts-ignore
      setAddresses(data);
      storeAddresses(data);

      toast.success("Address deleted successfully", {
        position: "top-right",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
      });
    } else {
      props.setIsLoading(false);
      toast.error(extractError(error), {
        position: "top-right",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
      });
    }
  };

  const handleEdit = (id: any) => {
    const address = addresses?.find((item: any) => item.id == id);
    setEditAddressDialogOpen(true);
    setEditAddressData(address);
  };

  return (
    <div className="w-full flex flex-col items-start justify-start overflow-hidden">
      <header className="w-full flex flex-row items-start justify-between">
        <div>
          <h1
            style={{ textTransform: "capitalize" }}
            className="text-white xs:text-[25px] text-3xl font-black"
          >
            {t("my_addresses_l")} <span className="text-secondary">{t("my_addresses_t")}</span>{" "}
          </h1>
          <p className="text-caption text-md xs:text-[15px] mt-2">
            {t("here_you_can_edit_your_delivery_addresses")}
          </p>
        </div>

        <Button onClick={() => setCreateAddressDialogOpen(true)} className="bg-secondary-800 rounded-md text-primary-900">{t("add_new")} <IconPlus size={18} /></Button>
      </header>

      <div className="my-5"></div>

      <div className="w-full grid grid-cols-1 gap-8 align-content-center justify-items-center">
        {addresses?.length > 0 &&
          addresses?.map((item: any, index) => {
            return (
              <AddressLine
                key={"address-num-" + index}
                title={item.name}
                value={item.address}
                mobile={item.mobile}
                type={item.type}
                id={item.id}
                onDelete={handleDelete}
                onEdit={handleEdit}
              />
            );
          })}
        {!addresses?.length && initialLoadComplete == true && (
          <div className="h-[200px] flex items-center justify-center">
            <p className="text-caption ">{t("addresses_not_found")}</p>
          </div>
        )}
      </div>

      <CreateAddressDialog
        isOpen={createAddressDialogOpen}
        handleCompleted={(d) => {
          setCreateAddressDialogOpen(false);
          setAddresses(d);
        }}
        handleClose={() => setCreateAddressDialogOpen(false)}
      />

      <UpdateAddressDialog
        isOpen={editAddressDialogOpen}
        address={editAddressData}
        handleCompleted={(d) => {
          const ad = getUserAddresses();
          setAddresses(ad);
          setEditAddressDialogOpen(false);
          setAddresses(d);
        }}
        handleClose={() => {
          setEditAddressDialogOpen(false);
          setEditAddressData(null);
        }}
      />
    </div>
  );
}


=== ./app/[locale]/profile/components/UserAddresses/components/AddressLine.tsx ===
"use client";
import { Button, Chip, Radio, RadioGroup, chip } from "@nextui-org/react";
import { IconEdit, IconLocation, IconLocationPin, IconMapPin, IconPin, IconTrash } from "@tabler/icons-react";
import { useTranslations } from "next-intl";

export interface AddressLineProps {
  title: string;
  value: string;
  mobile: string;
  type: string;
  onDelete: (v: any) => void;
  onEdit: (v: any) => void;
  selectedValue?: string;
  id: number;
}
export default function AddressLine(props: AddressLineProps) {

  const t = useTranslations("profile");

  return (
    <div
      className="flex flex-row w-full bg-primary-700 p-6 select-none cursor-pointer"
    >
      <div className="p-1 flex items-start justify-center w-[40px] h-[40px] relative">
        <IconMapPin size={25} className="text-secondary absolute left-0 top-[-1px]" />
      </div>
      <div className="address-details flex flex-col items-start justify-start my-0 ml-2 w-full">
        <div className="flex flex-row w-full">
          <p className="text-white flex text-xl font-bold mb-3">
            {props.title}
          </p>
          <Chip style={{textTransform: "capitalize"}} className="bg-secondary-800 rounded-md mx-5 text-primary-900 text-[12px] py-1 px-1 p-1">
            {t(props.type)}
          </Chip>
        </div>
        <p className="text-white mb-3">{props.value}</p>
        <p className="text-caption">{props.mobile}</p>
      </div>
      <div className="flex flex-row min-h-full justify-center items-center">
        <Button
          size="sm"
          className="bg-transparent hover:bg-white/5 color-secondary"
          isIconOnly
          onClick={() => props.onEdit(props.id.toString())}
        >
          <IconEdit size={18} />
        </Button>
        <Button
          size="sm"
          className="bg-transparent hover:bg-white/5 color-danger"
          isIconOnly
          onClick={() => props.onDelete(props.id.toString())}
        >
          <IconTrash className="text-danger" size={18} />
        </Button>
      </div>
    </div>
  );
}


=== ./app/[locale]/profile/components/UserAddresses/components/CreateAddressDialog.tsx ===
"use client";
import CardContainer from "@/abstract/CardContainer";
import { ThemeInput } from "@/components/input/theme-input";
import {
  Button,
  Modal,
  ModalBody,
  ModalContent,
  ModalFooter,
  ModalHeader,
} from "@nextui-org/react";
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";
import * as Yup from "yup";
import { yupResolver } from "@hookform/resolvers/yup";
import ThemeSelect from "@/components/input/theme-select";
import { MobileInput } from "@/components/input/mobile-input";
import phone from "phone";
import * as countryList from "countries-list";
import { createCustomerAddress, extractError } from "@/provider";
import { getToken } from "@/utils";
import { toast } from "react-toastify";
import { storeAddresses } from "@/utils/cart";
import { useTranslations } from "next-intl";

export interface CreateAddressDialogProps {
  handleCompleted: (data: any) => void;
  handleClose: () => void;
  isOpen: boolean;
}

interface AddressI {
  name: string;
  country: string;
  city: string;
  street: string;
  building: string;
  address: string;
  flat: string;
  mobile: string;
  type: string;
  id?: string | number;
}

export default function CreateAddressDialog(props: CreateAddressDialogProps) {
  const [selectedCountry, setSelectedCountry] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  const t = useTranslations("profile");

  const createAddress = async (formData: any) => {
    //@ts-ignore
    const country = countryList.getCountryData(selectedCountry || "AE");
    formData.mobile = "+" + country?.phone?.[0] + formData.mobile;
    setIsLoading(true);
    const body: AddressI = {
      name: formData.name,
      country: formData.country,
      city: formData.city,
      street: formData.street,
      building: formData.building,
      flat: formData.flat,
      mobile: formData.mobile,
      type: formData.type,
      address: formData.address,
    };

    const { data, error } = await createCustomerAddress(getToken(), body);

    setIsLoading(false);

    if (error) {
      toast.error(extractError(error), {
        position: "top-right",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "light",
      });
    } else {
      //@ts-ignore
      storeAddresses(data);
      toast.success("Address created successfully", {
        position: "top-right",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "light",
      });
      props.handleCompleted(data);
    }
  };

  useEffect(() => {}, [props.isOpen]);

  const {
    register,
    handleSubmit,
    formState: { errors },
    getValues,
  } = useForm({
    resolver: yupResolver(
      Yup.object({
        name: Yup.string().required("Name is required"),
        country: Yup.string().required("Country is required"),
        city: Yup.string().required("City is required"),
        street: Yup.string().required("Street is required"),
        building: Yup.string().required("Building is required"),
        flat: Yup.string().required("Flat is required"),
        address: Yup.string().required("Address line is required"),
        mobile: Yup.string()
          .required("Mobile is required")
          .test("mobile", "Invalid mobile", (value) => {
            return phone(value, {
              country: selectedCountry,
              strictDetection: true,
            })?.isValid;
          }),
        type: Yup.string().required("Type is required"),
        countryCode: Yup.string().required("Country code is required"),
      })
    ),
  });

  return (
    <Modal isOpen={props.isOpen} onClose={props.handleClose}>
      <ModalContent>
        <CardContainer scissors={false}>
          <ModalHeader>{t("create_new_address")}</ModalHeader>
          <ModalBody>
            <form>
              <ThemeInput
                label={t("name")}
                extras={register("name")}
                errorMessage={errors.name?.message}
              />
              <div className="my-2"></div>
              <ThemeInput
                label={t("country")}
                extras={register("country")}
                errorMessage={errors.country?.message}
              />
              <div className="my-2"></div>
              <ThemeInput
                label={t("city")}
                extras={register("city")}
                errorMessage={errors.city?.message}
              />
              <div className="my-2"></div>
              <ThemeInput
                label={t("street")}
                extras={register("street")}
                errorMessage={errors.street?.message}
              />
              <div className="my-2"></div>
              <ThemeInput
                label={t("building")}
                extras={register("building")}
                errorMessage={errors.building?.message}
              />
              <div className="my-2"></div>
              <ThemeInput
                label={t("flat")}
                extras={register("flat")}
                errorMessage={errors.flat?.message}
              />
              <div className="my-2"></div>
              <ThemeInput
                label={t("address_line")}
                extras={register("address")}
                errorMessage={errors.flat?.message}
              />
              <div className="my-2"></div>
              <MobileInput
                label={t("mobile")}
                countryCodeLabel={t("country_code")}
                extras={register("mobile")}
                errorMessage={errors.mobile?.message}
                countryCodeErrorMessage={errors.countryCode?.message}
                countryCodeExtras={register("countryCode")}
                onCountryChange={setSelectedCountry}
                smaller={true}
              />
              <div className="my-2"></div>
              <ThemeSelect
                label={t("type")}
                extras={register("type")}
                items={[
                  { label: t("home"), value: "home" },
                  { label: t("office"), value: "office" },
                  { label: t("gym"), value: "gym" },
                  { label: t("work"), value: "work" },
                ]}
                errorMessage={errors.type?.message}
              />
            </form>
          </ModalBody>
          <ModalFooter>
            <Button
              disabled={isLoading}
              radius="sm"
              className="bg-transparent hover:bg-white/10"
              onClick={props.handleClose}
            >
              {t("cancel")}
            </Button>
            <Button
              isLoading={isLoading}
              className="bg-secondary-800 text-primary-900 rounded-md"
              radius="sm"
              onClick={handleSubmit(createAddress)}
            >
              {t("create")}
            </Button>
          </ModalFooter>
        </CardContainer>
      </ModalContent>
    </Modal>
  );
}


=== ./app/[locale]/profile/components/UserAddresses/components/UpdateAddressDialog.tsx ===
"use client";
import CardContainer from "@/abstract/CardContainer";
import { ThemeInput } from "@/components/input/theme-input";
import {
  Button,
  Modal,
  ModalBody,
  ModalContent,
  ModalFooter,
  ModalHeader,
} from "@nextui-org/react";
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";
import * as Yup from "yup";
import { yupResolver } from "@hookform/resolvers/yup";
import ThemeSelect from "@/components/input/theme-select";
import { MobileInput } from "@/components/input/mobile-input";
import phone from "phone";
import * as countryList from "countries-list";
import { extractError, updateCustomerAddress } from "@/provider";
import { getToken } from "@/utils";
import { toast } from "react-toastify";
import { storeAddresses } from "@/utils/cart";
import { useTranslations } from "next-intl";

export interface UpdateAddressDialogProps {
  handleCompleted: (data: any) => void;
  handleClose: () => void;
  isOpen: boolean;
  address: AddressI;
}

interface AddressI {
  name: string;
  country: string;
  city: string;
  street: string;
  building: string;
  address: string;
  flat: string;
  mobile: string;
  type: string;
  id?: string | number;
}

export default function UpdateAddressDialog(props: UpdateAddressDialogProps) {
  const [selectedCountry, setSelectedCountry] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  const t = useTranslations("profile");
  //type name country city street building address flat mobile
  const updateAddress = async (formData: any) => {
    //@ts-ignore
    const country = countryList.getCountryData(selectedCountry || "AE");
    formData.mobile = "+" + country?.phone?.[0] + formData.mobile;
    setIsLoading(true);

    const body: AddressI = {
      name: formData.name,
      country: formData.country,
      city: formData.city,
      street: formData.street,
      building: formData.building,
      flat: formData.flat,
      mobile: formData.mobile,
      type: formData.type,
      address: formData.address,
      id: props.address.id,
    };

    const { data, error } = await updateCustomerAddress(getToken(), body);

    setIsLoading(false);

    if (error) {
      toast.error(extractError(error), {
        position: "top-right",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "light",
      });
    } else {
      toast.success("Address updated successfully", {
        position: "top-right",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "light",
      });
      storeAddresses(data);
      props.handleCompleted(data);
    }
  };

  const schema = Yup.object({
    name: Yup.string().required("Name is required"),
    country: Yup.string().required("Country is required"),
    city: Yup.string().required("City is required"),
    street: Yup.string().required("Street is required"),
    building: Yup.string().required("Building is required"),
    flat: Yup.string().required("Flat is required"),
    address: Yup.string().required("Address line is required"),
    mobile: Yup.string()
      .required("Mobile is required")
      .test("mobile", "Invalid mobile", (value) => {
        return phone(value, {
          country: selectedCountry,
          strictDetection: true,
        })?.isValid;
      }),
    type: Yup.string().required("Type is required"),
    countryCode: Yup.string().required("Country code is required"),
  });

  const {
    register,
    handleSubmit,
    formState: { errors },
    reset,
    getValues,
  } = useForm({
    resolver: yupResolver(schema),
  });

  useEffect(() => {
    if (props.isOpen) {
      const ph = phone(props.address.mobile);
      setSelectedCountry(ph?.countryIso2 || "AE");
      reset({
        name: props.address.name,
        country: props.address.country,
        city: props.address.city,
        street: props.address.street,
        building: props.address.building,
        flat: props.address.flat,
        address: props.address.address,
        mobile: props.address.mobile.replace(ph.countryCode + "", ""),
        type: props.address.type,
        countryCode: ph?.countryIso2!,
      });
    } else {
      reset();
    }

    return () => reset();
  }, [props.isOpen]);

  const getPhone = (e: any) => {
    if (!e) return "";
    const ph = phone(e);
    return e?.replace(ph.countryCode + "", "");
  };

  const getCountryCode = (e: any) => {
    if (!e) return "";
    const ph = phone(e);
    return ph.countryIso2;
  };
  return (
    <Modal isOpen={props.isOpen} onClose={props.handleClose}>
      <ModalContent>
        <CardContainer scissors={false}>
          <ModalHeader>{t("update_address")}</ModalHeader>
          <ModalBody>
            <form>
              <ThemeInput
                label={t("name")}
                extras={register("name")}
                value={props?.address?.name}
                errorMessage={errors.name?.message}
              />
              <div className="my-2"></div>
              <ThemeInput
                label={t("country")}
                extras={register("country")}
                value={props?.address?.country}
                errorMessage={errors.country?.message}
              />
              <div className="my-2"></div>
              <ThemeInput
                label={t("city")}
                extras={register("city")}
                value={props?.address?.city}
                errorMessage={errors.city?.message}
              />
              <div className="my-2"></div>
              <ThemeInput
                label={t('street')}
                extras={register("street")}
                value={props?.address?.street}
                errorMessage={errors.street?.message}
              />
              <div className="my-2"></div>
              <ThemeInput
                label={t("building")}
                extras={register("building")}
                value={props?.address?.building}
                errorMessage={errors.building?.message}
              />
              <div className="my-2"></div>
              <ThemeInput
                label={t("flat")}
                extras={register("flat")}
                value={props?.address?.flat}
                errorMessage={errors.flat?.message}
              />
              <div className="my-2"></div>
              <ThemeInput
                label={t("address_line")}
                extras={register("address")}
                value={props?.address?.address}
                errorMessage={errors.flat?.message}
              />
              <div className="my-2"></div>
              <MobileInput
                label={t("mobile")}
                extras={register("mobile")}
                value={getPhone(props?.address?.mobile) || ""}
                errorMessage={errors.mobile?.message}
                countryCodeErrorMessage={errors.countryCode?.message}
                countryCodeExtras={register("countryCode")}
                onCountryChange={setSelectedCountry}
                countryCodeValue={getCountryCode(props?.address?.mobile) || ""}
                smaller={true}
              />
              <div className="my-2"></div>
              <ThemeSelect
                label={t("type")}
                extras={register("type")}
                items={[
                  { label: t("home"), value: "home" },
                  { label: t("office"), value: "office" },
                  { label: t("gym"), value: "gym" },
                  { label: t("work"), value: "work" },
                ]}
                errorMessage={errors.type?.message}
                value={props?.address?.type}
              />
            </form>
          </ModalBody>
          <ModalFooter>
            <Button
              radius="sm"
              className="bg-transparent hover:bg-white/10"
              onClick={props.handleClose}
              isDisabled={isLoading}
            >
              {t("cancel")}
            </Button>
            <Button
              color="secondary"
              radius="sm"
              onClick={handleSubmit(updateAddress)}
              isLoading={isLoading}
            >
              {t("update")}
            </Button>
          </ModalFooter>
        </CardContainer>
      </ModalContent>
    </Modal>
  );
}


=== ./app/[locale]/profile/components/UserSizeProfiles/index.tsx ===
"use client";

import { useEffect, useState } from "react";
import AddressLine from "./components/SizeProfileLine";
import { Button } from "@nextui-org/react";
import { IconPlus } from "@tabler/icons-react";
import { getToken } from "@/utils";
import { deleteCustomerAddress, deleteSizeProfile, extractError } from "@/provider";
import { toast } from "react-toastify";
import CreateSizeProfileDialog from "./components/CreateSizeProfileDialog";
import UpdateSizeProfileDialog from "./components/UpdateSizeProfileDialog";
import { useTranslations } from "next-intl";

export interface UserSizeProfilesProps {
  sizeProfiles: any[];
  onComplete: () => void;
  setIsLoading: (v: boolean) => void;
}

export default function UserSizeProfiles(props: UserSizeProfilesProps) {
  const [sizeProfiles, setSizeProfiles] = useState<any[]>([]);
  const [createSizeProfileDialogOpen, setCreateSizeProfileDialogOpen] = useState(false);
  const [editSizeProfileOpen, setEditSizeProfileDialogOpen] = useState(false);
  const [editSizeProfile, setEditSizeProfileData] = useState<any>(null);
  const [initialLoadComplete, setInitialLoadComplete] = useState(true);

  const t = useTranslations("profile");

  useEffect(() => {
    const add = props.sizeProfiles;
    setSizeProfiles(add);
    setInitialLoadComplete(false);
  }, [props.sizeProfiles]);

  const handleDelete = async (id: any) => {
    props.setIsLoading(true);
    const { data, error } = await deleteSizeProfile(getToken(), { id });

    if (data) {
      props.setIsLoading(false);

      toast.success("Size profile deleted successfully", {
        position: "top-right",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
      });
      props.onComplete();
    } else {
      props.setIsLoading(false);
      toast.error(extractError(error), {
        position: "top-right",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
      });
    }
  };

  const handleEdit = (id: any) => {
    const address = sizeProfiles?.find((item: any) => item.id == id);
    setEditSizeProfileDialogOpen(true);
    setEditSizeProfileData(address);
  };

  return (
    <div className="w-full flex flex-col items-start justify-start overflow-hidden">
      <header className="w-full flex flex-row items-start justify-between">
        <div>
          <h1
            style={{ textTransform: "capitalize" }}
            className="text-white xs:text-[25px] text-3xl font-black"
          >
            {t("my_size_profiles_l")} <span className="text-secondary">{t("my_size_profiles_t")}</span>{" "}
          </h1>
          <p className="text-caption text-md xs:text-[15px] mt-2">
            {t("here_you_can_edit_your_size_profiles")}
          </p>
        </div>

        <Button onClick={() => setCreateSizeProfileDialogOpen(true)} className="bg-secondary-800 rounded-md text-primary-900">{t("add_new")} <IconPlus size={18} /></Button>
      </header>

      <div className="my-5"></div>

      <div className="w-full grid grid-cols-1 gap-8 align-content-center justify-items-center">
        {sizeProfiles?.length > 0 &&
          sizeProfiles?.map((item: any, index) => {
            return (
              <AddressLine
                key={"size-profile-num-" + index}
                title={item.title}
                shoulder={item.shoulder}
                hips={item.hips}
                height={item.height}
                chest_point={item.chest_point}
                cup={item.cup}
                bust={item.bust}
                wrist={item.wrist}
                neck={item.neck}
                sleeves_length={item.sleeves_length}
                arm_width={item.arm_width}
                id={item.id}
                onDelete={handleDelete}
                onEdit={handleEdit}
              />
            );
          })}
        {!sizeProfiles?.length && initialLoadComplete == true && (
          <div className="h-[200px] flex items-center justify-center">
            <p className="text-caption ">{t("no_size_profile_found")}</p>
          </div>
        )}
      </div>

      <CreateSizeProfileDialog
        isOpen={createSizeProfileDialogOpen}
        handleCompleted={(d) => {
          setCreateSizeProfileDialogOpen(false);
          props.onComplete();
        }}
        handleClose={() => setCreateSizeProfileDialogOpen(false)}
      />

      <UpdateSizeProfileDialog
        isOpen={editSizeProfileOpen}
        sizeProfile={editSizeProfile}
        handleCompleted={() => {
          setEditSizeProfileDialogOpen(false);
          props.onComplete();
        }}
        handleClose={() => {
          setEditSizeProfileDialogOpen(false);
          setEditSizeProfileData(null);
        }}
      />
    </div>
  );
}


=== ./app/[locale]/profile/components/UserSizeProfiles/components/CreateSizeProfileDialog.tsx ===
"use client";
import CardContainer from "@/abstract/CardContainer";
import { ThemeInput } from "@/components/input/theme-input";
import {
  Button,
  Modal,
  ModalBody,
  ModalContent,
  ModalFooter,
  ModalHeader,
} from "@nextui-org/react";
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";
import * as Yup from "yup";
import { yupResolver } from "@hookform/resolvers/yup";
import { createSizeProfile, extractError } from "@/provider";
import { getToken } from "@/utils";
import { toast } from "react-toastify";
import DropdownComponent from "@/app/[locale]/custom-mekhwar/components/Drop";
import { useTranslations } from "next-intl";
import { setUserProfiles } from "@/utils/cart";

export interface CreateSizeProfileDialogProps {
  handleCompleted: (data: any) => void;
  handleClose: () => void;
  isOpen: boolean;
}

export default function CreateSizeProfileDialog(props: CreateSizeProfileDialogProps) {
  const [isLoading, setIsLoading] = useState(false);
  const [selectedChestOption, setSelectedChestOption] = useState("7.7");
  const [selectedCupOption, setSelectedCupOption] = useState("A");
  const t = useTranslations("shop");
  //type name country city street building address flat mobile
  const handleChestChange = (value: string) => {
    setSelectedChestOption(value);
  };
  const handleCupChange = (value: string) => {
    setSelectedCupOption(value);
  };
  const createAddress = async (formData: any) => {
    setIsLoading(true);
    formData.cup = selectedCupOption;
    formData.chest_point = selectedChestOption;
    const { data, error } = await createSizeProfile(getToken(), formData);

    setIsLoading(false);

    if (error) {
      toast.error(extractError(error), {
        position: "top-right",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "light",
      });
    } else {
      toast.success("Size profile created successfully", {
        position: "top-right",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "light",
      });
      setUserProfiles(data);
      props.handleCompleted(data);
    }
  };

  useEffect(() => {}, [props.isOpen]);

  const {
    register,
    handleSubmit,
    formState: { errors },
    getValues,
  } = useForm({
    resolver: yupResolver(
      Yup.object().shape({
        title: Yup.string().required("Required"),
        shoulder: Yup.number()
          .positive()
          .typeError("Number required")
          .required("Required")
          .max(300)
          .min(1),
        bust: Yup.number()
          .positive()
          .typeError("Number required")
          .required("Required")
          .max(300)
          .min(1),
        sleeves_length: Yup.number()
          .positive()
          .typeError("Number required")
          .required("Required")
          .max(300)
          .min(1),
        hips: Yup.number().typeError("Number required").required("Required").max(300).min(1),
        arm_width: Yup.number()
          .typeError("Number required")
          .required("Required")
          .max(300)
          .min(1),
        wrist: Yup.number().typeError("Number required").required("Required").max(300).min(1),
        height: Yup.number().typeError("Number required").required("Required").max(300).min(1),
        neck: Yup.number().typeError("Number required").required("Required").max(300).min(1),
      })
    ),
  });

  return (
    <Modal isOpen={props.isOpen} onClose={props.handleClose}>
      <ModalContent>
        <CardContainer scissors={false}>
          <ModalHeader>{t("create_new_size_profile")}</ModalHeader>
          <ModalBody>
            <div
              className={`grid available xs:grid-cols-2 sm:grid-cols-2 auto-rows-fr w-full gap-4 mt-5`}
            >
              <div className="col-span-2">
                <ThemeInput
                  type="text"
                  extras={{ ...register("title") }}
                  label={t("title")}
                  // placeholder={t("title")}
                  errorMessage={errors?.title?.message}
                />
              </div>
              <DropdownComponent
                fullHeight={true}
                classNames={{ trigger: "h-full" }}
                describe={t("chest_point")}
                selectedValue={selectedChestOption}
                onSelectionChange={handleChestChange}
                items={[
                  { key: "18", label: "18" },
                  { key: "20", label: "20" },
                  { key: "22", label: "22" },
                  { key: "24", label: "24" },
                  { key: "26", label: "26" },
                ]}
              />
              <DropdownComponent
                fullHeight={true}
                classNames={{ trigger: "h-full" }}
                describe={t("cup_size")}
                selectedValue={selectedCupOption}
                onSelectionChange={handleCupChange}
                items={[
                  { key: "A", label: "A" },
                  { key: "AA", label: "AA" },
                  { key: "B", label: "B" },
                  { key: "C", label: "C" },
                  { key: "D", label: "D" },
                  { key: "DD", label: "DD" },
                  { key: "DDD", label: "DDD" },
                  { key: "G", label: "G" },
                  { key: "H", label: "H" },
                ]}
              />
              <ThemeInput
                errorMessage={errors.shoulder?.message}
                extras={{ ...register("shoulder") }}
                label={t("shoulder")}
                classNames={{ inputWrapper: ["px-[16px] py-[12px] h-[60px]"] }}
                endItem={<p className="text-white font-[14px]">{t("in")}</p>}
                type="text"
                maxLength={3}
                allowOnlyNumbers={true}
              />
              <ThemeInput
                errorMessage={errors.bust?.message}
                extras={{ ...register("bust") }}
                label={t("bust")}
                classNames={{ inputWrapper: ["px-[16px] py-[12px] h-[60px]"] }}
                endItem={<p className="text-white font-[14px]">{t("in")}</p>}
                type="text"
                maxLength={3}
                allowOnlyNumbers={true}
              />
              <ThemeInput
                errorMessage={errors.arm_width?.message}
                extras={{ ...register("arm_width") }}
                label={t("arm_width")}
                classNames={{ inputWrapper: ["px-[16px] py-[12px] h-[60px]"] }}
                endItem={<p className="text-white font-[14px]">{t("in")}</p>}
                type="text"
                maxLength={3}
                allowOnlyNumbers={true}
              />
              <ThemeInput
                errorMessage={errors.wrist?.message}
                extras={{ ...register("wrist") }}
                label={t("wrist")}
                classNames={{ inputWrapper: ["px-[16px] py-[12px] h-[60px]"] }}
                endItem={<p className="text-white font-[14px]">{t("in")}</p>}
                type="text"
                maxLength={3}
                allowOnlyNumbers={true}
              />
              <ThemeInput
                errorMessage={errors.height?.message}
                extras={{ ...register("height") }}
                label={t("height")}
                classNames={{ inputWrapper: ["px-[16px] py-[12px] h-[60px]"] }}
                endItem={<p className="text-white font-[14px]">{t("in")}</p>}
                type="text"
                maxLength={3}
                allowOnlyNumbers={true}
              />
              <ThemeInput
                errorMessage={errors.sleeves_length?.message}
                extras={{ ...register("sleeves_length") }}
                label={t("sleeves_length")}
                classNames={{ inputWrapper: ["px-[16px] py-[12px] h-[60px]"] }}
                endItem={<p className="text-white font-[14px]">{t("in")}</p>}
                type="text"
                maxLength={3}
                allowOnlyNumbers={true}
              />
              <ThemeInput
                errorMessage={errors.neck?.message}
                extras={{ ...register("neck") }}
                label={t("neck")}
                classNames={{ inputWrapper: ["px-[16px] py-[12px] h-[60px]"] }}
                endItem={<p className="text-white font-[14px]">{t("in")}</p>}
                type="text"
                maxLength={3}
                allowOnlyNumbers={true}
              />
              <ThemeInput
                errorMessage={errors.hips?.message}
                extras={{ ...register("hips") }}
                label={t("hips")}
                classNames={{ inputWrapper: ["px-[16px] py-[12px] h-[60px]"] }}
                endItem={<p className="text-white font-[14px]">{t("in")}</p>}
                type="text"
                maxLength={3}
                allowOnlyNumbers={true}
              />
            </div>
          </ModalBody>
          <ModalFooter>
            <Button
              disabled={isLoading}
              radius="sm"
              className="bg-transparent hover:bg-white/10"
              onClick={props.handleClose}
            >
              {t("cancel")}
            </Button>
            <Button
              isLoading={isLoading}
              className="bg-secondary-800 text-primary-900 rounded-md"
              radius="sm"
              onClick={handleSubmit(createAddress)}
            >
              {t("create")}
            </Button>
          </ModalFooter>
        </CardContainer>
      </ModalContent>
    </Modal>
  );
}


=== ./app/[locale]/profile/components/UserSizeProfiles/components/SizeProfileLine.tsx ===
"use client";
import { Button } from "@nextui-org/react";
import {
  IconEdit,
  IconScan,
  IconTrash,
} from "@tabler/icons-react";
import { useTranslations } from "next-intl";

export interface SizeProfileLineProps {
  title: string;
  shoulder: string;
  bust: string;
  neck:string;
  hips:string;
  height:string;
  sleeves_length:string;
  wrist: string;
  arm_width: string;
  cup:string;
  chest_point:string;
  onDelete: (v: any) => void;
  onEdit: (v: any) => void;
  selectedValue?: string;
  id: number;
}
export default function SizeProfileLine(props: SizeProfileLineProps) {

  const t = useTranslations("shop");

  return (
    <div className="flex flex-row w-full bg-primary-700 p-6 select-none cursor-pointer">
      <div className="p-1 flex items-start justify-center w-[40px] h-[40px]">
        <IconScan
          size={20}
          className="text-secondary"
        />
      </div>
      <div className="address-details flex flex-col items-start justify-start my-0 ml-2 w-full">
        <div className="flex flex-row w-full">
          <p className="text-white flex text-xl font-bold mb-3">
            {props.title}
          </p>
        </div>
        <p className="text-white mb-3 text-sm">
          <span className="mr-1">{props.arm_width} {t("in")} {t("arm_width")}</span>
          -
          <span className="mx-1">{props.height} {t("in")} {t("height")}</span>
          -
          <span className="mx-1">{props.sleeves_length} {t("in")} {t("sleeves_length")}</span>
          -
          <span className="mx-1">{props.bust} {t("in")} {t("bust")}</span>
          -
          <span className="mx-1">{props.wrist} {t("in")} {t("wrist")}</span> 
          -
          <span className="mx-1">{props.shoulder} {t("in")} {t("shoulder")}</span>
          -
          <span className="mx-1">{props.neck} {t("in")} {t("neck")}</span>
          -
          <span className="mx-1">{props.cup} {t("cup_size")}</span>
          -
          <span className="mx-1">{props.chest_point} {t("in")} {t("chest_point")}</span>
        </p>
      </div>
      <div className="flex flex-row min-h-full justify-center items-center">
        <Button
          size="sm"
          className="bg-transparent hover:bg-white/5 color-secondary"
          isIconOnly
          onClick={() => props.onEdit(props.id.toString())}
        >
          <IconEdit size={18} />
        </Button>
        <Button
          size="sm"
          className="bg-transparent hover:bg-white/5 color-danger"
          isIconOnly
          onClick={() => props.onDelete(props.id.toString())}
        >
          <IconTrash className="text-danger" size={18} />
        </Button>
      </div>
    </div>
  );
}


=== ./app/[locale]/profile/components/UserSizeProfiles/components/UpdateSizeProfileDialog.tsx ===
"use client";
import CardContainer from "@/abstract/CardContainer";
import { ThemeInput } from "@/components/input/theme-input";
import {
  Button,
  Modal,
  ModalBody,
  ModalContent,
  ModalFooter,
  ModalHeader,
} from "@nextui-org/react";
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";
import * as Yup from "yup";
import { yupResolver } from "@hookform/resolvers/yup";
import { extractError, updateCustomerAddress, updateSizeProfile } from "@/provider";
import { getToken } from "@/utils";
import { toast } from "react-toastify";
import { setUserProfiles, storeAddresses } from "@/utils/cart";
import { useTranslations } from "next-intl";
import DropdownComponent from "@/app/[locale]/custom-mekhwar/components/Drop";

export interface UpdateSizeProfileDialogProps {
  handleCompleted: (data: any) => void;
  handleClose: () => void;
  isOpen: boolean;
  sizeProfile: any;
}

export default function UpdateSizeProfileDialog(props: UpdateSizeProfileDialogProps) {
  const [isLoading, setIsLoading] = useState(false);
  const [selectedChestOption, setSelectedChestOption] = useState("7.7");
  const [selectedCupOption, setSelectedCupOption] = useState("A");

  const t = useTranslations("shop");

  const handleChestChange = (value: string) => {
    setSelectedChestOption(value);
  };

  const handleCupChange = (value: string) => {
    setSelectedCupOption(value);
  };

  //type name country city street building address flat mobile
  const updateAddress = async (formData: any) => {
    setIsLoading(true);

    const body: any = {
      ...formData,
      cup: selectedCupOption,
      chest_point: selectedChestOption,
      id: props.sizeProfile.id,
    };

    const { data, error } = await updateSizeProfile(getToken(), body);

    setIsLoading(false);

    if (error) {
      toast.error(extractError(error), {
        position: "top-right",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "light",
      });
    } else {
      toast.success("Address updated successfully", {
        position: "top-right",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "light",
      });
      setUserProfiles(data);
      props.handleCompleted(data);
    }
  };

  const schema = Yup.object({
    title: Yup.string().required("Title is required"),
    shoulder: Yup.number().required("Shoulder is required"),
    wrist: Yup.number().required("Wrist is required"),
    sleeves_length: Yup.number().required("Sleeves length is required"),
    hips: Yup.number().required("Hips is required"),
    arm_width: Yup.number().required("Arm width is required"),
    height: Yup.number().required("Height is required"),
    neck: Yup.number().required("Neck is required"),
    bust: Yup.number().required("Bust is required"),
  });

  const {
    register,
    handleSubmit,
    formState: { errors },
    reset,
    getValues,
  } = useForm({
    resolver: yupResolver(schema),
  });

  useEffect(() => {
    if (props.isOpen) {
      setSelectedCupOption(props.sizeProfile?.cup?.toString());
      setSelectedChestOption(props.sizeProfile?.chest_point?.toString());
      reset({
        title: props.sizeProfile?.title,
        shoulder: props.sizeProfile?.shoulder,
        sleeves_length: props.sizeProfile?.sleeves_length,
        hips: props.sizeProfile?.hips,
        arm_width: props.sizeProfile?.arm_width,
        wrist: props.sizeProfile?.wrist,
        height: props.sizeProfile?.height,
        neck: props.sizeProfile?.neck,
        bust: props?.sizeProfile?.bust,
      });
    } else {
      reset();
    }

    return () => reset();
  }, [props.isOpen]);

  return (
    <Modal isOpen={props.isOpen} onClose={props.handleClose}>
      <ModalContent>
        <CardContainer scissors={false}>
          <ModalHeader>{t("update_size_profile")}</ModalHeader>
          <ModalBody>
            <div
              className={`grid available xs:grid-cols-2 sm:grid-cols-2 auto-rows-fr w-full gap-4 mt-5`}
            >
              <div className="col-span-2">
                <ThemeInput
                  type="text"
                  extras={{ ...register("title") }}
                  label={t("title")}
                  // placeholder={t("title")}
                  errorMessage={errors?.title?.message}
                  value={props?.sizeProfile?.title}
                />
              </div>
              <DropdownComponent
                fullHeight={true}
                classNames={{ trigger: "h-full" }}
                describe="Chest Point"
                selectedValue={selectedChestOption}
                onSelectionChange={handleChestChange}
                items={[
                  { key: "18", label: "18" },
                  { key: "20", label: "20" },
                  { key: "22", label: "22" },
                  { key: "24", label: "24" },
                  { key: "26", label: "26" },
                ]}
              />
              <DropdownComponent
                fullHeight={true}
                classNames={{ trigger: "h-full" }}
                describe={t("cup_size")}
                selectedValue={selectedCupOption}
                onSelectionChange={handleCupChange}
                items={[
                  { key: "A", label: "A" },
                  { key: "AA", label: "AA" },
                  { key: "B", label: "B" },
                  { key: "C", label: "C" },
                  { key: "D", label: "D" },
                  { key: "DD", label: "DD" },
                  { key: "DDD", label: "DDD" },
                  { key: "G", label: "G" },
                  { key: "H", label: "H" },
                ]}
              />
              <ThemeInput
                errorMessage={errors.shoulder?.message}
                extras={{ ...register("shoulder") }}
                label={t("shoulder")}
                classNames={{ inputWrapper: ["px-[16px] py-[12px] h-[60px]"] }}
                endItem={<p className="text-white font-[14px]">{t("in")}</p>}
                type="text"
                maxLength={3}
                allowOnlyNumbers={true}
                value={props.sizeProfile?.shoulder}
              />
              <ThemeInput
                errorMessage={errors.bust?.message}
                extras={{ ...register("bust") }}
                label={t("bust")}
                classNames={{ inputWrapper: ["px-[16px] py-[12px] h-[60px]"] }}
                endItem={<p className="text-white font-[14px]">{t("in")}</p>}
                type="text"
                maxLength={3}
                allowOnlyNumbers={true}
                value={props.sizeProfile?.bust}
              />
              <ThemeInput
                errorMessage={errors.arm_width?.message}
                extras={{ ...register("arm_width") }}
                label={t("arm_width")}
                classNames={{ inputWrapper: ["px-[16px] py-[12px] h-[60px]"] }}
                endItem={<p className="text-white font-[14px]">{t("in")}</p>}
                type="text"
                maxLength={3}
                allowOnlyNumbers={true}
                value={props.sizeProfile?.arm_width}
              />
              <ThemeInput
                errorMessage={errors.wrist?.message}
                extras={{ ...register("wrist") }}
                label={t("wrist")}
                classNames={{ inputWrapper: ["px-[16px] py-[12px] h-[60px]"] }}
                endItem={<p className="text-white font-[14px]">{t("in")}</p>}
                type="text"
                maxLength={3}
                allowOnlyNumbers={true}
                value={props.sizeProfile?.wrist}
              />
              <ThemeInput
                errorMessage={errors.height?.message}
                extras={{ ...register("height") }}
                label={t("height")}
                classNames={{ inputWrapper: ["px-[16px] py-[12px] h-[60px]"] }}
                endItem={<p className="text-white font-[14px]">{t("in")}</p>}
                type="text"
                maxLength={3}
                allowOnlyNumbers={true}
                value={props.sizeProfile?.height}
              />
              <ThemeInput
                errorMessage={errors.sleeves_length?.message}
                extras={{ ...register("sleeves_length") }}
                label={t("sleeves_length")}
                classNames={{ inputWrapper: ["px-[16px] py-[12px] h-[60px]"] }}
                endItem={<p className="text-white font-[14px]">{t("in")}</p>}
                type="text"
                maxLength={3}
                allowOnlyNumbers={true}
                value={props.sizeProfile?.sleeves_length}
              />
              <ThemeInput
                errorMessage={errors.neck?.message}
                extras={{ ...register("neck") }}
                label={t("neck")}
                classNames={{ inputWrapper: ["px-[16px] py-[12px] h-[60px]"] }}
                endItem={<p className="text-white font-[14px]">{t("in")}</p>}
                type="text"
                maxLength={3}
                allowOnlyNumbers={true}
                value={props.sizeProfile?.neck}
              />
              <ThemeInput
                errorMessage={errors.hips?.message}
                extras={{ ...register("hips") }}
                label={t("hips")}
                classNames={{ inputWrapper: ["px-[16px] py-[12px] h-[60px]"] }}
                endItem={<p className="text-white font-[14px]">{t("in")}</p>}
                type="text"
                maxLength={3}
                allowOnlyNumbers={true}
                value={props.sizeProfile?.hips}
              />
            </div>
          </ModalBody>
          <ModalFooter>
            <Button
              radius="sm"
              className="bg-transparent hover:bg-white/10"
              onClick={props.handleClose}
              isDisabled={isLoading}
            >
              {t("cancel")}
            </Button>
            <Button
              color="secondary"
              radius="sm"
              onClick={handleSubmit(updateAddress)}
              isLoading={isLoading}
            >
              {t("update")}
            </Button>
          </ModalFooter>
        </CardContainer>
      </ModalContent>
    </Modal>
  );
}


=== ./app/[locale]/purchase-policy/page.tsx ===
import { getPurchasePolicy } from "@/provider";
import { getLocale } from "next-intl/server";

const getData = async () => {
    const locale = await getLocale();
    const { data } = await getPurchasePolicy(locale);
    return data;
}

export default async function PurchasePolicy(props: any) {
    const data = await getData();

    return (
        <main className="min-w-main px-5 py-10 min-h-dvh">
            <article
                dangerouslySetInnerHTML={{
                    __html: data?.data?.attributes?.value || "Purchase Policy",
                }}
            />
        </main>
    );
}

=== ./app/[locale]/reset-password/page.tsx ===
"use client";

import CardContainer from "@/abstract/CardContainer";
import React, { useState } from "react";
import "react-toastify/dist/ReactToastify.css";
import { ToastContainer, toast } from "react-toastify";
import { ThemeInput } from "@/components/input/theme-input";
import { Button } from "@nextui-org/react";
import { useForm } from "react-hook-form";
import { yupResolver } from "@hookform/resolvers/yup";
import * as Yup from "yup";
import { extractError, resetPassword } from "@/provider";
import { useRouter } from "@/utils";

const ResetPassword = (props: any) => {
  const [isLoading, setIsLoading] = useState(false);

  const router = useRouter();

  const formSchema = Yup.object().shape({
    password: Yup.string().required("please enter your password"),
    //@ts-ignore
    passwordConfirmation: Yup.string().test(
      "passwords-match",
      "Passwords must match",
      function (value) {
        if (value === "") return false;
        return this.parent.password === value;
      }
    ),
  });

  const {
    register,
    handleSubmit,
    reset,
    formState: { errors },
  } = useForm({
    mode: "onTouched",
    //@ts-ignore
    resolver: yupResolver(formSchema),
  });

  const handleSendEmail = async (body: any) => {
    setIsLoading(true);

    try {
      const { data, error } = await resetPassword({
        ...body,
        code: props?.searchParams?.code,
      });
      if (data) {
        toast.success("Password reset successful");
        router.push("/login");
      }

      if (error) {
        toast.error(extractError(error));
      }

      setIsLoading(false);
    } catch (err: any) {
      if (err?.message) {
        toast.error(err?.message);
      }
      setIsLoading(false);
    }
  };

  return (
    <main className="min-h-[90vh] min-w-screen w-full flex flex-col items-center justify-center overflow-hidden m-0 p-0 xs:py-2">
      <div className="login-container xs:w-full px-5">
        <CardContainer scissors={false}>
          <form className="w-full h-full flex flex-col items-center justify-center sm:w-100 sm:h-50 md:w-[573px] md:h-[600px] xs:w-full xs:py-5  px-4 sm:px-12">
            <h1 className="text-white sm:text-[44px] xs:text-[18.94px] font-black">
              Reset Password
            </h1>

            <p className="text-caption xs:mb-2 xs:mt-4 sm:my-5 text-md text-center sm:w-[70%] my-5 sm:text-[15px] xs:text-[14px]">
              Enter your new password
              <br />
              and confirm it
              <br />
              to reset your password
            </p>
            <ThemeInput
              extras={{ ...register("password") }}
              label="Password"
              errorMessage={errors?.password?.message}
              disabled={isLoading}
            />
            <div className="my-3"></div>
            <ThemeInput
              extras={{ ...register("passwordConfirmation") }}
              label="Confirm password"
              errorMessage={errors?.passwordConfirmation?.message}
              disabled={isLoading}
            />
            <div className="my-3"></div>

            <Button
              onClick={handleSubmit(handleSendEmail)}
              className="bg-secondary-800 mb- w-full h-[48px] text-[19px] font-medium text-theme-900 rounded"
              isLoading={isLoading}
            >
              Change password
            </Button>
          </form>
        </CardContainer>
      </div>
      <ToastContainer />
    </main>
  );
};

export default ResetPassword;


=== ./app/[locale]/shop/page.tsx ===
import { Suspense } from "react";
import Loading from "../loading";
import ShopFilter from "./components/shop-filter";
import { MukhwarShopListing } from "./components/MukhwarShopListing";
import { getProductCategoryListing } from "@/provider";
import { getLocale, getTranslations } from "next-intl/server";
import { Metadata } from "next";

export const metadata: Metadata = {
  title: "E-Khayati | Shop",
  description: "E-Khayati Shop Page",
};

async function getData(props: any) {
  const locale = await getLocale();

  const publicToken = "";

  const { data: productCategories, error: productCategoriesError } =
    await getProductCategoryListing(publicToken, {
      "pagination[pageSize]": 20,
      locale: locale ?? "en",
    });

  return { productCategories };
}

const ShopPage = async (props: any) => {
  const { productCategories } = await getData(props);
  const t = await getTranslations("shop");

  return (
    <main className="min-h-screen min-w-screen w-full flex xs:flex-col sm:flex-row items-start  justify-start overflow-hidden m-0 p-0">
      <ShopFilter
        categories={productCategories?.data?.map((item: any) => {
          return {
            id: item.id,
            name: item?.attributes?.Name || "",
          };
        })}
      />
      <Suspense fallback={<Loading />}>
        <MukhwarShopListing {...props} />
      </Suspense>
    </main>
  );
};
export default ShopPage;


=== ./app/[locale]/shop/components/item-list.tsx ===
import SolitaireCardSingle, { SolitaireCardSingleProps } from "@/components/cards/SolitaireCardSingle";
import ShopPageHeader from "@/components/shop/shop-page-header";
import ShopPagination from "@/components/shop/pagination";

export interface ShopItemListProps {
  items?: SolitaireCardSingleProps[];
  pagination?: any;
  title?: string;
  coloredTitle?: string;
  description?: string;
  query?: any;
  design?: boolean;
}

const ShopItemList = ({ items, pagination, title, coloredTitle, description, query, design }: ShopItemListProps) => {
  return (
    <section className="min-h-screen sm:w-[70%] xl:w-[80%] xs:w-full py-12 px-6 xs:px-3">
      <ShopPageHeader
        title={title || "Browse"}
        coloredTitle={coloredTitle || "Mekhwar"}
        description={description || "Browse our wide collection of Mekhwar design, made only for your style and luxury"}
      />

      <div
        // style={{
        //   display: "grid",
        //   gridTemplateColumns: "repeat(auto-fill, minmax(250px, 1fr))",
        //   gap: "1rem",
        //   justifyItems: "center",
        // }}
        className="grid xs:grid-cols-auto-fill-100 sm:grid-cols-auto-fit-100 gap-4 items-center justify-items-center"
      >
        {items?.map((item) => (
          <article
            key={item.id}
            // style={{
            //   width: "100%",
            //   maxWidth: "180px",
            // }}
            className="w-full xs:max-w-[250px] sm:max-w-[250px]"
          >
            <SolitaireCardSingle
              autWidth={true}
              title={item?.title}
              id={item?.id}
              image={item?.image}
              price={item?.price}
              tailorName={item?.tailorName}
              rating={item?.rating}
              query={query}
              design={design}
              customizable={item?.customizable}
            />
          </article>
        ))}
      </div>

      <div className="mt-12 flex justify-center md:pr-[200px]">
        {pagination?.pageCount > 0 ? <ShopPagination data={pagination} /> : null}
      </div>
    </section>
  );
}

export default ShopItemList;


=== ./app/[locale]/shop/components/MukhwarShopListing.tsx ===
import ShopItemList from "./item-list";
import { getLocale, getTranslations } from "next-intl/server";
import { getProductListing } from "@/provider";
import qs from "qs";
import { Metadata } from "next";
import { Link } from "@/utils";

async function getData(props: any) {
    const locale = await getLocale();
    const searchParams = props.searchParams || {};

    const publicToken = "";
    const parsedQs: any = qs.parse(searchParams);
    const parsedFilter: any = parsedQs.filters;
    const filtersObj: any = {};
    if (parsedFilter?.["$and"])
      for (const key in parsedFilter?.["$and"]) {
        filtersObj[key] = parsedFilter["$and"][key];
      }
    if (parsedFilter?.["$and"]) parsedFilter["$and"] = filtersObj;


    const { data: productData, error: productError } = await getProductListing(
      publicToken,
      {
        "pagination[pageSize]": 20,
        "pagination[page]": parsedQs?.pagination?.page || 1,
        locale: locale ?? "en",
        populate: "main_image,tailor,category",
        filters: parsedFilter || {},
      }
    );

    return { productData };
  }

export async function MukhwarShopListing(props: any) {
 
  const { productData } = await getData(props);
  const t = await getTranslations("shop");

  //@ts-ignore
  return productData?.data?.length > 0 ? (
    <ShopItemList
      title={t("shop_page_title_l")}
      coloredTitle={t("shop_page_title_t")}
      description={t("shop_page_title_slogan")}
      items={productData?.data?.map((item) => {
        return {
          id: item?.id,
          title: item?.attributes?.title,
          image: item?.attributes?.main_image?.data?.attributes?.url,
          price: item?.attributes?.price,
          tailorName: item?.attributes?.tailor?.data?.attributes?.name,
          rating: item?.attributes?.rating,
          customizable: item?.attributes?.customizable,
        };
      })}
      pagination={productData?.meta?.pagination}
    />
  ) : (
    <div className="w-full h-[90vh] flex flex-col justify-center items-center">
      <h1 className="text-xl">{t("no_items_found")}</h1>
      <Link
        className="text-secondary font-medium text-large"
        href={"/shop"}
        prefetch={true}
      >
        {t("clear_filters")}
      </Link>
    </div>
  );
}


=== ./app/[locale]/shop/components/shop-filter.tsx ===
"use client";
import { ThemeInput } from "@/components/input/theme-input";
import {
  Accordion,
  AccordionItem,
  Button,
  Checkbox,
  CheckboxGroup,
  Slider,
} from "@nextui-org/react";
import { useEffect, useState } from "react";
import { motion, useAnimationControls } from "framer-motion";
import { usePathname, getPathname } from "@/utils/navigation";
import qs from "qs";
import { useSearchParams, useRouter, useParams } from "next/navigation";
import { useLocale, useTranslations } from "next-intl";
import { IconChevronDown, IconChevronLeft, IconFilter } from "@tabler/icons-react";

export interface ShopFilterProps {
  categories?: {
    id: number;
    name: string;
  }[];
}

const ShopFilter = ({ categories }: ShopFilterProps) => {
  const [filterCount, setFilterCount] = useState(0);
  const [priceRange, setPriceRange] = useState<any>([0, 10000]);
  const [collapsed, setCollapsed] = useState(true);
  const [selectedCategories, setSelectedCategories] = useState<string[]>([]);
  const [selectedTypes, setSelectedTypes] = useState<string[]>([]);

  const params = useSearchParams();
  const p = useParams();
  const controls = useAnimationControls();
  const router = useRouter();
  const pathName = usePathname();
  const locale = useLocale();

  const t = useTranslations("shop");

  const handleFilterCountChange = () => {
    let count = 0;
    if (selectedCategories.length > 0) count = selectedCategories.length;
    if (priceRange[0] !== 0) count = count + 1;
    if (priceRange[1] !== 10000) count = count + 1;
    setFilterCount(count);
  };

  const handleCollapse = () => {
    if (collapsed) controls.start({ height: "auto" });
    if (!collapsed) controls.start({ height: 0 });
    setCollapsed(!collapsed);
  };

  useEffect(handleFilterCountChange, [priceRange, selectedCategories]);

  const handleBack = () => {
    router.back();
  };

  const handleInitSelectedCats = () => {
    if (window !== undefined) {
      const loc = window?.location.search;
      const st = loc.slice(1, loc.length);
      const parsed: any = qs.parse(st);
      parsed?.filters?.$and.forEach((f: any) => {
        if (f?.category) {
          const a = [];
          for (const key in f.category?.id?.["$in"]) {
            a.push(f?.category?.id?.["$in"][key]);
          }
          setSelectedCategories(a);
        }

        if (f?.price) {
          setPriceRange(f?.price?.["$between"]);
          handleRangeChange(f?.price?.["$between"]);
        }
      });
    }
  };

  useEffect(() => {
    handleInitSelectedCats();
    //@ts-ignore
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [pathName?.length]);

  const handleCategoryChange = (e: any) => {
    const newArr = e.map((element: string) => +element);
    const queryString = params.toString();
    const parsedQuery: any = qs.parse(queryString);
    setSelectedCategories(e);

    //if parsed query does not include filter then add it
    if (!parsedQuery["filters"]) parsedQuery.filters = {};
    //if parsed query filter does ont have $and param then add it
    if (!parsedQuery?.["filters"]?.["$and"]) parsedQuery.filters["$and"] = [];
    //remove categories from filter.and array
    parsedQuery["filters"]["$and"] = parsedQuery?.["filters"]?.["$and"]?.filter(
      (item: any) => !item["category"]
    );
    //if parsed query filter does not include category then add it
    parsedQuery["filters"]["$and"].push({ category: { id: { $in: newArr } } });

    //@ts-ignore
    router.replace(
      `/${locale}/shop?${qs.stringify(parsedQuery, {
        encodeValuesOnly: true,
      })}`,
      {
        scroll: false,
      }
    );
  };

  const handleTypeChange = (e: any) => {
    const newArr = e.map((element: string) => element);
    const queryString = params.toString();
    const parsedQuery: any = qs.parse(queryString);
    setSelectedTypes(e);

    //if parsed query does not include filter then add it
    if (!parsedQuery["filters"]) parsedQuery.filters = {};
    //if parsed query filter does ont have $and param then add it
    if (!parsedQuery?.["filters"]?.["$and"]) parsedQuery.filters["$and"] = [];
    //remove categories from filter.and array
    parsedQuery["filters"]["$and"] = parsedQuery?.["filters"]?.["$and"]?.filter(
      (item: any) => !item["customizable"]
    );
    //if parsed query filter does not include category then add it
    parsedQuery["filters"]["$and"].push({ customizable: { $in: newArr } });

    //@ts-ignore
    router.replace(
      `/${locale}/shop?${qs.stringify(parsedQuery, {
        encodeValuesOnly: true,
      })}`,
      {
        scroll: false,
      }
    );
  };

  const handlePriceInputChange = (initial: boolean, e: number) => {
    const newArr = [...priceRange];
    if (initial) newArr[0] = e;
    if (!initial) newArr[1] = e;
    setPriceRange(newArr);
    handleRangeChange(newArr);
  };

  const handleRangeChange = (e: any) => {
    const newArr = e;
    const queryString = params.toString();
    const parsedQuery: any = qs.parse(queryString);
    setPriceRange(e);

    //if parsed query does not include filter then add it
    if (!parsedQuery["filters"]) parsedQuery.filters = {};
    //if parsed query filter does ont have $and param then add it
    if (!parsedQuery?.["filters"]?.["$and"]) parsedQuery.filters["$and"] = [];
    //remove categories from filter.and array
    parsedQuery["filters"]["$and"] = parsedQuery?.["filters"]?.["$and"]?.filter(
      (item: any) => !item["price"]
    );
    //if parsed query filter does not include category then add it
    parsedQuery["filters"]["$and"].push({ price: { $between: newArr } });

    //@ts-ignore
    router.replace(
      `/${locale}/shop?${qs.stringify(parsedQuery, {
        encodeValuesOnly: true,
      })}`,
      {
        scroll: false,
      }
    );
  };

  return (
    <aside className="xs:bg-primary-700 sm:bg-primary xs:overflow-hidden xs:w-full sm:min-h-screen sm:w-[30%] xl:w-[20%] sm:p-5">
      <div className="controls sm:hidden xs:flex xs:flex-row xs:justify-between xs:p-3 w-full">
        <Button
          isIconOnly
          onClick={handleBack}
          className="bg-transparent text-[20px] border-white border-2"
        >
          <IconChevronLeft />
        </Button>

        <Button className="bg-primary pl-8 pr-4 rounded-md" onClick={handleCollapse}>
          Filters({filterCount}){" "}
          {collapsed ? <IconChevronDown className="ml-4" /> : <IconFilter className="ml-4" />}
        </Button>
      </div>
      <motion.div
        initial={{ height: 0 }}
        animate={controls}
        className="xs:border-b-2 xs:border-solid xs:border-secondary-800 w-full"
      >
        <Accordion selectionMode="multiple" defaultExpandedKeys={["price", "collection", "type"]}>
          <AccordionItem key="price" aria-label="Price" title={t("price")}>
            <div className="flex flex-col w-full">
              <div className="inputs flex flex-row items-end justify-between w-full">
                <div className="flex flex-col items-start justify-end w-[30%]">
                  <div>
                    <span className="text-neutral-400 text-sm font-normal  leading-normal">
                      {t("from")}
                    </span>
                  </div>
                  <div className="my-1"></div>
                  <ThemeInput
                    type="number"
                    value2={priceRange?.[0] || 0}
                    classNames={{
                      inputWrapper: ["py-0", "h-[35px]", "radius-4"],
                    }}
                    onChange={(e) => handlePriceInputChange(true, e.target.value)}
                    custom={true}
                  />
                </div>

                <div className="w-[15px] h-[19px] mx-2 border-t-1 opacity-30 border-white"></div>

                <div className="flex flex-col items-end justify-end w-[30%]">
                  <div>
                    <span className="text-neutral-400 text-sm font-normal  leading-normal">
                      {t("to")}
                    </span>
                  </div>
                  <div className="my-1"></div>
                  <ThemeInput
                    type="number"
                    value2={priceRange?.[1] || 10000}
                    classNames={{
                      inputWrapper: ["py-0", "h-[35px]", "radius-4"],
                    }}
                    onChange={(e) => handlePriceInputChange(true, e.target.value)}
                    custom={true}
                  />
                </div>
              </div>

              <div className="my-2"></div>

              <div className="w-full box-border px-3">
                <Slider
                  maxValue={10000}
                  aria-label="Price filter slider"
                  defaultValue={priceRange}
                  value={priceRange}
                  onChange={handleRangeChange}
                  formatOptions={{ style: "currency", currency: "AED" }}
                  className=" color-secondary"
                  classNames={{
                    track: ["bg-primary-700", "h-[5px]"],
                    filler: ["bg-secondary"],
                    step: ["w-[12px]", "h-[12px]"],
                    thumb: [
                      "w-[12px]",
                      "h-[12px]",
                      "after:rounded-full",
                      "after:w-[12px]",
                      "after:h-[12px]",
                      "after:bg-secondary",
                    ],
                    startContent: ["h-[12px]", "w-[12px]"],
                  }}
                />
              </div>
            </div>
          </AccordionItem>

          <AccordionItem key="collection" aria-label="Collection" title={t("collection")}>
            <div className="max-h-[350px]">
              <CheckboxGroup
                defaultValue={[]}
                // className="overflow-auto"
                onChange={handleCategoryChange}
                value={selectedCategories}
              >
                {categories &&
                  categories.map((category, index) => {
                    return (
                      <Checkbox
                        key={category?.id}
                        color="secondary"
                        value={category?.id?.toString() || index.toString()}
                        aria-label={category?.name}
                      >
                        {category.name}
                      </Checkbox>
                    );
                  })}
              </CheckboxGroup>
            </div>
          </AccordionItem>

          <AccordionItem key="type" aria-label="type" title={t("type")}>
            <div className="max-h-[350px]">
              <CheckboxGroup
                defaultValue={[]}
                // className="overflow-auto"
                onChange={handleTypeChange}
                value={selectedTypes}
              >
                <Checkbox
                  key={"customizable"}
                  color="secondary"
                  value={"true"}
                  aria-label={"customizable"}
                >
                  {t("customizable")}
                </Checkbox>
                <Checkbox
                  key={"ready_to_ware"}
                  color="secondary"
                  value={"false"}
                  aria-label={"ready_to_ware"}
                >
                  {t("ready_to_ware")}
                </Checkbox>
              </CheckboxGroup>
            </div>
          </AccordionItem>
        </Accordion>
      </motion.div>
    </aside>
  );
};

export default ShopFilter;


=== ./app/[locale]/shop/design/page.tsx ===
import { getLocale } from "next-intl/server";
import { getDesignListing, getProductCategoryListing, getProductListing } from "@/provider";
import qs from "qs";
import ShopItemList from "../components/item-list";

async function getData(props: any) {
  const locale = await getLocale();
  const searchParams = props.searchParams || {};

  const publicToken = "";
  const parsedQs: any = qs.parse(searchParams);
  const parsedFilter: any = parsedQs.filters;
  const filtersObj: any = {};
  if (parsedFilter?.["$and"]) for (const key in parsedFilter?.["$and"]) {
    filtersObj[key] = parsedFilter["$and"][key];
  }
  if (parsedFilter?.["$and"]) parsedFilter["$and"] = filtersObj;

  const { data: productData, error: productError } = await getDesignListing(publicToken, {
    "pagination[pageSize]": 20,
    "pagination[page]": parsedQs?.pagination?.page || 1,
    locale: locale ?? "en",
    populate: "image,tailor",
    filters: parsedFilter || {},
  });
  
  return { productData };
}

const ShopPage = async (props: any) => {

  const { productData } = await getData(props);

  return (
    <main className="min-h-screen min-w-screen w-full flex xs:flex-col sm:flex-row items-start justify-start items-start justify-center overflow-hidden m-0 p-0">
      <ShopItemList
        items={productData?.data?.map((item) => {
          return {
            id: item?.id,
            title: item?.attributes?.name,
            image: item?.attributes?.image?.data?.attributes?.url,
            price: item?.attributes?.price,
            tailorName: item?.attributes?.tailor?.data?.attributes?.name,
            rating: item?.attributes?.rating
          }
        })}
        pagination={productData?.meta?.pagination}
        title="Choose"
        coloredTitle="Design"
        description="Browse our wide collection of Mekhwar design, made only for your style and luxury"
      />
    </main>
  )
}
export default ShopPage;

=== ./app/[locale]/shop/design/[id]/page.tsx ===
import { AppBreadCrumbs } from "@/components/breadcurms";
import { getDesignData } from "@/provider";
import { Button } from "@nextui-org/react";
import { getLocale } from "next-intl/server";
import DesignBuyOptions from "@/components/shop/DesignBuyOptions";
import { ProductImageSwiperList } from "@/components/shop/ProductImageSwiperList";
import { IconHeart, IconShare } from "@tabler/icons-react";

const getData = async (props: any) => {
  const productID = props.params.id;
  const token = "";

  const { data, error } = await getDesignData(token, {
    path: { id: productID },
  });

  return { data };
};

const MekhwarPage = async (props: any) => {
  const { data }: any = await getData(props);
  const locale = await getLocale();
  const breadCrumbs = [
    {
      label: "Shop",
      href: `/${locale}`,
    },
    {
      label: "Designs",
      href: `/${locale}/shop/designs`,
    },
    {
      label: data?.data?.attributes?.name,
    },
  ];
  return (
    <main className="min-h-screen min-w-screen w-full flex flex-col items-start justify-start overflow-hidden xs:py-1 sm:py-12 px-6 xs:px-3">
      <AppBreadCrumbs items={breadCrumbs} />

      <section
        id="ProductDetails"
        className="sm:w-[100%] xl:w-[100%] xs:w-full lg:min-h-[650px] mt-8 flex xs:flex-col sm:flex-row justify-center items-start"
      >
        {data?.data?.attributes?.image?.data?.attributes?.url && (
          <ProductImageSwiperList
            images={[data?.data?.attributes?.image?.data?.attributes?.url]}
          />
        )}

        <div className="flex flex-col justify-start items-start xs:w-full sm:w-[500px] sm:p-10 pr-0 pt-0 xs:mt-5">
          <h4 className="text-caption sm:text-[15px]">
            {data?.data?.attributes?.tailor?.data?.attributes?.name}
          </h4>

          <div className="my-[5px]"></div>

          <h1 className="text-secondary-800 opacity-100 sm:text-[40px] font-bold">
            {data?.data?.attributes?.name}
          </h1>

          <div className="my-[5px]"></div>

          <span className="flex flex-row justify-start items-center">
            <h2 className="price sm:font-medium sm:text-[30px] sm:tracking-wider">
              AED {data?.data?.attributes?.price}
            </h2>
            {/* <h3 className="old_price text-caption line-through sm:text-[18px] sm:tracking-wider ml-3">AED {data?.data?.attributes?.price}</h3> */}
          </span>

          <div className="my-[10px]"></div>

          <div className="xs:flex xs:flex-row-reverse xs:justify-between xs:items-center xs:w-full">
            {/* <span className="xs:block sm:flex flex-row justify-start items-center">
              <ProductDetailRating value={data?.data?.attributes?.rating || 0} />
            </span> */}

            <div className="xs:hidden my-[8px]"></div>

            <div className="button-list flex flex-row justify-start items-center">
              <Button
                startContent={<IconHeart size={20} />}
                color="secondary"
                className="bg-orange-900 min-w-0 min-h-0 h-auto px-[10px] py-[7px] rounded-[10px] text-[16px] font-medium text-secondary"
              >
                192
              </Button>
              <Button
                className="bg-primary-700 mx-4 text-orange-900 font-bold min-w-0 min-h-0 h-auto p-[7px] py-[8px] rounded-[10px]"
                isIconOnly
              >
                <IconShare className="w-auto min-w-0" size={18} />
              </Button>
            </div>
          </div>

          <div className="my-[10px]"></div>

          <DesignBuyOptions
            description={data?.data?.attributes?.description}
            sizes={data?.data?.attributes?.size}
            id={data?.data?.id}
            query={props.searchParams}
            tailorId={data?.data?.attributes?.tailor?.data?.id}
          />
        </div>
      </section>
    </main>
  );
};

export default MekhwarPage;


=== ./app/[locale]/shop/fabric/page.tsx ===
'use server'
import FabricCard from "@/components/cards/FabricCard"
import ShopPageHeader from "@/components/shop/shop-page-header";
import ShopPagination from "@/components/shop/pagination";
import { getFabricListing } from "@/provider";
import { getLocale, getTranslations } from 'next-intl/server';

async function getData(params: any) {
  const locale = await getLocale();
  const { data, error } = await getFabricListing("", {
    locale: locale ? locale : "en", 
    populate: "main_image",
    ...params,
    "pagination[pageSize]": 200,
    "pagination[page]": 1,
  });
  return data;
}

const FabricPage = async (props: any) => {
  const data = await getData(props.searchParams);
  const t = await getTranslations("shop");
  return (
    <main className="min-h-screen min-w-screen w-full flex xs:flex-col sm:flex-row items-start justify-start items-start justify-center overflow-hidden m-0 p-0">
      <section className="min-h-screen sm:w-[100%] xl:w-[100%] xs:w-full py-12 px-6 xs:px-3">
        <ShopPageHeader title={t("available_fabrics_l")} coloredTitle={t("available_fabrics_t")} description={t("available_fabrics_description")} />
        
        <div className="grid items-start justify-center sm:grid-cols-4 xs:grid-cols-2 md:grid-cols-2 l:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-7 xs:gap-y-5 xs:gap-x-5 sm:gap-x-5 sm:gap-y-6 min-h-[500px]">
          {
            data?.data?.map((item) => {
              return (<article key={item.id} className="grid-col-1"> <FabricCard 
              name={item?.attributes?.name} 
              id={item?.id}
              image={item.attributes?.main_image?.data?.attributes?.url}
              price={item.attributes?.price}
              /> </article>)
            })
          }
        </div>

        <div className="mt-12 flex justify-center">
          {
            data?.meta?.pagination?.pageCount ?
            <ShopPagination data={data} /> : null
          }
        </div>
      </section>
    </main>
  )
}

FabricPage.getInitialProps = async (props: any) => {
  return props;
}

export default FabricPage;

=== ./app/[locale]/shop/fabric/[fabricId]/page.tsx ===
import { AppBreadCrumbs } from "@/components/breadcurms";
import { getFabricByID, getFabricListing } from "@/provider";
import { Button } from "@nextui-org/react";
import { getLocale, getTranslations } from "next-intl/server";
import { ProductImageSwiperList } from "../../../../../components/shop/ProductImageSwiperList";
import HomeFabricCarousel from "@/components/sections/home-fabric-carousel";
import { FabricBuyOptions } from "@/components/shop/FabricBuyOptions";
import { truncate } from "@/utils";
import RatingsSection from "@/components/shop/rating";
import { FabricPatternItemComponent } from "./components";
import { ShareButton } from "@/components/buttons/ShareButton";
import { IconCheck } from "@tabler/icons-react";

// export async function generateMetadata(props: any): Promise<Metadata> {
//   const productID = props.params.id;
//   const token = "";
//   const { data, error } = await getMekhwarByMetaID("", productID);

//   return {
//     //@ts-ignore
//     title: data?.data?.attributes?.title,
//     //@ts-ignore
//     description: data?.data?.attributes?.description,
//   };
// }

const getData = async (props: any) => {
  const productID = props.params.fabricId;
  const token = "";

  const { data, error } = await getFabricByID(token, productID);

  const filters: any = {
    //@ts-ignore
    category: data?.data?.attributes?.category?.data?.id || 1,
  };
  const { data: relatedData, error: relatedError } = await getFabricListing(token, {
    filters: filters,
    populate: "main_image,category",
    "pagination[limit]": 10,
  });

  console.log(data);
  return { data, relatedData };
};

const FabricPage = async (props: any) => {
  const { data, relatedData }: any = await getData(props);
  const locale = await getLocale();
  const t = await getTranslations("shop");
  const breadCrumbs = [
    {
      label: "Shop",
      href: `/${locale}/shop`,
    },
    {
      label: "Fabric",
      href: `/${locale}/shop/fabric`,
    },
    {
      label: data?.data?.attributes?.name,
    },
  ];
  return (
    <main className="min-h-screen min-w-screen w-full flex flex-col items-start justify-start overflow-hidden xs:py-1 sm:py-12 px-6 xs:px-3">
      <AppBreadCrumbs items={breadCrumbs} />

      <section
        id="ProductDetails"
        className="sm:w-[100%] xl:w-[100%] xs:w-full lg:min-h-[650px] mt-8 flex xs:flex-col sm:flex-row justify-center items-start"
      >
        {data?.data?.attributes?.images?.data?.length && (
          <ProductImageSwiperList
            images={data?.data?.attributes?.images?.data?.map(
              (item: any) => item?.attributes?.url
            )}
          />
        )}

        <div className="w-full flex flex-col sm:max-w-[500px] sm:pl-10">
          <div className="flex sm:flex-col sm:justify-start sm:items-start xs:flex-row xs:justify-start xs:items-center xs:w-full sm:w-[500px] sm:pr-0 sm:pt-0 xs:mt-5">
            <h1 className="text-secondary-800 opacity-100 sm:text-[40px] font-bold">
              {data?.data?.attributes?.name}
            </h1>

            <div className="my-[5px] sm:mx-0 xs:mx-2"></div>

            <span className="flex flex-row justify-start items-center">
              <h2 className="price sm:font-medium sm:text-[30px] sm:tracking-wider text-xl">
                {data?.data?.attributes?.price ? (
                  <>AED {data?.data?.attributes?.price}</>
                ) : (
                  <>{t("price_after_confirmation")}</>
                )}
              </h2>

              <ShareButton />
            </span>
          </div>

          <FabricBuyOptions
            description={truncate(data?.data?.attributes?.description || "", 150)}
            id={data?.data?.id}
            patterns={data?.data?.attributes?.fabric_pattern}
          />
          <div className="my-[12px] w-full">
            {data?.data?.attributes?.fabric_pattern?.map((item: any, idx: number) => {
              return (
                <FabricPatternItemComponent
                  title={item.title}
                  categoryName={data?.data?.attributes?.category}
                  image={item?.image?.data?.attributes?.url}
                  key={idx}
                />
              );
            })}

            {data?.data?.attributes?.detail_list_item?.length > 0 && (
              <>
                <h2 className="product-description m-0 p-0 text-secondary-800 text-[24px] font-bold mt-3">
                  {t("product_description")}
                </h2>

                <ul>
                  {data?.data?.attributes?.detail_list_item?.map(
                    (item: any, index: number) => {
                      return (
                        <li
                          key={index}
                          className="text-white font-[16px] max-w-[1054px] flex flex-row my-4 items-start justify-start"
                        >
                          <span className="bg-white rounded-full p-1 text-secondary mr-3">
                            {<IconCheck size={12} />}
                          </span>
                          <span className="text-white text-[16px]">{item.title}</span>
                        </li>
                      );
                    }
                  )}
                </ul>
              </>
            )}
          </div>
        </div>
      </section>
      <div className="my-2"></div>

      {data?.data?.attributes?.detail_list_item?.length ? (
        <RatingsSection
          description={data?.data?.attributes?.description}
          highlights={data?.data?.attributes?.detail_list_item?.map(
            (item: any) => item?.title
          )}
        />
      ) : (
        <></>
      )}
      <section className="w-full">
        <HomeFabricCarousel
          description={t("related_products_description")}
          title={t("related_products_l")}
          coloredTitle={t("related_products_t")}
          px="xs:px-0"
          maxW="max-w-[100%]"
          align="proper"
          items={relatedData?.data?.map((item: any) => {
            return {
              title: item.attributes.name,
              image: item.attributes.main_image?.data?.attributes?.url || "",
              price: item.attributes.price,
              rating: item.attributes.rating || 0,
              id: item.id,
            };
          })}
        />
      </section>
    </main>
  );
};

export default FabricPage;


=== ./app/[locale]/shop/fabric/[fabricId]/components/FabricPatternItemComponent.tsx ===
"use client";
import { useRouter } from "@/utils";
import { Avatar, Button, Card, CardHeader } from "@nextui-org/react";
import { IconEye } from "@tabler/icons-react";
import Image from "next/image";
import { useState } from "react";
import Lightbox from "yet-another-react-lightbox";
import LightboxZoom from "yet-another-react-lightbox/plugins/zoom";
import "yet-another-react-lightbox/styles.css";

export interface FabricPatternItemComponentProps {
  image: string;
  title: string;
  categoryName: string;
}

export function FabricPatternItemComponent({
  image,
  title,
  categoryName,
}: FabricPatternItemComponentProps) {
  const [lightboxOpen, setLightboxOpen] = useState(false);

  const router = useRouter();

  const handleOpenLightbox = () => {
    setLightboxOpen(true);
  };

  const handleCloseLightbox = () => {
    setLightboxOpen(false);
  };

  return (
    <Card className="max-w-[340px] bg-transparent shadow-sm px-0">
      <CardHeader className="justify-between pr-0 pl-1">
        <div className="flex gap-5">
          <Avatar isBordered radius="sm" size="lg" src={image} />
          <Lightbox
            open={lightboxOpen}
            close={handleCloseLightbox}
            index={0}
            slides={[{ src: image }]}
            render={{
              slide: ({ slide }) => (
                <div
                  className="w-full h-full flex flex-col justify-start items-start cursor-pointer relative"
                  onClick={handleOpenLightbox}
                >
                  <div className="w-full h-full relative">
                    <Image
                      className="h-full object-cover"
                      src={image}
                      alt={slide.src}
                      layout="fill"
                      style={{ objectFit: "contain" }}
                    />
                  </div>
                </div>
              ),
            }}
            plugins={[LightboxZoom]}
            animation={{ zoom: 500 }}
            zoom={{
              maxZoomPixelRatio: 3,
              zoomInMultiplier: 2,
              doubleTapDelay: 300,
              doubleClickDelay: 300,
              doubleClickMaxStops: 2,
              keyboardMoveDistance: 50,
              wheelZoomDistanceFactor: 100,
              pinchZoomDistanceFactor: 100,
              scrollToZoom: false,
            }}
          />
          <div className="flex flex-col gap-1 items-start justify-center">
            <h4 className="text-small font-semibold leading-none text-default-600">{title}</h4>
            <h5 className="text-small tracking-tight text-default-400">{categoryName}</h5>
          </div>
          <div className="h-full flex justify-center items-center my-auto">
            <Button
              className="bg-transparent text-secondary min-w-[25px]"
              onClick={handleOpenLightbox}
            >
              <IconEye size={20} />
            </Button>
          </div>
        </div>
      </CardHeader>
    </Card>
  );
}


=== ./app/[locale]/shop/fabric/[fabricId]/components/index.ts ===
export { FabricPatternItemComponent } from "./FabricPatternItemComponent";

=== ./app/[locale]/shop/tailors/page.tsx ===
import TailorCard from "@/components/cards/TailorsCard";
import ShopPageHeader from "@/components/shop/shop-page-header";
import ShopPagination from "@/components/shop/pagination";
import { getTailorListing } from "@/provider";
import { getLocale, getTranslations } from "next-intl/server";
import qs from "qs";
import { Suspense } from "react";
import Loading from "../../loading";

async function getData(props: any) {
  const locale = await getLocale();
  const searchParams = props.searchParams || {};

  const publicToken = "";
  const parsedQs: any = qs.parse(searchParams);
  const parsedFilter: any = parsedQs.filters;

  const { data: tailorsData, error: productError } = await getTailorListing(publicToken, {
    "pagination[pageSize]": 6,
    "pagination[page]": parsedQs?.pagination?.page || 1,
    locale: locale ?? "en",
    populate: "image"
  });
  
  return { tailorsData };
}

const TailorsPage = async (props: any) => {

  const key = JSON.stringify(props?.searchParams);
  const { tailorsData } = await getData(props);
  const t = await getTranslations("shop");

  return (
    <main className="min-h-screen max-w-screen w-full flex xs:flex-col sm:flex-row items-start justify-start items-start justify-center overflow-hidden m-0 p-0">
      <section className="min-h-screen max-w-main py-12 px-6 xs:px-3">
        <ShopPageHeader title={t("choose_tailor_l")} coloredTitle={t("choose_tailor_t")} description={t("choose_tailor_description")} />
        <Suspense key={key} fallback={<Loading />}>
        <div className="grid items-start xs:grid-cols-1 md:grid-cols-1 lg:grid-cols-2 gap-8">
          {
            tailorsData && tailorsData?.data?.map((item) => {
              return <TailorCard
                image={item?.attributes?.image?.data?.attributes?.url || ""}
                name={item?.attributes?.name || ""}
                id={item.id}
                description={item.attributes?.description || ""}
                rating={item.attributes?.rating || 0}
                key={item.id}
              />
            })
          }
        </div>
        </Suspense>
        <div className="mt-12 flex justify-center">
          {
            tailorsData?.meta?.pagination?.pageCount ?
            <ShopPagination data={tailorsData.meta.pagination} /> : null
          }
        </div>
      </section>
    </main>
  )
}

export default TailorsPage;

=== ./app/[locale]/shop/tailors/[tailorId]/page.tsx ===
import { getDesignListing, getTailorByID } from "@/provider";
import { Chip } from "@nextui-org/react";
import { getLocale, getTranslations } from "next-intl/server";
import Image from "next/image";
import { Metadata } from "next";
import { TailorDesignsList } from "./components/TailorDesignsList";

/**
 * Generates metadata for a product based on its ID.
 * @param {Object} props - The properties object.
 * @param {string} props.params.id - The ID of the product.
 * @returns {Promise<Metadata>} - The metadata object.
 */
export async function generateMetadata(props: any): Promise<Metadata> {
  // Extract the product ID from the props object
  const productID = props.params.id;
  
  // Initialize the token variable
  const token = "";
  
  // Fetch the product data from the API using the token and productID
  const { data }: any = await getTailorByID(token, productID);
  
  // Return the metadata object with the title and description properties
  return {
    //@ts-ignore
    title: data?.data?.attributes?.title,
    //@ts-ignore
    description: data?.data?.attributes?.description,
    icons: {
      //@ts-ignore
      shortcut: data?.attributes?.background?.data?.attributes?.url,
      
    },
    //@ts-ignore
    twitter: {
      card: {
        image: data?.data?.attributes?.image?.data?.attributes?.url || ""
      },
      images:data?.data?.attributes?.image?.data?.attributes?.url,
      title: data?.data?.attributes?.title || "",
      description: data?.data?.attributes?.description,
      creator: data?.data?.attributes?.title
    },
    openGraph: {
      //@ts-ignore
      title: data?.data?.attributes?.title,
      description: data?.data?.attributes?.description,
      images: data?.data?.attributes?.image?.data?.attributes?.url,
    }
  };
}

const getData = async (props: any) => {
  const productID = props.params.tailorId;
  const token = "";
  const locale = props.params.locale;

  const { data } = await getTailorByID(token, productID, locale);

  const filters: any = {
    //@ts-ignore
    category: data?.data?.attributes?.category?.data?.id || 1,
  };
  const { data: relatedData } = await getDesignListing(token, {
    filters: filters,
    populate: "main_image,category",
    "pagination[limit]": 10,
  });

  //@ts-ignore
  return { data: data.data, relatedData };
}
const TailorsDetailsPage = async (props: any) => {

  const { data, relatedData }: any = await getData(props);
  const locale = await getLocale();
  const t = await getTranslations("shop");
  const breadCrumbs = [
    {
      label: t("shop"),
      href: `/${locale}`,
    },
    {
      label: t("tailors"),
      href: `/${locale}/tailors`,
    },
    {
      label: data?.attributes?.name,
    }
  ]

  return (
    //xs:py-1 sm:py-12 px-6 xs:px-3
    <main className="min-h-screen min-w-screen w-full flex flex-col items-center justify-start overflow-hidden ">

      <section className="cover-image min-w-screen relative">
        <Image
          className="w-screen xs:max-h-[40vh] sm:max-h-[40vh] md:max-h-[60vh] object-cover"
          src={data?.attributes?.background?.data?.attributes?.url}
          unoptimized
          width={500}
          height={500}
          alt=""
        />

        <div className="sm:block xs:block md:hidden xl:hidden absolute bottom-[-10vh] xs:bottom-[-5vh] xs:left-5 profile-pic col-span-2 items-start">
          <Image
            src={data?.attributes?.image?.data?.attributes?.url}
            unoptimized
            width={168}
            height={168}
            alt="Tailor's image"
            className="rounded-full xs:min-w-[10vh] xs:max-w-[10vh] xs:min-h-[10vh] xs:max-h-[10vh] min-w-[168px] max-w-[168px] sm:h-[168px] object-cover"
          />
        </div>
      </section>

      <div className="xs:my-12 sm:my-10 md:hidden lg:hidden"></div>

      <section id="ProductDetails" className=" max-w-main w-full xs:py-1 sm:py-12 px-6 xs:px-3">
        <div className="tailor-details w-full grid grid-cols-10 justify-center items-start sm:gap-12 xs:gap-y-5">

          <div className="hidden sm:hidden xs:hidden md:block lg:block xl:block profile-pic col-span-2 items-start">
            <Image
              src={data?.attributes?.image?.data?.attributes?.url}
              unoptimized
              width={168}
              height={168}
              alt="Tailor's image"
              className="rounded-[50%] min-w-[168px] max-w-[168px] sm:h-[168px] object-cover"
            />
          </div>

          <div className="details grid-col-5 col-span-6 xs:col-span-10">
            <h1 className="text-secondary font-bold text-4xl">{data?.attributes?.name}</h1>

            <div className="my-6"></div>

            <p className="text-white text-md">{data?.attributes?.description}</p>

            <div className="my-6"></div>

            <div className="chip-container">
              {
                data?.attributes?.tags?.split(",")?.map((tag: string, index: number) => (
                  <Chip className={`${index === 0 ? "mr-2" : "mx-2"} bg-primary-700 text-secondary-800`} key={index}>{tag}</Chip>
                ))
              }
            </div>
          </div>

          <div className="extra-details col-span-2 flex sm:flex-col xs:col-span-10 xs:flex-row xs:justify-between">

            <div className="dest">
              <h3 className="text-xl text-secondary font-bold">{t("location")}</h3>
              <h2 className="text-l text-white font-normal">{data?.attributes?.location}</h2>
            </div>

            <div className="my-6"></div>

            <div className="dest">
              <h3 className="text-xl text-secondary font-bold">{t("date_joined")}</h3>
              <h2 className="text-l text-white font-normal">{data?.attributes?.date_joined}</h2>
            </div>
          </div>
        </div>
      </section>

      <div className="hidden xs:block xs:my-4"></div>

      <TailorDesignsList tailorId={data?.id} />
    </main>
  )
}

export default TailorsDetailsPage;

=== ./app/[locale]/shop/tailors/[tailorId]/components/index.ts ===
export * as TailorDesignsList from "./TailorDesignsList";

=== ./app/[locale]/shop/tailors/[tailorId]/components/TailorDesignsList.tsx ===
'use client'
import DesignCard, { DesignCardSkeleton } from "@/components/cards/DesignCard"
import { useEffect, useState } from "react";
import { getDesignListing, getTailorMekhwarListing } from "@/provider";
import { Pagination } from "@nextui-org/react";
import { useLocale, useTranslations } from "next-intl";

export interface TailorDesignsListProps {
  tailorId: number;
}

export const TailorDesignsList = (props: TailorDesignsListProps) => {

  const [data, setData] = useState<any>([]);
  const [loading, setLoading] = useState<boolean>(false);
  const [page, setPage] = useState(0);
  const [pageCount, setPageCount] = useState(0);
  const locale = useLocale();

  const t = useTranslations("shop")

  useEffect(() => {
    if (window && !loading) loadData();
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [page]);


  const loadData = async () => {
    const filters: any = {};
    filters["tailor"] = {};
    filters["tailor"]["id"] = props.tailorId;

    setData([]);
    setLoading(true);
    const { data, error } = await getTailorMekhwarListing("", {
      filters,
      "pagination[pageSize]": 4,
      "pagination[page]": page,
      populate: "main_image",
      locale,
    });
    setLoading(false);

    setData(data?.data || []);
    setPage(data?.meta?.pagination?.page || 0);
    setPageCount(Math.ceil((data?.meta?.pagination?.total || 0) / 4));
  }

  return (
    <section id="ProductDetails" className="max-w-main w-full xs:py-1 sm:py-12 px-6 xs:px-3 flex flex-col items-center justify-start">
      <h1 className="text-4xl font-bold xs:w-[80%] xs:text-center text-start">{t("tailors_design_showcase_l")} <span className="text-secondary">{t("tailors_design_showcase_t")}</span></h1>
      <h3 className="text-md text-white mt-4 mb-12 text-center">{t("tailors_design_showcase_description")}</h3>
      <div className="tailor-details w-full grid xs:grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-4 justify-center items-start gap-5">
        {
          data?.map((design: any, index: number) => (
            <DesignCard
              key={index}
              title={design?.attributes?.title}
              image={design?.attributes?.main_image?.data?.attributes?.url}
              createdDate={design?.attributes?.createdAt}
              id={design?.id}
              price={design?.attributes?.price}
              description={design?.attributes?.description}
              customizable={design?.attributes?.customizable}
            />
          ))
        }
        {
          loading && [1, 2, 3, 4].map((i) => <DesignCardSkeleton key={i} />)
        }
        {
          data?.length === 0 && !loading && <p className="text-white italic text-l text-center w-full col-span-5">{t("no_designs_found")}</p>
        }


      </div>

      {
        pageCount > 1 && <div className="mt-8 w-full flex justify-center items-center">
        <Pagination
          classNames={{
            item: ["bg-primary-700"],
            cursor: ["bg-secondary", page.toString(), pageCount.toString()]
          }}
          total={pageCount}
          page={page}
          onChange={setPage}
        />
      </div>
      }

    </section>
  )
}

=== ./app/[locale]/shop/[id]/page.tsx ===
import { AppBreadCrumbs } from "@/components/breadcurms";
import {
  getMekhwarByID,
  getMekhwarByMetaID,
  getProductListing,
} from "@/provider";
import { getLocale, getTranslations } from "next-intl/server";
import { ProductImageSwiperList } from "../../../../components/shop/ProductImageSwiperList";
import { ProductDetailRating } from "../../../../components/shop/ProductDetailRating";
import { MekhwarBuyOptions } from "../../../../components/shop/MekhwarBuyOptions";
import { Metadata } from "next";
import HomeProductCarousel from "@/components/sections/home-product-carousel";
import { FavoriteButtonSmall } from "@/components/buttons/FavouriteButtonSmall";
import { ShareButton } from "@/components/buttons/ShareButton";
import RatingsSection from "@/components/shop/rating";
import MekhwarFabricComponent from "./Components/MekhwarFabricComponent";

export async function generateMetadata(props: any): Promise<Metadata> {
  const productID = props.params.id;
  const locale = await getLocale();
  const { data, error }: any = await getMekhwarByMetaID("", productID);

  return {
    //@ts-ignore
    title: data?.data?.attributes?.title,
    //@ts-ignore
    description: data?.data?.attributes?.description,
    openGraph: {
      url: `https://www.e-khayati.ae/${locale}/shop/${productID}`,
      title: data?.data?.attributes?.title,
      description: data?.data?.attributes?.description,
      type: "website",
      locale: locale,
      siteName: "E-Khayati",
      images: {
        url: data?.data?.attributes?.main_image?.data?.attributes?.url,
      },
    },
    twitter: {
      title: data?.data?.attributes?.title,
      description: data?.data?.attributes?.description,
      images: {
        url: data?.data?.attributes?.main_image?.data?.attributes?.url,
      },
      card: "summary",
    },
  };
}

const getData = async (props: any) => {
  const productID = props.params.id;
  const locale = props.params.locale;
  const token = "";

  const { data, error } = await getMekhwarByID(token, productID);

  const filters: any = {
    //@ts-ignore
    category: data?.data?.attributes?.category?.data?.id || 1,
  };
  const { data: relatedData, error: relatedError } = await getProductListing(
    token,
    {
      filters: filters,
      populate: "main_image,category,tailor",
      "pagination[limit]": 10,
      locale: locale,
    }
  );

  return { data, relatedData };
};

const MekhwarPage = async (props: any) => {
  const { data, relatedData }: any = await getData(props);
  const locale = await getLocale();
  const t = await getTranslations("shop");

  const breadCrumbs = [
    {
      label: t("shop"),
      href: `/${locale}`,
    },
    {
      label: t("mekhwar"),
      href: `/${locale}/shop`,
    },
    {
      label: data?.data?.attributes?.title,
    },
  ];
  return (
    <main className="min-h-screen w-full flex justify-center items-center">
      <section className="w-full max-w-main flex flex-col items-start justify-start overflow-hidden xs:py-1 sm:py-12 px-6 xs:px-3">
        <AppBreadCrumbs items={breadCrumbs} />

        <section
          id="ProductDetails"
          className="sm:w-[100%] xl:w-[100%] xs:w-full lg:min-h-[650px] mt-8 flex xs:flex-col sm:flex-row justify-center items-start"
        >
          {data?.data?.attributes?.images?.data?.length && (
            <ProductImageSwiperList
              images={data?.data?.attributes?.images?.data?.map(
                (item: any) => item?.attributes?.url
              )}
            />
          )}

          <div className="flex flex-col justify-start items-start mt-[-40px] xs:w-full w-full sm:p-10 pr-0 pt-0 xs:mt-5">
            <h4 className="text-caption sm:text-[15px]">
              {data?.data?.attributes?.tailor?.data?.attributes?.name}
            </h4>

            <div className="my-[5px]"></div>

            <h1 className="text-secondary-800 opacity-100 sm:text-[40px] font-bold">
              {data?.data?.attributes?.title}
            </h1>

            <div className="my-[5px]"></div>

            <span className="flex flex-row justify-start items-center">
              <h2 className="price sm:font-medium sm:text-[30px] sm:tracking-wider">
                AED {data?.data?.attributes?.price}
              </h2>
            </span>

            <div className="my-[8px]"></div>

            <div className="xs:flex xs:flex-row-reverse xs:justify-between xs:items-center xs:w-full">
              <span className="xs:block sm:flex flex-row justify-start items-center">
                <ProductDetailRating
                  value={data?.data?.attributes?.rating || 0}
                />
              </span>

              <div className="xs:hidden my-[8px]"></div>

              <div className="button-list flex flex-row justify-start items-center">
                <FavoriteButtonSmall id={data?.data?.id} />
                <ShareButton
                  imageUrl={
                    data?.data?.attributes?.images?.data[0]?.attributes?.url
                  }
                  title={data?.data?.attributes?.title}
                />
              </div>

              <MekhwarFabricComponent fabrics={data?.data?.attributes?.fabrics} />
            </div>

            <div className="my-[8px]"></div>

            <MekhwarBuyOptions
              description={data?.data?.attributes?.description}
              sizes={data?.data?.attributes?.size}
              id={data?.data?.id}
              localizations={
                data?.data?.attributes?.localizations?.data?.[0]?.id
              }
              fabric={data?.data?.attributes?.fabrics?.data?.attributes}
              customizable={data?.data?.attributes?.customizable}
            />
          </div>
        </section>

        <RatingsSection
          description={data?.data?.attributes?.description}
          highlights={data?.data?.attributes?.detail_list_item?.map(
            (item: any) => item?.title
          )}
        />

        <section className="w-full">
          <HomeProductCarousel
            description={t("related_products_description")}
            title={t("related_products_l")}
            coloredTitle={t("related_products_t")}
            px="xs:px-0"
            screenFull={true}
            items={relatedData?.data?.map((item: any) => {
              return {
                title: item.attributes.title,
                image: item.attributes.main_image?.data?.attributes?.url || "",
                price: item.attributes.price,
                rating: item.attributes.rating || 0,
                tailorName: item.attributes.tailor?.data?.attributes?.name,
                id: item.id,
              };
            })}
          />
        </section>
      </section>
    </main>
  );
};

export default MekhwarPage;


=== ./app/[locale]/shop/[id]/Components/MekhwarFabricComponent.tsx ===
"use client";
import { useRouter } from "@/utils";
import { Avatar, Button, Card, CardHeader } from "@nextui-org/react";
import { IconEye } from "@tabler/icons-react";

export interface MekhwarFabricComponentProps {
  fabrics: any;
}

export default function MekhwarFabricComponent({
  fabrics,
}: MekhwarFabricComponentProps) {
  const router = useRouter();

  return (
    <p className="m-0 mt-0 text-white font-[14px] w-[100%]">
      {fabrics?.data?.id ? (
        <Card className="max-w-[340px] bg-transparent shadow-sm px-0">
          <CardHeader className="justify-between pr-0 pl-1 xs:py-0">
            <div className="flex gap-5">
              <Avatar
                isBordered
                radius="sm"
                size="md"
                src={
                  fabrics?.data?.attributes?.main_image?.data?.attributes.formats?.thumbnail?.url
                }
              />
              <div className="flex flex-col gap-1 items-start justify-center">
                <h4 className="text-small font-semibold leading-none text-default-600">
                  {fabrics?.data?.attributes?.name}
                </h4>
                <h5 className="text-small tracking-tight text-default-400">
                  {fabrics?.data?.attributes?.category?.data?.attributes?.name}
                </h5>
              </div>
            </div>
            <Button
              color="primary"
              radius="full"
              size="sm"
              onClick={() =>
                router.push({
                  pathname: `/shop/fabric/[fabricId]`,
                  params: { fabricId: fabrics?.data?.id },
                })
              }
            >
              <IconEye size={20} />
            </Button>
          </CardHeader>
        </Card>
      ) : (
        <></>
      )}
    </p>
  );
}


=== ./app/[locale]/signup/page.tsx ===
"use client";
import { useForm, SubmitHandler } from "react-hook-form";
import CardContainer from "@/abstract/CardContainer";
import { Link } from "@/utils";
import PhoneInput from "react-phone-input-2";
import {ThemeInput} from "@/components/input/theme-input";
import { MobileInput } from "@/components/input/mobile-input";
import SignupButton from "./components/SignupButton";
import { getCart, getMe, registerApi } from "@/provider";
import * as Yup from "yup";
import { yupResolver } from "@hookform/resolvers/yup";
import { useState } from "react";
import "react-toastify/dist/ReactToastify.css";
import { ToastContainer, toast } from "react-toastify";
import { setToken, useRouter } from "@/utils";
import { useAuth } from "@/provider/AuthContext";
import { saveCartItems, setUserAddresses, setUserProfiles } from "@/utils/cart";
import "react-phone-input-2/lib/style.css";
import Link2 from "next/link";
import { useTranslations } from "next-intl";

type Inputs = {
  name: string;
  phone: string;
  email: string;
  password: string;
  confirmPassword: string;
  privacyPolicy: boolean;
  countryCode: string;
};

const LoginPage = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [showTermsPopup, setShowTermsPopup] = useState(false);
  const [showPrivacyPopup, setShowPrivacyPopup] = useState(false);

  const [countriesList, setCountriesList] = useState([]);
  const [selectedCountry, setSelectedCountry] = useState("");
  const [phoneNumber, setPhoneNumber] = useState("");

  const router = useRouter();
  const authCtx = useAuth();
  const t = useTranslations("auth");
 
  const backendUrl = process.env.NEXT_PUBLIC_API_HOST;
  const googleProvider = "google";

  const handleOnChange = (value: any, country: any) => {
    setPhoneNumber(value);
  };
  const formSchema = Yup.object().shape({
    name: Yup.string()
      .required("Name is required")
      .min(3, "Name length should be at least 3 characters"),
    email: Yup.string().email("Email is invalid").required("Email is required"),
    password: Yup.string()
      .required("Password is required")
      .min(6, "Password length should be at least 6 characters")
      .max(12, "Password cannot exceed more than 12 characters"),
    confirmPassword: Yup.string()
      .required("Confirm Password is required")
      .min(6, "Password length should be at least 6 characters")
      .max(12, "Password cannot exceed more than 12 characters")
      .oneOf([Yup.ref("password")], "Passwords do not match"),
    privacyPolicy: Yup.string(),
  });

  const {
    register,
    handleSubmit,
    formState: { errors },
    setValue,
    getValues,
    control,
  } = useForm<Inputs>({
    mode: "onTouched",
    //@ts-ignore
    resolver: yupResolver(formSchema),
  });

  const onSubmit: SubmitHandler<Inputs> = async (formData: any) => {
    // const country = countryList.getCountryData(formData.countryCode);
    // formData.phone = "+" + country?.phone?.[0] + formData.phone;
    setIsLoading(true);

    try {
      const {
        data: registerData,
        error,
        response,
      }: any = await registerApi({
        name: formData.name,
        phone: phoneNumber,
        email: formData.email,
        password: formData.password,
        username: formData.email,
      });

      //@ts-ignore
      if (error?.error?.details?.errors?.[0]?.message) {
        //@ts-ignore
        toast.error(error?.error.details.errors[0].message, {
          position: "top-right",
          autoClose: 5000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
          theme: "light",
        });
        setIsLoading(false);
      } else if (error?.error?.message) {
        toast.error(error?.error?.message, {
          position: "top-right",
          autoClose: 5000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
          theme: "light",
        });
        setIsLoading(false);
      } else {
        toast.success("Account created successfully", {
          position: "top-right",
          autoClose: 5000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
          theme: "light",
        });

        setToken(registerData);
        const { data: cartData, error } = await getCart(registerData.jwt);
        //@ts-ignore
        saveCartItems(cartData);

        //get othter details
        const { data: userData } = await getMe(registerData.jwt);
        //@ts-ignore
        setUserAddresses(userData?.addresses);
        //@ts-ignore
        setUserProfiles(userData?.size_profiles);
        authCtx.setIsAuthenticated(true);
        authCtx.setToken(registerData?.jwt || "");
        authCtx.setUser({
          id: registerData?.user?.id,
          name: registerData?.user?.name,
          email: registerData?.user?.email,
        });
        router.push("/");
        setIsLoading(false);
      }

      // if (error)
    } catch (err) {
      setIsLoading(false);
    }
    // setIsLoading(false);
  };

  return (
    <main className="min-h-screen min-w-screen w-full flex flex-col items-center justify-center overflow-hidden m-0 p-0 xs:py-2">
      <div className="register-container xs:w-full px-5">
        <CardContainer scissors={false}>
          <form
            onSubmit={handleSubmit(onSubmit)}
            className="w-full h-full flex flex-col items-center justify-center sm:w-100 sm:h-50 md:w-[573px] md:min-h-[679px] md:py-10 xs:w-full xs:py-12 px-12 xs:px-4"
          >
            {/* Register */}
            <h1 className="text-white sm:text-[44px] xs:text-[39.94px] font-black">
              <span className="text-secondary">{t("sign_up")}</span>
            </h1>

            <p className="text-caption text-md text-center sm:w-[70%] my-5 sm:text-[15px] xs:text-[18px] text-center">
              {t("signup_description")}
            </p>

            <ThemeInput
              errorMessage={errors.name?.message}
              extras={{ ...register("name") }}
              label={t("name")}
            />

            <div className="my-2"></div>

            <ThemeInput
              errorMessage={errors.email?.message}
              extras={{ ...register("email") }}
              label={t("email")}
            />

            <div className="my-2"></div>

            <ThemeInput
              errorMessage={errors.password?.message}
              extras={{ ...register("password") }}
              label={t("password")}
              type="password"
            />

            <div className="my-2"></div>

            <ThemeInput
              errorMessage={errors.confirmPassword?.message}
              extras={{ ...register("confirmPassword") }}
              label={t("confirm_password")}
              type="password"
            />

            <div className="my-2"></div>

            <PhoneInput
              country={"ae"}
              value={phoneNumber}
              onChange={handleOnChange}
              inputStyle={{
                color: "white",
                background: "#022D2E",
                height: "48px",
                border: " #022D2E",
              }}
              dropdownStyle={{ color: "black" }}
              searchStyle={{ background: "#022D2E", color: "white" }}
              buttonStyle={{ background: "#FFD992" }}
              enableSearch={true}
              placeholder="+971 50 123 4567"
            />

            {/* <MobileInput
              label="Mobile"
              extras={register("phone")}
              errorMessage={errors.phone?.message}
              countryCodeErrorMessage={errors.countryCode?.message}
              countryCodeExtras={register("countryCode")}
              onCountryChange={setSelectedCountry}
              smaller={true}
            /> */}

            {/* <div className="mt-12 sm:max-w-[429px]">
            <AgreementPP errorMessage={errors.privacyPolicy?.message} extras={{...register("privacyPolicy")}} />
          </div> */}

            <div className="mt-12  w-full flex flex-row items-center justify-center">
              <SignupButton type="submit" isLoading={isLoading} />
            </div>
            <p className="mt-5 text-center ">
              {t("already_have_an_account")}{" "}
              <Link href={"/login"} className="text-secondary" prefetch={true}>
                {" "}
                {t("login")}
              </Link>
            </p>

            <p className="mt-5 text-center  ">
             {t("by_signing_up_i_agree_to_ekhayati")} <i>E-KHAYATI</i>
              <Link
                href={"/terms-and-conditions"}
                className="text-secondary cursor-pointer"
              >
                {" "}
                {t("terms_of_use")}
              </Link>{" "}
              {t("and")}
              <Link
                href={"/privacy-policy"}
                className="text-secondary  cursor-pointer"
              >
                {" "}
                {t("privacy_policy")}
              </Link>
              .
            </p>
            <div className="w-[70%] mt-3 flex flex-row justify-center items-center">
              <div className="w-[40%] border-t-1 opacity-30 border-black"></div>
              <div className="mx-5 text-center text-white text-opacity-50 text-base font-medium  leading-tight">
                {t("or")}
              </div>
              <div className="w-[40%] border-t-1 opacity-30 border-black"></div>
            </div>
            <Link2 href={`${backendUrl}connect/${googleProvider}`} className="flex items-center mt-3 px-4 py-2 bg-blue-500 text-white rounded-md shadow-md hover:bg-blue-600 focus:outline-none focus:ring focus:border-blue-300">
              <img
                src="/assets/images/google-logo.png"
                alt="Google Logo"
                className="w-5 h-5 mr-2"
              />
              {t("sign_up_with_google")}
            </Link2>
          </form>
        </CardContainer>
      </div>
      <ToastContainer />
    </main>
  );
};

export default LoginPage;


=== ./app/[locale]/signup/components/AgreementPP.tsx ===
import { Checkbox, Link } from "@nextui-org/react"


const AgreementPP = ({errorMessage, extras}: { errorMessage?: string, extras?: any }) => {
  return <Checkbox 
  isInvalid={errorMessage ? true : false}
  {...extras}
  color="secondary"
  
  classNames={{
    label: ["text-[12px]"],
    wrapper: ["bg-transparent", "xs:text-[12px]"]
  }}>By Checking this, you allow us to store and use your email and data
  for our related process in this platform</Checkbox>
}

export default AgreementPP;

=== ./app/[locale]/signup/components/BackButton.tsx ===
import { Button } from "@nextui-org/react";
import { IconChevronLeft } from "@tabler/icons-react";

const BackButton = ({onClick}: {onClick: () => void}) => {
  return <Button onClick={onClick} className={`bg-transparent mt-3 sm:w-[148px] xs:w-[150px] sm:h-[48px] xs:h-[49.13px] sm:text-[19px] xs:text-[17px] xs:font-medium text-white rounded rounded-s`} startContent={<IconChevronLeft />}>Back</Button>
}

export default BackButton;

=== ./app/[locale]/signup/components/SignupButton.tsx ===
"use client"
import { Button } from "@nextui-org/react";
import { useTranslations } from "next-intl";

const SignupButton = ({ onClick, type, isLoading } : {type?: "button" | "submit" | "reset" | undefined,  onClick?: () => void, isLoading?: boolean }) => {
  const t = useTranslations("auth");
  return (<Button isLoading={isLoading} type={type} onClick={onClick} className="bg-secondary-800  w-full   sm:h-[48px] xs:h-[49.13px] sm:text-[19px] xs:text-[17px] xs:font-medium text-theme-900 rounded rounded-s">{t("register")}</Button>);
  
}

export default SignupButton;

=== ./app/[locale]/size-guide/page.tsx ===
"use client";
import ShopPageHeader from "@/components/shop/shop-page-header";
import { useRouter } from "@/utils";
import { Button } from "@nextui-org/react";
import { IconChevronLeft } from "@tabler/icons-react";
import { useLocale, useTranslations } from "next-intl";
import Image from "next/image";

export default function SizeGuide() {
  const router = useRouter();
  const t = useTranslations("size_guide");
  const locale = useLocale();

  const handleBack = () => router.back();

  return (
    <main className="min-h-screen min-w-screen w-full flex flex-col items-start justify-start overflow-hidden m-0 p-5 md:pt-10">
      <header
        style={{ boxSizing: "border-box" }}
        className="xs:mb-2 sm:mb-12 flex min-h-[50px] justify-start items-start xs:w-full"
      >
        <div className="flex items-center justify-center h-[60px] px-3">
          <Button
            onClick={handleBack}
            isIconOnly
            size="sm"
            className="bg-transparent text-[20px] w-[10px] p-x-0 rounded-md border-white border-2"
          >
            <IconChevronLeft />
          </Button>
        </div>
        <div className="xs:w-full">
          <h1 className="text-white xs:text-[30px] text-5xl font-black xs:w-full xs:text-center">
            <span className="text-secondary">{t("page_title_l")}</span> {t("page_title_t")}
          </h1>
        </div>
      </header>

      <section className="w-full max-w-main flex flex-col lg:flex-row justify-center items-start overflow-auto relative bg-primary m-0 pt-10 xs:pt-[70px]">
        <article className="flex flex-col items-start lg:w-[50%] lg:max-w-[500px] w-full">
          <p className="text-caption mb-10 lg:text-start text-center">
            {t("page_description_1")}
            <br /> <br />
            {t("page_description_2")}
            <br /> {t("page_description_3")}
          </p>

          <div className="table-containers w-full flex flex-col lg:flex-row justify-center items-center lg:justify-start lg:items-start">
            <table className="border-separate w-full lg:w-auto">
              <thead className="bg-primary-700">
                <tr className="">
                  <th className="text-secondary text-[14px] text-left p-4 py-5 font-normal lg:rounded-tl-lg min-w-[56px]">
                    {t("height")}
                  </th>
                  <th className="text-secondary text-[14px] text-left p-5 font-normal">
                    {t("chest_point")}
                  </th>
                  <th className="lg:table-cell text-secondary text-[14px] text-left p-5 font-normal">
                    {t("cup_size")}
                  </th>
                </tr>
              </thead>
              <tbody className="bg-primary-700">
                <tr>
                  <td className="text-secondary text-[14px] text-left p-5 font-normal">
                    <div className="flex items-center justify-between">
                      <span>52</span>
                      <span>{t("inch")}</span>
                    </div>
                  </td>
                  <td className="text-secondary text-[14px] text-left p-5 font-normal">
                    <div className="flex items-center justify-between">
                      <span>18</span>
                      <span>{t("inch")}</span>
                    </div>
                  </td>
                  <td className="table-cell text-secondary text-[14px] text-left p-5 font-normal">
                    AA - A
                  </td>
                </tr>
                <tr>
                  <td className="text-secondary text-[14px] text-left p-5 font-normal">
                    <div className="flex items-center justify-between">
                      <span>54</span>
                      <span>{t("inch")}</span>
                    </div>
                  </td>
                  <td className="text-secondary text-[14px] text-left p-5 font-normal">
                    <div className="flex items-center justify-between">
                      <span>20</span>
                      <span>{t("inch")}</span>
                    </div>
                  </td>
                  <td className="table-cell text-secondary text-[14px] text-left p-5 font-normal">
                    B
                  </td>
                </tr>
                <tr>
                  <td className="text-secondary text-[14px] text-left p-5 font-normal">
                    <div className="flex items-center justify-between">
                      <span>56</span>
                      <span>{t("inch")}</span>
                    </div>
                  </td>
                  <td className="text-secondary text-[14px] text-left p-5 font-normal">
                    <div className="flex items-center justify-between">
                      <span>22</span>
                      <span>{t("inch")}</span>
                    </div>
                  </td>
                  <td className="table-cell text-secondary text-[14px] text-left p-5 font-normal">
                    C
                  </td>
                </tr>
                <tr>
                  <td className="text-secondary text-[14px] text-left p-5 font-normal">
                    <div className="flex items-center justify-between">
                      <span>58</span>
                      <span>{t("inch")}</span>
                    </div>
                  </td>
                  <td className="text-secondary text-[14px] text-left p-5 font-normal">
                    <div className="flex items-center justify-between">
                      <span>24</span>
                      <span>{t("inch")}</span>
                    </div>
                  </td>
                  <td className="table-cell text-secondary text-[14px] text-left p-5 font-normal">
                    D - DD -DDD
                  </td>
                </tr>
                <tr>
                  <td className="text-secondary text-[14px] text-left p-5 font-normal">
                    <div className="flex items-center justify-between">
                      <span>60</span>
                      <span>{t("inch")}</span>
                    </div>
                  </td>
                  <td className="text-secondary text-[14px] text-left p-5 font-normal">
                    <div className="flex items-center justify-between">
                      <span>26</span>
                      <span>{t("inch")}</span>
                    </div>
                  </td>
                  <td className="table-cell text-secondary text-[14px] text-left p-5 font-normal">
                    G - H
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
          <div className="w-full flex flex-col justify-start mt-5 lg:items-start items-center">
            <h3 className="font-medium text-secondary lg:text-start text-lg">
              {t("chest_point")}:
            </h3>
            <p className="text-caption mb-10 lg:text-start text-center lg:max-w-[60%]">
              {t("chest_point_description")}
            </p>
          </div>
          <div className="w-full flex flex-col justify-start mt-5 lg:items-start items-center">
            <h3 className="font-medium text-secondary lg:text-start text-lg">{t("bust")}:</h3>
            <p className="text-caption mb-10 lg:text-start text-center lg:max-w-[60%]">
              {t("bust_description")}
            </p>
          </div>
        </article>

        <div className="lg:w-[40%] w-full mt-5 lg:mt-0">
          <Image
            src={`/assets/images/size-guide-${locale}.png`}
            unoptimized
            // property={"high"}
            alt=""
            width="0"
            height="0"
            // sizes="100vw"
            style={{
              width: "100%",
              height: "auto",
              maxHeight: "600px",
              objectFit: "contain",
            }}
          />
        </div>
      </section>
    </main>
  );
}


=== ./app/[locale]/terms-and-conditions/page.tsx ===
import { getTermsAndConditions } from "@/provider";
import { Metadata } from "next";
import { getLocale } from "next-intl/server";

export const metadata: Metadata = {
    title: "E-Khayati | Terms and Conditions",
    description: "E-Khayati Terms and Conditions Page",
}

const getData = async () => {
  const locale = await getLocale();
  const { data } = await getTermsAndConditions(locale);
  return data;
};

export default async function TermsAndConditions(props: any) {
  const data = await getData();
  return (
    <main className="min-w-main px-5 py-10 min-h-dvh">
      <article
        dangerouslySetInnerHTML={{
          __html: data?.data?.attributes?.value || "Terms and conditions",
        }}
      />
    </main>
  );
}


=== ./components/index.ts ===
export * from "./cards";
export * as AppBreadCrumbs from "./breadcurms";
export * from "./buttons/FavouriteButton";
export * from "./buttons/LinkButton";
export * from "./buttons/PrimaryButton";
export * from "./cards";
export * from "./input/mobile-input";
export * as ThemeInput from "./input/theme-input";
export * as RatingsSection from "./shop/rating";
export * as Navbar from "./layout/Navbar";
export * as Footer from "./layout/Footer";
export * as ShopPageHeader from "./shop/shop-page-header";
export * as ShopPagination from "./shop/pagination";
export * from "./sections/home-banner-slider";
export * from "./sections/home-fabric-carousel";
export * from "./sections/home-product-carousel";
export * from "./sliders";
export * from "../utils/navigation";
export * from "./shop/FabricBuyOptions";
export * as MekhwarBuyOptions from "./shop/MekhwarBuyOptions";
export * from "./shop/ProductDetailRating";
export * from "./shop/ProductImageSwiperList";
export * from "./shop/customization";


=== ./components/breadcurms/index.tsx ===
'use client'
import { BreadcrumbItem, Breadcrumbs } from "@nextui-org/react"
import { useLocale } from "next-intl"

export interface AppBreadCrumbsProps {
  items: {
    href?: string;
    label: string;
  }[]
}

export const AppBreadCrumbs = (props: AppBreadCrumbsProps) => {
  const locale = useLocale();
  return (
    <Breadcrumbs className="xs:hidden">
      {
        props.items.map((item, index) => <BreadcrumbItem key={index} href={item.href}>{item.label}</BreadcrumbItem>)
      }
    </Breadcrumbs> 
  )
}

=== ./components/buttons/FavouriteButton.tsx ===
/* eslint-disable react-hooks/exhaustive-deps */
"use client";
import { Button } from "@nextui-org/react";
import Image from "next/image";
import EmptyHeart from "../../../public/assets/images/empty-heart.png";
import FilledHeart from "../../../public/assets/images/filled-heart.png";
import { useLocale } from "next-intl";
import { useEffect, useState } from "react";
import {
  getLocalFavorites,
  setFavorites,
  storeLocalFavorites,
  useRouter,
} from "@/utils";
import { useAuth } from "@/provider/AuthContext";
import { addToFavorite, removeFromFavorite } from "@/provider";
export const FavoriteButton = ({ id }: { id: number | undefined }) => {
  const [isFavorited, setIsFavorited] = useState(false);
  const [isLoading, setIsLoading] = useState(false);

  const locale = useLocale();
  const ctx = useAuth();
  const router = useRouter();

  const loadData = () => {
    const fab = getLocalFavorites();
    if (fab.includes(id)) {
      setIsFavorited(true);
    }
  };

  const handleClick = async (e: any) => {
    e.preventDefault();

    if (ctx.checkAuth()) {
      if (!isFavorited) {
        await handleAddToFavorite();
      } else {
        await handleRemoveFromFavorites();
      }
      return;
    }
    router.push("/login");
  };

  const handleAddToFavorite = async () => {
    setIsLoading(true);

    const { data, error }: any = await addToFavorite(ctx.token, {
      //@ts-ignore
      productID: id,
      locale,
    });

    const fab: any = [];

    data?.res.forEach((item: any) => {
      fab.push(item?.mekhwar?.id);
    });

    storeLocalFavorites(fab);
    setIsFavorited(true);

    setIsLoading(false);
  };

  const handleRemoveFromFavorites = async () => {
    setIsLoading(true);

    const { data, error }: any = await removeFromFavorite(ctx.token, {
      //@ts-ignore
      productID: id,
      locale,
    });

    const fab: any = [];

    data?.res.forEach((item: any) => {
      fab.push(item?.mekhwar?.id);
    });

    storeLocalFavorites(fab);

    setIsFavorited(false);
    setIsLoading(false);
  };

  useEffect(() => {
    loadData();
  }, []);

  return (
    <>
      <Button
        isIconOnly
        className="xs:hidden bg-transparent xs:w-[30px] xs:h-[30px] sm:w-[45px] sm:h-[45px]"
        style={{
          backgroundImage: `url("data:image/svg+xml,%3csvg width='100%25' height='100%25' xmlns='http://www.w3.org/2000/svg'%3e%3crect width='100%25' height='100%25' fill='none' rx='12' ry='12' stroke='rgba(255, 217, 146, 1)' stroke-width='4' stroke-dasharray='6%2c 14' stroke-dashoffset='14' stroke-linecap='square'/%3e%3c/svg%3e")`,
        }}
        onClick={handleClick}
        isLoading={isLoading}
      >
        {isFavorited ? (
          <Image
            priority={true}
            unoptimized
            className="xs:w-[18px] xs:h-[15px] sm:w-[28px] sm:h-[22px] object-contain"
            src={FilledHeart}
            width={28}
            height={28}
            alt={""}
          />
        ) : (
          <Image
            priority={true}
            unoptimized
            className="xs:w-[18px] xs:h-[15px] sm:w-[28px] sm:h-[22px] object-contain"
            src={EmptyHeart}
            width={28}
            height={28}
            alt={""}
          />
        )}
      </Button>

      <Button
        isIconOnly
        radius={"none"}
        className="sm:hidden bg-transparent p-0 w-[30px] h-[30px] w-max-[30px] h-max-[30px]"
        style={{
          backgroundImage: `url("data:image/svg+xml,%3csvg width='100%25' height='100%25' xmlns='http://www.w3.org/2000/svg'%3e%3crect width='100%25' height='100%25' fill='none' rx='3' ry='3' stroke='rgba(255, 217, 146, 1)' stroke-width='3' stroke-dasharray='4%2c 10 ' stroke-dashoffset='3' stroke-linecap='square'/%3e%3c/svg%3e")`,
          borderRadius: 3,
          padding: "0 !important",
          height: "30px !important",
          width: "30px !important",
        }}
        isLoading={isLoading}
        onClick={handleClick}
      >
        {isFavorited ? (
          <Image
            priority={true}
            unoptimized
            className="w-[18px] h-[15px]"
            src={FilledHeart}
            alt={""}
          />
        ) : (
          <Image
            priority={true}
            unoptimized
            className="w-[18px] h-[15px]"
            src={EmptyHeart}
            alt={""}
          />
        )}
      </Button>
    </>
  );
};


=== ./components/buttons/FavouriteButtonSmall.tsx ===
"use client";
import { Button } from "@nextui-org/react";
import { useLocale } from "next-intl";
import { useEffect, useState } from "react";
import {
  getLocalFavorites,
  storeLocalFavorites,
  useRouter,
} from "@/utils";
import { useAuth } from "@/provider/AuthContext";
import { addToFavorite, removeFromFavorite } from "@/provider";
import { IconHeart, IconHeartFilled } from "@tabler/icons-react";
export const FavoriteButtonSmall = ({ id }: { id: number | undefined }) => {
  const [isFavorited, setIsFavorited] = useState(false);
  const [isLoading, setIsLoading] = useState(false);

  const locale = useLocale();
  const ctx = useAuth();
  const router = useRouter();

  const loadData = () => {
    const fab = getLocalFavorites();
    if (fab.includes(id)) {
      setIsFavorited(true);
    }
  };

  const handleClick = async (e: any) => {
    e.preventDefault();

    if (ctx.checkAuth()) {
      if (!isFavorited) {
        await handleAddToFavorite();
      } else {
        await handleRemoveFromFavorites();
      }
      return;
    }
    router.push("/login");
  };

  const handleAddToFavorite = async () => {
    setIsLoading(true);

    const { data, error }: any = await addToFavorite(ctx.token, {
      //@ts-ignore
      productID: id,
      locale,
    });

    const fab: any = [];

    data?.res.forEach((item: any) => {
      fab.push(item?.mekhwar?.id);
    });

    storeLocalFavorites(fab);
    setIsFavorited(true);

    setIsLoading(false);
  };

  const handleRemoveFromFavorites = async () => {
    setIsLoading(true);

    const { data, error }: any = await removeFromFavorite(ctx.token, {
      //@ts-ignore
      productID: id,
      locale,
    });

    const fab: any = [];

    data?.res.forEach((item: any) => {
      fab.push(item?.mekhwar?.id);
    });

    storeLocalFavorites(fab);

    setIsFavorited(false);
    setIsLoading(false);
  };

  useEffect(() => {
    loadData();
  }, []);

  return (
    <Button
    color="secondary"
    className="bg-orange-900 min-w-0 min-h-0 h-auto px-[10px] py-[7px] rounded-[10px] text-[16px] font-medium text-secondary"
    isIconOnly
    onClick={handleClick}
    // disabled={isLoading}
    isLoading={isLoading}
  >
    {
        isFavorited ? <IconHeartFilled size={20} /> : <IconHeart size={20} />
    }
  </Button>
  );
};


=== ./components/buttons/HamburgerIcon.css ===
.hamburger-icon {
  cursor: pointer;
  width: 25px;
  height: 16px;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}

.bar {
  width: 25px;
  height: 2px;
  background: #FFD992;
  transition: transform 0.3s, opacity 0.3s;
}

.hamburger-icon.open .bar:first-child {
  transform: rotate(45deg) translate(0, 10px);
}

.hamburger-icon.open .bar:last-child {
  transform: rotate(-45deg) translate(0, -10px);
}

=== ./components/buttons/HamburgerIcon.tsx ===
import React, { useState } from 'react';
import './HamburgerIcon.css'; // Import your CSS file for styling

interface HamburgerIconProps {
  onClick: () => void;
}

const HamburgerIcon: React.FC<HamburgerIconProps> = ({ onClick }) => {
  const [isOpen, setIsOpen] = useState(false);

  const handleClick = () => {
    setIsOpen(!isOpen);
    onClick();
  };

  return (
    <div className={`hamburger-icon ${isOpen ? 'open' : ''}`} onClick={handleClick}>
      <div className="bar" />
      <div className="bar" />
    </div>
  );
};

export default HamburgerIcon;


=== ./components/buttons/LinkButton.tsx ===
import { Link } from "../../utils/navigation";

const LinkButton = ({title, endIcon, paddingLeft, thin, to}: { title: string, endIcon?: JSX.Element, paddingLeft?: number, thin?: boolean, to?: any}) => {
  return <Link href={to || "#"} prefetch={true} scroll={true}> <div className={`bg-transparent text-white rounded rounded-s font-medium text-sm px-8 flex items-center py-2 ${thin ? "h-auto p-0" : ""} h-auto ` + (typeof paddingLeft != "undefined" && paddingLeft >= 0 ? " pl-" + paddingLeft : "") }>{title} <span className="mx-1"></span> {endIcon}</div> </Link>
}

export default LinkButton;

=== ./components/buttons/PrimaryButton.tsx ===
import { Button } from "@nextui-org/react"

const PrimaryButton = ({title, onClick}: { title: string, onClick?:() => void }) => {
  //border radius 10px
  return <Button onClick={onClick} className="bg-secondary-800 text-black rounded rounded-s font-medium text-sm px-8 py-2">{title}</Button>
}

export default PrimaryButton

=== ./components/buttons/ShareButton.tsx ===
"use client";

import {
  Button,
  Modal,
  ModalBody,
  ModalContent,
  ModalHeader,
} from "@nextui-org/react";
import { useRouter } from "next/navigation";
import { IconShare } from "@tabler/icons-react";
import { useEffect, useState } from "react";
import { useTranslations } from "next-intl";
import {
  EmailIcon,
  EmailShareButton,
  FacebookIcon,
  FacebookMessengerIcon,
  FacebookMessengerShareButton,
  FacebookShareButton,
  GabIcon,
  GabShareButton,
  HatenaIcon,
  HatenaShareButton,
  InstapaperIcon,
  InstapaperShareButton,
  LineIcon,
  LineShareButton,
  LinkedinIcon,
  LinkedinShareButton,
  LivejournalIcon,
  LivejournalShareButton,
  MailruIcon,
  MailruShareButton,
  OKIcon,
  OKShareButton,
  PinterestIcon,
  PinterestShareButton,
  PocketIcon,
  PocketShareButton,
  RedditIcon,
  RedditShareButton,
  TelegramIcon,
  TelegramShareButton,
  TumblrIcon,
  TumblrShareButton,
  TwitterShareButton,
  ViberIcon,
  ViberShareButton,
  VKIcon,
  VKShareButton,
  WeiboIcon,
  WeiboShareButton,
  WhatsappIcon,
  WhatsappShareButton,
  WorkplaceIcon,
  WorkplaceShareButton,
  XIcon,
} from "react-share";

export const ShareButton = (props: any) => {
  const [dialogOpen, setDialogOpen] = useState(false);
  const [shareUrl, setShareUrl] = useState("");

  const router = useRouter();
  const t = useTranslations("shop");

  const title = props.title;

  useEffect(() => {
    if (window !== undefined) {
        setShareUrl(window.location.href);
    }
  }, [])

  const handleShare = () => {
    setDialogOpen(true);
  };

  return (
    <>
      <Button
        className="bg-primary-700 mx-4 text-orange-900 font-bold min-w-0 min-h-0 h-auto p-[7px] py-[8px] rounded-[10px]"
        isIconOnly
        onClick={handleShare}
      >
        <IconShare className="w-auto min-w-0" size={18} />
      </Button>

      <Modal isOpen={dialogOpen} onClose={() => setDialogOpen(false)}>
        <ModalContent>
          <ModalHeader>{t("share")}</ModalHeader>
          <ModalBody className="flex w-full flex-wrap flex-row justify-start items-start">
            <div className="Demo__some-network">
              <FacebookShareButton
                url={shareUrl}
                className="Demo__some-network__share-button"
              >
                <FacebookIcon size={32} round />
              </FacebookShareButton>
            </div>

            <div className="Demo__some-network">
              <FacebookMessengerShareButton
                url={shareUrl}
                appId="521270401588372"
              >
                <FacebookMessengerIcon size={32} round />
              </FacebookMessengerShareButton>
            </div>

            <div className="Demo__some-network">
              <TwitterShareButton
                url={shareUrl}
                title={title}
                className="Demo__some-network__share-button"
              >
                <XIcon size={32} round />
              </TwitterShareButton>
            </div>

            <div className="Demo__some-network">
              <TelegramShareButton
                url={shareUrl}
                title={title}
                className="Demo__some-network__share-button"
              >
                <TelegramIcon size={32} round />
              </TelegramShareButton>
            </div>

            <div className="Demo__some-network">
              <WhatsappShareButton
                url={shareUrl}
                title={title}
                separator=":: "
                className="Demo__some-network__share-button"
              >
                <WhatsappIcon size={32} round />
              </WhatsappShareButton>
            </div>

            <div className="Demo__some-network">
              <LinkedinShareButton
                url={shareUrl}
                className="Demo__some-network__share-button"
              >
                <LinkedinIcon size={32} round />
              </LinkedinShareButton>
            </div>

            <div className="Demo__some-network">
              <PinterestShareButton
                url={shareUrl}
                media={props?.imageUrl}
                className="Demo__some-network__share-button"
              >
                <PinterestIcon size={32} round />
              </PinterestShareButton>
            </div>

            <div className="Demo__some-network">
              <VKShareButton
                url={shareUrl}
                image={props.imageUrl}
                className="Demo__some-network__share-button"
              >
                <VKIcon size={32} round />
              </VKShareButton>
            </div>

            <div className="Demo__some-network">
              <OKShareButton
                url={shareUrl}
                image={props?.imageUrl}
                className="Demo__some-network__share-button"
              >
                <OKIcon size={32} round />
              </OKShareButton>
            </div>

            <div className="Demo__some-network">
              <RedditShareButton
                url={shareUrl}
                title={title}
                windowWidth={660}
                windowHeight={460}
                className="Demo__some-network__share-button"
              >
                <RedditIcon size={32} round />
              </RedditShareButton>
            </div>

            <div className="Demo__some-network">
              <GabShareButton
                url={shareUrl}
                title={title}
                windowWidth={660}
                windowHeight={640}
                className="Demo__some-network__share-button"
              >
                <GabIcon size={32} round />
              </GabShareButton>
            </div>

            <div className="Demo__some-network">
              <TumblrShareButton
                url={shareUrl}
                title={title}
                className="Demo__some-network__share-button"
              >
                <TumblrIcon size={32} round />
              </TumblrShareButton>
            </div>

            <div className="Demo__some-network">
              <LivejournalShareButton
                url={shareUrl}
                title={title}
                description={shareUrl}
                className="Demo__some-network__share-button"
              >
                <LivejournalIcon size={32} round />
              </LivejournalShareButton>
            </div>

            <div className="Demo__some-network">
              <MailruShareButton
                url={shareUrl}
                title={title}
                className="Demo__some-network__share-button"
              >
                <MailruIcon size={32} round />
              </MailruShareButton>
            </div>

            <div className="Demo__some-network">
              <EmailShareButton
                url={shareUrl}
                subject={title}
                body="body"
                className="Demo__some-network__share-button"
              >
                <EmailIcon size={32} round />
              </EmailShareButton>
            </div>

            <div className="Demo__some-network">
              <ViberShareButton
                url={shareUrl}
                title={title}
                className="Demo__some-network__share-button"
              >
                <ViberIcon size={32} round />
              </ViberShareButton>
            </div>

            <div className="Demo__some-network">
              <WorkplaceShareButton
                url={shareUrl}
                quote={title}
                className="Demo__some-network__share-button"
              >
                <WorkplaceIcon size={32} round />
              </WorkplaceShareButton>
            </div>

            <div className="Demo__some-network">
              <LineShareButton
                url={shareUrl}
                title={title}
                className="Demo__some-network__share-button"
              >
                <LineIcon size={32} round />
              </LineShareButton>
            </div>

            <div className="Demo__some-network">
              <WeiboShareButton
                url={shareUrl}
                title={title}
                image={props.imageUrl}
                className="Demo__some-network__share-button"
              >
                <WeiboIcon size={32} round />
              </WeiboShareButton>
            </div>

            <div className="Demo__some-network">
              <PocketShareButton
                url={shareUrl}
                title={title}
                className="Demo__some-network__share-button"
              >
                <PocketIcon size={32} round />
              </PocketShareButton>
            </div>

            <div className="Demo__some-network">
              <InstapaperShareButton
                url={shareUrl}
                title={title}
                className="Demo__some-network__share-button"
              >
                <InstapaperIcon size={32} round />
              </InstapaperShareButton>
            </div>

            <div className="Demo__some-network">
              <HatenaShareButton
                url={shareUrl}
                title={title}
                windowWidth={660}
                windowHeight={460}
                className="Demo__some-network__share-button"
              >
                <HatenaIcon size={32} round />
              </HatenaShareButton>
            </div>
          </ModalBody>
        </ModalContent>
      </Modal>
    </>
  );
};


=== ./components/cards/DesignCard.tsx ===
import CardContainer from "@/abstract/CardContainer";
import { Link, truncate } from "@/utils";
import { useLocale, useTranslations } from "next-intl";
import Image from "next/image";
import { Chip } from "@nextui-org/react";

export interface DesignCardProps {
  image: string;
  title: string;
  createdDate: string;
  id: number;
  price?: number;
  description?: string;
  customizable?: boolean;
}

export const DesignCard = ({ image, title, description, price, id, customizable }: DesignCardProps) => {
  const locale = useLocale();
  const t = useTranslations("shop");
  return (
    <CardContainer scissors={false} >
      <Link href={{
        pathname: "/shop/[id]",
        params: {
          id,
        }
      }} locale={locale} prefetch={true}
        className="relative">
        {customizable ? (
                    <Chip
                      className="absolute z-10 left-[10px] top-[10px] text-[10px] rounded-md bg-[#012828] text-white"
                      // variant="primary"
                    >
                      {t("customizable")}
                    </Chip>
                  ) : (
                    <></>
                  )}
      <Image
        unoptimized
        src={image}
        height={164}
        width={164}
        className="aspect-square object-cover w-full rounded-[4px]"
        alt=""
      />

      <Image
        unoptimized
        src={"/assets/images/Border-desktop.png"}
        height={1}
        width={164}
        className="hidden sm:block my-2 w-full"
        alt=""
      />

      <Image
        unoptimized
        src={"/assets/images/Border-mobile.png"}
        width={164}
        height={1}
        className="xs:block sm:hidden my-2 w-full"
        alt=""
      />

      <div className="flex flex-col px-1 py-2">
        <div className="text-secondary text-xl font-medium mb-1 truncate">{title}</div>
        <div className="text-white text-md font-medium my-1">AED {price}</div>
        <div className="text-white text-md font-medium my-1">{truncate(description || "", 40)}</div>
      </div>
      </Link>
    </CardContainer>
  );
}

export const DesignCardSkeleton = () => {

  return (
    <CardContainer scissors={false}>
      <div className="shadow rounded-md p-4 w-full">
        <div className="animate-pulse flex flex-col">
          <div className="bg-slate-700 w-full aspect-square"></div>
          <div className="flex-1 space-y-6 py-1">
            <div className="h-2 bg-slate-700 rounded"></div>
            <div className="space-y-3">
              <div className="grid grid-cols-3 gap-4">
                <div className="h-2 bg-slate-700 rounded col-span-2"></div>
                <div className="h-2 bg-slate-700 rounded col-span-1"></div>
              </div>
              <div className="h-2 bg-slate-700 rounded"></div>
            </div>
          </div>
        </div>
      </div>
    </CardContainer>
  );
}

export default DesignCard;

=== ./components/cards/FabricCard.tsx ===
"use client";
import CardContainer from "@/abstract/CardContainer";
import Image from "next/image";
import { FavoriteButton } from "../buttons/FavouriteButton";
import { motion } from "framer-motion";
import { Link } from "..";
import { useTranslations } from "next-intl";

export const FabricCard = ({
  name,
  image,
  price,
  id,
  preventDefault,
}: {
  preventDefault?: boolean;
  name?: string;
  image?: string;
  price?: number;
  id?: number;
  tailorName?: string;
}) => {

  const t = useTranslations("shop");



  return (
    <motion.div
      whileHover={{ scale: 0.99, filter: "brightness(110%)" }}
      transition={{ duration: 0.2 }}
      className="single-card-solitaire-container xxs:h-[auto] xs:max-w-[270px] xs:h-[250px] small:max-w-[270px] small:h-[250px]  medium:max-w-[270px] medium:h-[270px] large:max-w-[270px] large:h-[250px] overflow-visible cursor-pointer"
    >
      <CardContainer scissors={true}>
        <Link
          onClick={(e) => preventDefault && e.preventDefault()}
          href={{
            pathname: "/shop/fabric/[fabricId]",
            params: { fabricId: id?.toString() || "" },
          }}
          prefetch={true}
          scroll={true}
        >
          <Image
            priority={true}
            unoptimized
            src={image ?? ""}
            width="0"
            height="0"
            sizes="100vw"
            className="w-full h-[150px] object-cover"
            alt=""
          />
          <Image
            priority={true}
            unoptimized
            src="/assets/images/Border-desktop.png"
            className="hidden  mt-2 mb-1 w-[230px] h-[1px]"
            width="0"
            height="0"
            sizes="100vw"
            alt=""
          />
          <Image
            priority={true}
            unoptimized
            src="/assets/images/Border-mobile.png"
            className="mt-2 mb-1 w-full"
            width={230}
            height={150}
            alt=""
          />
          <div className="item-details flex flex-col">
            <div>
              <h3 className="text-base font-medium truncate">{name}</h3>
            </div>
            <div className="flex items-center justify-between mt-5">
              <div className="flex flex-col items-start justify-center w-full">
                <div className="text-base font-medium text-[10px] line-clamp-1">{
                  price ? <>AED {price}</> : <>{t("price_after_confirmation")}</>
                }</div>
              </div>
            </div>
          </div>
        </Link>
      </CardContainer>
    </motion.div>
  );
};

export default FabricCard;


=== ./components/cards/FabricCardHomePage.tsx ===
"use client";
import CardContainer from "@/abstract/CardContainer";
import Image from "next/image";
import { FavoriteButton } from "../buttons/FavouriteButton";
import { motion } from "framer-motion";
import { Link } from "..";
import { useTranslations } from "next-intl";

export const FabricCardHomePage = ({
  name,
  image,
  price,
  id,
  tailorName,
  preventDefault,
}: {
  preventDefault?: boolean;
  name?: string;
  image?: string;
  price?: number;
  id?: number;
  tailorName?: string;
}) => {
  const t = useTranslations("shop");

  return (
    <motion.div
      whileHover={{ scale: 0.99, filter: "brightness(110%)" }}
      transition={{ duration: 0.2 }}
      className="single-card-solitaire-container xs:w-[155px] xs:h-[100%] small:max-w-[270px] small:h-[240px]  medium:max-w-[270px] medium:h-[240px] large:max-w-[290px] large:h-[270px] overflow-visible cursor-pointer"
    >
      <CardContainer scissors={true}>
        <Link
          onClick={(e) => preventDefault && e.preventDefault()}
          href={{
            pathname: "/shop/fabric/[fabricId]",
            params: { fabricId: id?.toString() || "" },
          }}
          prefetch={true}
          scroll={true}
        >
          <Image
            priority={true}
            unoptimized
            src={image ?? ""}
            width="0"
            height="0"
            sizes="100vw"
            className="w-full h-[150px] object-cover"
            alt=""
          />
          <Image
            priority={true}
            unoptimized
            src="/assets/images/Border-desktop.png"
            className="hidden  mt-2 mb-1 w-[230px] h-[1px]"
            width="0"
            height="0"
            sizes="100vw"
            alt=""
          />
          <Image
            priority={true}
            unoptimized
            src="/assets/images/Border-mobile.png"
            className="mt-2 mb-1 w-full"
            width={230}
            height={150}
            alt=""
          />
          <div className="item-details flex flex-col">
            <div>
              <h3 className="text-base font-medium truncate">{name}</h3>
            </div>
            <div>
              <div className="flex flex-col items-start justify-center w-full">
                <div className="text-base font-medium text-[10px] mt-3 line-clamp-1">
                  {price ? <>AED {price}</> : <>{t("price_after_confirmation")}</>}
                </div>
              </div>
            </div>
          </div>
        </Link>
      </CardContainer>
    </motion.div>
  );
};

export default FabricCardHomePage;


=== ./components/cards/HomeBanner.tsx ===
"use client"
import CardContainer from "@/abstract/CardContainer";
import Image from "next/image";
import LinkButton from "../buttons/LinkButton";
import { IconChevronRight } from "@tabler/icons-react";
import { useTranslations } from "next-intl";

interface HomeBannerCardProps {
  image?: string;
  title?: string;
  subtitle?: string;
  link?: string;
}

export const HomeBannerCard = ({image, title, subtitle, link}: HomeBannerCardProps) => {
  const t = useTranslations("home");

  return (
    <>
    <CardContainer scissors={true}>
      <div className="w-full h-full flex items-center justify-center relative">
        <Image priority={true} unoptimized className="w-full h-full xs:min-h-[205px] xs:max-h-[205px] min-h-[390px] max-h-[390px] object-cover" src={image || "/assets/images/banner-1-demo.png"}     width="0"
    height="0"
    sizes="100vw" alt={""}/>
        <div className="w-full h-full absolute top-0 left-0 p-6 flex flex-col items-start justify-end">
        <div className="w-96 md:mb-5">
          <span className="xs:text-3xl text-amber-200 md:text-5xl font-black ">{title}<br className="xs:hidden"/>
          </span><span className="xs:text-3xl xs:ml-2 text-white text-5xl font-black  leading-10">{subtitle}</span>
        </div>
          <LinkButton to={link}  title={t("browse_catalog")} paddingLeft={0} endIcon={<IconChevronRight />}/>
        </div>
      </div>
    </CardContainer>
    </>
  )
}

export default HomeBannerCard;

=== ./components/cards/index.ts ===
export {HomeBannerCard} from "./HomeBanner";
export {SolitaireCard} from "./SolitaireCard";
export {TextCard} from "./TextCard";
export {FabricCard} from "./FabricCard";
export {SmallTextCard} from "./SmallTextCard";
export {SolitaireCardSingle} from "./SolitaireCardSingle";
export {TailorCard} from "./TailorsCard";
export {DesignCard} from "./DesignCard";


=== ./components/cards/SmallTextCard.tsx ===
'use client'
import CardContainer from "@/abstract/CardContainer";
import { motion, useAnimate } from "framer-motion";
import { useLocale } from "next-intl";

interface SmallTextCardProps {
  title?: string;
  description?: string;
  link?: string;
}

export const SmallTextCard = (props: SmallTextCardProps) => {
  const [scope, animate] = useAnimate();
  const locale = useLocale();

  return (
    <motion.div ref={scope} transition={{ duration: 3 }} onHoverStart={() => animate(scope.current, { filter: "drop-shadow(0 0 1.25rem rgba(255, 218, 148, 0.28))" })} onHoverEnd={() => animate(scope.current, { filter: "drop-shadow(0 0 0.75rem rgba(255, 218, 148, 0))"})} className='xs:w-[45vw]'>
      <CardContainer scissors={true}>
        <div  className="w-full flex flex-col justify-center sm:py-3 xs:py-2 xs:w-[auto] cursor-pointer" onClick={() => {
          window.open(props?.link, "_blank");
        }}>
          <span className={`text-secondary ${
          locale === "en" ? "text-left" : "text-right"
        } text-3xl font-medium  sm:my-1`}>{props?.title}</span>
          <div className={`text-[17.96px] ${
          locale === "en" ? "text-left" : "text-right"
        } font-medium font-roboto text-white inline-block`}>{props?.description}</div>
        </div>
      </CardContainer>
    </motion.div>
  )
}

export default SmallTextCard;

=== ./components/cards/SolitaireCard.tsx ===
"use client";
import CardContainer from "@/abstract/CardContainer";
import Image from "next/image";
import { FavoriteButton } from "../buttons/FavouriteButton";
import { Link } from "../../utils/navigation";
import { Rating } from "@smastrom/react-rating";
import "@smastrom/react-rating/style.css";
import { Chip } from "@nextui-org/react";
import { useTranslations } from "next-intl";

export interface SolitaireCardProps {
  maxWidth?: number;
  image?: string;
  title?: string;
  price?: number;
  rating?: number;
  id?: number;
  tailorName?: string;
  customizable?: boolean;
}

export const SolitaireCard = ({
  maxWidth,
  image,
  title,
  price,
  rating,
  id,
  tailorName,
  customizable,
}: SolitaireCardProps) => {
  const t = useTranslations("shop");
  return (
    <div className="h-full">
      <Link
        href={{
          pathname: "/shop/[id]",
          params: { id: id?.toString() || "" },
        }}
        scroll={true}
        prefetch={true}
        className="relative"
      >
        {customizable ? (
          <Chip
            className="absolute z-10 left-[10px] top-[10px] text-[10px] rounded-md bg-[#012828] text-white"
            // color="secondary"
            variant="shadow"
          >
            {t("customizable")}
          </Chip>
        ) : (
          <></>
        )}

        <CardContainer scissors={true}>
          <Image
            priority={true}
            unoptimized
            src={image || ""}
            width="0"
            height="0"
            sizes="100vw"
            style={{ width: "100%", height: 230, objectFit: "cover", maxWidth }}
            alt=""
          />

          <Image
            priority={true}
            unoptimized
            src="/assets/images/Border-desktop.png"
            className={`xs:hidden sm:block mt-2 mb-1 w-[100%] h-[3px]`}
            width="0"
            height="0"
            sizes="100vw"
            style={{ maxWidth }}
            alt=""
          />

          <Image
            priority={true}
            unoptimized
            src="/assets/images/Border-mobile.png"
            className={`xs:block sm:hidden mt-2 mb-1 w-full h-[3px]`}
            width="0"
            height="0"
            sizes="100vw"
            style={{ maxWidth }}
            alt=""
          />

          <div className="item-details flex flex-col p-2 mt-3">
            <div className="Group1000 w-full h-6">
              <div className="text-white text-base font-medium  leading-tight my-1 truncate">
                {title}
              </div>
              <div className="Text w-full left-[105px] top-[6.91px] absolute text-stone-300 text-sm font-normal line-through">
                {/*TODO: fix on discount application */}
              </div>
            </div>

            <div className="my-3 flex items-center">
              <Rating
                value={rating || 0}
                readOnly
                isDisabled
                items={5}
                style={{ maxWidth: "80px" }}
              />
              <div className="ml-2 text-center align-center text-secondary text-md font-normal">
                {rating || 0}
              </div>
            </div>

            <div className="flex">
              <div className="flex flex-col items-start justify-center w-[75%]">
                <div className="text-white text-xl font-semibold">
                  AED {price}
                </div>
                <div className="text-white text-xs font-light  leading-tight my-1 line-clamp-1">
                  {tailorName}
                </div>
              </div>

              <FavoriteButton id={id} />
            </div>
          </div>
        </CardContainer>
      </Link>
    </div>
  );
};

export default SolitaireCard;


=== ./components/cards/SolitaireCardSingle.tsx ===
"use client";
import { motion } from "framer-motion";

import CardContainer from "@/abstract/CardContainer";
import Image from "next/image";
import { FavoriteButton } from "../buttons/FavouriteButton";
import { Link } from "../../utils/navigation";
import { truncate } from "@/utils";
import { useEffect } from "react";
import { Rating } from "@smastrom/react-rating";
import "@smastrom/react-rating/style.css";
import { Chip } from "@nextui-org/react";
import { useLocale, useTranslations } from "next-intl";

export interface SolitaireCardSingleProps {
  maxWidth?: number;
  autWidth?: boolean;
  title?: string;
  image?: string;
  price?: number;
  rating?: number;
  tailorName?: string;
  id?: number;
  query?: any;
  design?: boolean;
  customizable?: boolean;
}

export const SolitaireCardSingle = ({
  maxWidth,
  autWidth,
  title,
  price,
  rating,
  tailorName,
  image,
  id,
  query,
  design,
  customizable,
}: SolitaireCardSingleProps) => {
  const t = useTranslations("shop");

  const locale = useLocale();

  return (
    <motion.div
      whileHover={{ scale: 0.99, filter: "brightness(110%)" }}
      transition={{ duration: 0.2 }}
      className={`single-card-solitaire-container ${autWidth ? "w-[100%]" : "xs:w-[45vw]"} xs:h-max-[280px] sm:w-[250px]  overflow-visible h-min-[580px]`}
    >
      <CardContainer scissors={true}>
        <Link
          href={{
            pathname: design ? "/shop/design/[id]" : "/shop/[id]",
            params: { id: id?.toString() || "" },
            query: query ? query : {},
          }}
          scroll={true}
          prefetch={true}
          className="relative"
        >
          {customizable ? <Chip className={`absolute z-10 ${locale === "en" ? 'left-[10px]' : 'right-[10px]'} top-[10px] text-[10px] rounded-md bg-[#012828] text-white`} variant="shadow">{t("customizable")}</Chip> :  <></>}
          <Image
            priority={true}
            unoptimized
            src={image || ""}
            width="0"
            height="0"
            sizes="100vw"
            className={` ${
              autWidth ? "w-[100%]" : "xs:w-[45vw]"
            } xs:h-[164px] object-cover sm:h-[230px] sm:w-full`}
            style={{ maxWidth }}
            alt=""
          />

          <Image
            priority={true}
            unoptimized
            src="/assets/images/Border-desktop.png"
            className={`xs:hidden sm:block mt-2 mb-1 w-[100%] h-[3px]`}
            width="0"
            height="0"
            sizes="100vw"
            style={{ maxWidth }}
            alt=""
          />

          <Image
            priority={true}
            unoptimized
            src="/assets/images/Border-mobile.png"
            className={`sm:hidden xs:block mt-2 mb-1 w-[100%] h-[3px]`}
            width="0"
            height="0"
            sizes="100vw"
            style={{ maxWidth }}
            alt=""
          />

          <div className="item-details flex flex-col p-2 mt-3">
            <div className="Group1000 w-full h-6 relative">
              <div className="text-white xs:text-[12px] sm:text-base font-medium  my-1 truncate">
                {title}
              </div>
              {/* <div className="Text w-full sm:left-[105px] sm:top-[6.91px] absolute text-stone-300 text-sm font-normal font-['Inter'] line-through">AED 1128.00</div> */}
            </div>

            <div className="my-3 flex items-center">
              <Rating
                value={rating || 0}
                readOnly
                isDisabled
                items={5}
                style={{ maxWidth: "80px" }}
              />
              <div className="ml-2 text-center align-center text-secondary text-md font-normal font-['Inter']">
                {rating || 0}
              </div>
            </div>

            <div className="flex items-center justify-between">
              <div className="flex flex-col items-start justify-center w-[75%]">
                <div className="left-0 top-0 text-white xs:text-m  sm:text-xl font-semibold font-['Inter']">
                  AED {price}
                </div>
                <div className="text-white xs:text-[9px] sm:text-xs font-light   my-1">
                  {truncate(tailorName || "", 20)}
                </div>
              </div>

              <FavoriteButton id={id} />
            </div>
          </div>
        </Link>
      </CardContainer>
    </motion.div>
  );
};

export default SolitaireCardSingle;


=== ./components/cards/TailorsCard.tsx ===
'use client'
import CardContainer from "@/abstract/CardContainer";
import { Button } from "@nextui-org/react";
import Image from "next/image";
import { useRouter } from "..";
import { truncate } from "@/utils";
import { Rating } from 'react-simple-star-rating'
import { IconChevronDown } from "@tabler/icons-react";
import { useTranslations } from "next-intl";

interface TailorCardProps {
  image: string;
  name: string;
  description?: string;
  rating?: number;
  id?: number;
  availability?: string;
  orders?: number;
  customJourney?: boolean;
  query?: any;
  params?: any;
}

export const TailorCard = ({ image, name, description, rating, id, availability, orders, customJourney, query, params }: TailorCardProps) => {

  const router = useRouter();
  const t = useTranslations("shop");

  const onTailorClick = () => {
    if (customJourney) {
      router.push({
        pathname: "/custom/journey/[fabricId]/design",
        params: {
          fabricId: params.fabricId,
        },
        query: {
          ...query,
          tailorId: id?.toString() || "",
        },
      })

      return;
    }
    router.prefetch({
      pathname: "/shop/tailors/[tailorId]",
      params: {
        tailorId: id?.toString() || "",
      }
    });

    router.push({
      pathname: "/shop/tailors/[tailorId]",
      params: {
        tailorId: id?.toString() || "",
      }
    })
  }

  return (
    <CardContainer scissors={false}>
      <article onClick={onTailorClick} className="cursor-pointer grid-col-1 min-h-[230px] h-auto md:px-7 md:py-6 xs:px-2 xs:py-2 flex flex-row items-center justify-start">

        <Image priority={true} unoptimized src={image} width={200} height={185}  className="xs:min-h-[200px] xs:min-w-[162px] md:max-h-[184px] md:min-h-[184px] md:min-w-[202px]" alt="" style={{ objectFit: "cover", height: "100%", borderRadius: 12 }} />

        <div className="details flex flex-col mx-4 justify-center items-start">
          <h1 className="w-full break-word xs:text-[12px] md:text-[15px] font-medium font-roboto text-secondary inline-block w-[330.96px]">{name}</h1>

          <div className="xs:my-1 my-2"></div>

          <div className="flex flex-row items-center flex-wrap xs:w-[55%]">
          <Rating allowHover={false} emptyStyle={{display: "flex"}} size={18} disableFillHover={true} iconsCount={5} />
          {/* <Rating emptyStyle={{display: "flex"}} size={18} disableFillHover={true} iconsCount={5} /> */}
            <p className="text-secondary xs:text-[12px] text-[14px] text-center ml-2 font-roboto">{rating}</p>

            <div className="md:hidden basis-full my-1"></div>

            <span className="flex justify-center items-center mx-2 xs:hidden">
              <svg xmlns="http://www.w3.org/2000/svg" width="8" height="6" viewBox="0 0 8 6" fill="none">
                <ellipse cx="4.17334" cy="3" rx="3.28272" ry="3" fill="#DEE2E7" />
              </svg>
            </span>

            {/* <p className="text-caption xs:text-[12px]">{orders || 0} {t("orders")}</p>

            <span className="flex justify-center items-center mx-2">
              <svg xmlns="http://www.w3.org/2000/svg" width="8" height="6" viewBox="0 0 8 6" fill="none">
                <ellipse cx="4.17334" cy="3" rx="3.28272" ry="3" fill="#DEE2E7" />
              </svg>
            </span>

            <p className="text-white xs:text-[12px] text-[16px]">{availability}</p> */}
          </div>

          <div className="xs:my-1 my-2"></div>

          <p className="text-white xs:text-[12px] text-[16px] xs:hidden block word-break line-break">{truncate(description || "", 100)}</p>
          <p className="text-white xs:text-[12px] text-[16px] xs:block hidden line-clamp-2">{truncate(description || "", 75)}</p>

          <div className="xs:my-1 my-2"></div>
          {/* <Button onClick={() => setCreateSizeProfileDialogOpen(true)} className="">Add New <IconPlus size={18} /></Button> */}
          <Button onClick={onTailorClick} className="bg-secondary-800 rounded-md text-primary-900">{t("view_designs")} <span className="xs:text-[12px] text-[15px] p-0"><IconChevronDown /></span> </Button>
        </div>
      </article>
    </CardContainer>
  )
}

export default TailorCard;

=== ./components/cards/TextCard.tsx ===
"use client";
import CardContainer from "@/abstract/CardContainer";
import PrimaryButton from "../buttons/PrimaryButton";
import LinkButton from "../buttons/LinkButton";
import { motion } from "framer-motion";
import { IconChevronRight } from "@tabler/icons-react";
import { useRouter } from "..";
import { useTranslations } from "next-intl";
import { useAuth } from "@/provider/AuthContext";

interface TextCardProps {
  firstWord?: string;
  title?: string;
  description?: string;
  background?: string;
  actions: {
    id?: number | undefined;
    type?: "primary" | "secondary" | "link" | undefined;
    link?: any | undefined;
    title?: string | undefined;
    requiresAuth?: boolean | undefined;
  }[];
}
export const TextCard = ({
  title,
  description,
  actions,
  firstWord,
  background,
}: TextCardProps) => {
  const router = useRouter();
  const t = useTranslations("shop");

  const ctx = useAuth();

  return (
    <motion.div
      className="w-full h-full"
      whileHover={{ scale: 0.99, filter: "brightness(110%)" }}
      transition={{ duration: 0.2 }}
      style={{
        backgroundImage: background ? `url(${background})` : "unset",
      }}
    >
      <CardContainer transparentBg={true} scissors={true}>
        <div className="w-full h-full flex items-center justify-center py-20 px-4 large:py-0">
          <div className="xs:text-center sm:text-start">
            <div>
              <span className="xs:text-4xl sm:text-6xl text-secondary font-black ">
                {firstWord}
              </span>
              <span className="xs:text-4xl sm:text-6xl text-white font-black "> {title}</span>
            </div>
            <h2 className="text-caption my-5 md:text-xl font-caption ">{description}</h2>
            <div className="lg:mt-5 flex xs:justify-center justify-start align-center">
              {actions?.length > 0 &&
                actions.map((item, index) =>
                  item.type === "link" ? (
                    <div
                      className="flex justify-center items-center"
                      key={`button-link-${index}`}
                    >
                      {index > 0 ? <div className="xs:mx-3 sm:mx-1 inline"></div> : null}{" "}
                      <LinkButton
                        key={`text-card-button-${index}`}
                        to={item.requiresAuth && !ctx.isAuthenticated ? "/login" : item.link}
                        title={item.title || ""}
                        endIcon={<IconChevronRight />}
                      />{" "}
                    </div>
                  ) : (
                    <div
                      className="flex justify-center items-center"
                      key={`button-not-link-${index}`}
                    >
                      {index > 0 ? <div className="xs:mx-3 sm:mx-1 inline"></div> : null}{" "}
                      <PrimaryButton
                        onClick={() =>
                          router.push(
                            (item.requiresAuth || item?.link?.match(/custom-mekhwar/ig)?.length > 0) && !ctx.isAuthenticated ? "/login" : item.link
                          )
                        }
                        title={item.title || ""}
                      />{" "}
                    </div>
                  )
                )}
            </div>
          </div>
        </div>
      </CardContainer>
    </motion.div>
  );
};

export default TextCard;


=== ./components/input/mobile-input.tsx ===
'use client'
import { Input } from "@nextui-org/input";
import { Autocomplete, AutocompleteItem, Select, SelectItem } from "@nextui-org/react";
import React, { useEffect, useState } from "react";
import * as countries from 'countries-list';

function getFlags($code: string){
  if($code == 'AD') return '🇦🇩';
  if($code == 'AE') return '🇦🇪';
  if($code == 'AF') return '🇦🇫';
  if($code == 'AG') return '🇦🇬';
  if($code == 'AI') return '🇦🇮';
  if($code == 'AL') return '🇦🇱';
  if($code == 'AM') return '🇦🇲';
  if($code == 'AO') return '🇦🇴';
  if($code == 'AQ') return '🇦🇶';
  if($code == 'AR') return '🇦🇷';
  if($code == 'AS') return '🇦🇸';
  if($code == 'AT') return '🇦🇹';
  if($code == 'AU') return '🇦🇺';
  if($code == 'AW') return '🇦🇼';
  if($code == 'AX') return '🇦🇽';
  if($code == 'AZ') return '🇦🇿';
  if($code == 'BA') return '🇧🇦';
  if($code == 'BB') return '🇧🇧';
  if($code == 'BD') return '🇧🇩';
  if($code == 'BE') return '🇧🇪';
  if($code == 'BF') return '🇧🇫';
  if($code == 'BG') return '🇧🇬';
  if($code == 'BH') return '🇧🇭';
  if($code == 'BI') return '🇧🇮';
  if($code == 'BJ') return '🇧🇯';
  if($code == 'BL') return '🇧🇱';
  if($code == 'BM') return '🇧🇲';
  if($code == 'BN') return '🇧🇳';
  if($code == 'BO') return '🇧🇴';
  if($code == 'BQ') return '🇧🇶';
  if($code == 'BR') return '🇧🇷';
  if($code == 'BS') return '🇧🇸';
  if($code == 'BT') return '🇧🇹';
  if($code == 'BV') return '🇧🇻';
  if($code == 'BW') return '🇧🇼';
  if($code == 'BY') return '🇧🇾';
  if($code == 'BZ') return '🇧🇿';
  if($code == 'CA') return '🇨🇦';
  if($code == 'CC') return '🇨🇨';
  if($code == 'CD') return '🇨🇩';
  if($code == 'CF') return '🇨🇫';
  if($code == 'CG') return '🇨🇬';
  if($code == 'CH') return '🇨🇭';
  if($code == 'CI') return '🇨🇮';
  if($code == 'CK') return '🇨🇰';
  if($code == 'CL') return '🇨🇱';
  if($code == 'CM') return '🇨🇲';
  if($code == 'CN') return '🇨🇳';
  if($code == 'CO') return '🇨🇴';
  if($code == 'CR') return '🇨🇷';
  if($code == 'CU') return '🇨🇺';
  if($code == 'CV') return '🇨🇻';
  if($code == 'CW') return '🇨🇼';
  if($code == 'CX') return '🇨🇽';
  if($code == 'CY') return '🇨🇾';
  if($code == 'CZ') return '🇨🇿';
  if($code == 'DE') return '🇩🇪';
  if($code == 'DJ') return '🇩🇯';
  if($code == 'DK') return '🇩🇰';
  if($code == 'DM') return '🇩🇲';
  if($code == 'DO') return '🇩🇴';
  if($code == 'DZ') return '🇩🇿';
  if($code == 'EC') return '🇪🇨';
  if($code == 'EE') return '🇪🇪';
  if($code == 'EG') return '🇪🇬';
  if($code == 'EH') return '🇪🇭';
  if($code == 'ER') return '🇪🇷';
  if($code == 'ES') return '🇪🇸';
  if($code == 'ET') return '🇪🇹';
  if($code == 'FI') return '🇫🇮';
  if($code == 'FJ') return '🇫🇯';
  if($code == 'FK') return '🇫🇰';
  if($code == 'FM') return '🇫🇲';
  if($code == 'FO') return '🇫🇴';
  if($code == 'FR') return '🇫🇷';
  if($code == 'GA') return '🇬🇦';
  if($code == 'GB') return '🇬🇧';
  if($code == 'GD') return '🇬🇩';
  if($code == 'GE') return '🇬🇪';
  if($code == 'GF') return '🇬🇫';
  if($code == 'GG') return '🇬🇬';
  if($code == 'GH') return '🇬🇭';
  if($code == 'GI') return '🇬🇮';
  if($code == 'GL') return '🇬🇱';
  if($code == 'GM') return '🇬🇲';
  if($code == 'GN') return '🇬🇳';
  if($code == 'GP') return '🇬🇵';
  if($code == 'GQ') return '🇬🇶';
  if($code == 'GR') return '🇬🇷';
  if($code == 'GS') return '🇬🇸';
  if($code == 'GT') return '🇬🇹';
  if($code == 'GU') return '🇬🇺';
  if($code == 'GW') return '🇬🇼';
  if($code == 'GY') return '🇬🇾';
  if($code == 'HK') return '🇭🇰';
  if($code == 'HM') return '🇭🇲';
  if($code == 'HN') return '🇭🇳';
  if($code == 'HR') return '🇭🇷';
  if($code == 'HT') return '🇭🇹';
  if($code == 'HU') return '🇭🇺';
  if($code == 'ID') return '🇮🇩';
  if($code == 'IE') return '🇮🇪';
  if($code == 'IL') return '🇮🇱';
  if($code == 'IM') return '🇮🇲';
  if($code == 'IN') return '🇮🇳';
  if($code == 'IO') return '🇮🇴';
  if($code == 'IQ') return '🇮🇶';
  if($code == 'IR') return '🇮🇷';
  if($code == 'IS') return '🇮🇸';
  if($code == 'IT') return '🇮🇹';
  if($code == 'JE') return '🇯🇪';
  if($code == 'JM') return '🇯🇲';
  if($code == 'JO') return '🇯🇴';
  if($code == 'JP') return '🇯🇵';
  if($code == 'KE') return '🇰🇪';
  if($code == 'KG') return '🇰🇬';
  if($code == 'KH') return '🇰🇭';
  if($code == 'KI') return '🇰🇮';
  if($code == 'KM') return '🇰🇲';
  if($code == 'KN') return '🇰🇳';
  if($code == 'KP') return '🇰🇵';
  if($code == 'KR') return '🇰🇷';
  if($code == 'KW') return '🇰🇼';
  if($code == 'KY') return '🇰🇾';
  if($code == 'KZ') return '🇰🇿';
  if($code == 'LA') return '🇱🇦';
  if($code == 'LB') return '🇱🇧';
  if($code == 'LC') return '🇱🇨';
  if($code == 'LI') return '🇱🇮';
  if($code == 'LK') return '🇱🇰';
  if($code == 'LR') return '🇱🇷';
  if($code == 'LS') return '🇱🇸';
  if($code == 'LT') return '🇱🇹';
  if($code == 'LU') return '🇱🇺';
  if($code == 'LV') return '🇱🇻';
  if($code == 'LY') return '🇱🇾';
  if($code == 'MA') return '🇲🇦';
  if($code == 'MC') return '🇲🇨';
  if($code == 'MD') return '🇲🇩';
  if($code == 'ME') return '🇲🇪';
  if($code == 'MF') return '🇲🇫';
  if($code == 'MG') return '🇲🇬';
  if($code == 'MH') return '🇲🇭';
  if($code == 'MK') return '🇲🇰';
  if($code == 'ML') return '🇲🇱';
  if($code == 'MM') return '🇲🇲';
  if($code == 'MN') return '🇲🇳';
  if($code == 'MO') return '🇲🇴';
  if($code == 'MP') return '🇲🇵';
  if($code == 'MQ') return '🇲🇶';
  if($code == 'MR') return '🇲🇷';
  if($code == 'MS') return '🇲🇸';
  if($code == 'MT') return '🇲🇹';
  if($code == 'MU') return '🇲🇺';
  if($code == 'MV') return '🇲🇻';
  if($code == 'MW') return '🇲🇼';
  if($code == 'MX') return '🇲🇽';
  if($code == 'MY') return '🇲🇾';
  if($code == 'MZ') return '🇲🇿';
  if($code == 'NA') return '🇳🇦';
  if($code == 'NC') return '🇳🇨';
  if($code == 'NE') return '🇳🇪';
  if($code == 'NF') return '🇳🇫';
  if($code == 'NG') return '🇳🇬';
  if($code == 'NI') return '🇳🇮';
  if($code == 'NL') return '🇳🇱';
  if($code == 'NO') return '🇳🇴';
  if($code == 'NP') return '🇳🇵';
  if($code == 'NR') return '🇳🇷';
  if($code == 'NU') return '🇳🇺';
  if($code == 'NZ') return '🇳🇿';
  if($code == 'OM') return '🇴🇲';
  if($code == 'PA') return '🇵🇦';
  if($code == 'PE') return '🇵🇪';
  if($code == 'PF') return '🇵🇫';
  if($code == 'PG') return '🇵🇬';
  if($code == 'PH') return '🇵🇭';
  if($code == 'PK') return '🇵🇰';
  if($code == 'PL') return '🇵🇱';
  if($code == 'PM') return '🇵🇲';
  if($code == 'PN') return '🇵🇳';
  if($code == 'PR') return '🇵🇷';
  if($code == 'PS') return '🇵🇸';
  if($code == 'PT') return '🇵🇹';
  if($code == 'PW') return '🇵🇼';
  if($code == 'PY') return '🇵🇾';
  if($code == 'QA') return '🇶🇦';
  if($code == 'RE') return '🇷🇪';
  if($code == 'RO') return '🇷🇴';
  if($code == 'RS') return '🇷🇸';
  if($code == 'RU') return '🇷🇺';
  if($code == 'RW') return '🇷🇼';
  if($code == 'SA') return '🇸🇦';
  if($code == 'SB') return '🇸🇧';
  if($code == 'SC') return '🇸🇨';
  if($code == 'SD') return '🇸🇩';
  if($code == 'SE') return '🇸🇪';
  if($code == 'SG') return '🇸🇬';
  if($code == 'SH') return '🇸🇭';
  if($code == 'SI') return '🇸🇮';
  if($code == 'SJ') return '🇸🇯';
  if($code == 'SK') return '🇸🇰';
  if($code == 'SL') return '🇸🇱';
  if($code == 'SM') return '🇸🇲';
  if($code == 'SN') return '🇸🇳';
  if($code == 'SO') return '🇸🇴';
  if($code == 'SR') return '🇸🇷';
  if($code == 'SS') return '🇸🇸';
  if($code == 'ST') return '🇸🇹';
  if($code == 'SV') return '🇸🇻';
  if($code == 'SX') return '🇸🇽';
  if($code == 'SY') return '🇸🇾';
  if($code == 'SZ') return '🇸🇿';
  if($code == 'TC') return '🇹🇨';
  if($code == 'TD') return '🇹🇩';
  if($code == 'TF') return '🇹🇫';
  if($code == 'TG') return '🇹🇬';
  if($code == 'TH') return '🇹🇭';
  if($code == 'TJ') return '🇹🇯';
  if($code == 'TK') return '🇹🇰';
  if($code == 'TL') return '🇹🇱';
  if($code == 'TM') return '🇹🇲';
  if($code == 'TN') return '🇹🇳';
  if($code == 'TO') return '🇹🇴';
  if($code == 'TR') return '🇹🇷';
  if($code == 'TT') return '🇹🇹';
  if($code == 'TV') return '🇹🇻';
  if($code == 'TW') return '🇹🇼';
  if($code == 'TZ') return '🇹🇿';
  if($code == 'UA') return '🇺🇦';
  if($code == 'UG') return '🇺🇬';
  if($code == 'UM') return '🇺🇲';
  if($code == 'US') return '🇺🇸';
  if($code == 'UY') return '🇺🇾';
  if($code == 'UZ') return '🇺🇿';
  if($code == 'VA') return '🇻🇦';
  if($code == 'VC') return '🇻🇨';
  if($code == 'VE') return '🇻🇪';
  if($code == 'VG') return '🇻🇬';
  if($code == 'VI') return '🇻🇮';
  if($code == 'VN') return '🇻🇳';
  if($code == 'VU') return '🇻🇺';
  if($code == 'WF') return '🇼🇫';
  if($code == 'WS') return '🇼🇸';
  if($code == 'XK') return '🇽🇰';
  if($code == 'YE') return '🇾🇪';
  if($code == 'YT') return '🇾🇹';
  if($code == 'ZA') return '🇿🇦';
  if($code == 'ZM') return '🇿🇲';
  return '🏳';
}

interface ThemeInputProps {
  value?: string;
  color?: string;
  label?: string;
  type?: "email" | "text" | "password" | "number";
  endItem?: any;
  placeholder?: string;
  className?: string;
  radius?: string;
  smaller?: boolean;
  classNames?: {
    inputWrapper?: string[];
    label?: string[];
  };
  errorMessage?: string;
  countryCodeErrorMessage?: string;
  countryCodeExtras?: any;
  countryCodeLabel?: string;
  extras?: any;
  onChange?: () => void;
  onFocus?: () => void;
  onBlur?: () => void;
  onKeyDown?: () => void;
  onKeyUp?: () => void;
  onEnter?: () => void;
  onClear?: () => void;
  onPaste?: () => void;
  onCountryChange?: (e?: any) => void;
  countryCodeValue?: string;
  control?: any
  onSelectionChange?: (e?: any) => void;
}

export const MobileInput = (props: ThemeInputProps) => {
  const [countryList, setCountryList] = useState<any[]>([]);
  const [countryLabels, setCountryLabels] = useState<any>({});

  useEffect(() => {
    loadData();
  }, []);

  const loadData = () => {
    let a: any[] = [];
    const obj: any = {};
    countries.getCountryDataList().forEach((item: any) => {
      obj[`${countries.getEmojiFlag(item?.iso2)} +${item.phone?.[0]}`] = item?.name;
      a.push({ code: item?.phone?.[0], value: item?.iso2, label: item.name, flag: countries.getEmojiFlag(item?.iso2) })
    });
    setCountryList(a);
    setCountryLabels(obj);
  }

  const className = "bg-primary-800 rounded-xl xs:rounded-md focus:outline-none";
  const classnames = {
    inputWrapper: [
      "text-white border-primary-800",
      "bg-transparent active:bg-primary-800",
      "data-[hover=true]:bg-primary-800 data-[hover=true]:border-primary",
      "data-[focus=true]:bg-primary-800",
      "group[data-fucus=true]:bg-primary-800",
      "group-data-[focus=true]:bg-primary-800",
      "group-data-[hover=true]:bg-primary-800"
    ],
    label: [
      "text-white/50",
      "xs:text-[12px]",
    ],
    input: [
      "[appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
    ]
  };

  const myFilter = (textValue: any, inputValue: any) => {
    if (inputValue.length === 0) {
      return true;
    }
    
    const cnt = countryLabels[textValue];
    //remove space
    return cnt?.toLowerCase()?.includes(inputValue.toLowerCase());
    return true;
  };

  const a = () =>       <Select
  color="secondary"
  label={props.label}
  className={className + ` ${props?.smaller ? "col-span-3" : "col-span-1"}`}
  radius="lg"
  size="sm"
  classNames={classnames}
  variant="bordered"
  isInvalid={props?.countryCodeErrorMessage ? true : false}
  errorMessage={props?.countryCodeErrorMessage ? props?.countryCodeErrorMessage : ""}
  {...props?.countryCodeExtras}
  onChange={(e: any, a: any) => {
    if (props?.onCountryChange) {
      props?.onCountryChange(e?.target?.value?.replace(/\-[0-9].*/, ""));
    }
    e.target.value = e?.target?.value?.replace(/\-[0-9].*/, "");
    props?.countryCodeExtras?.onChange(e);
  }}
  defaultSelectedKeys={props?.countryCodeValue ? [props?.countryCodeValue] : null}
>
  {
    countryList?.map((item, index) => {
      return <SelectItem textValue={item.flag + " +" + item.code} value={item?.value} key={`${item?.value}`}>{item?.flag} {" +" + item.code}</SelectItem>
    })
  }
</Select>

  return (
    <div className={`grid ${props?.smaller ? "grid-cols-8" : "grid-cols-4"} gap-4 w-full`}>

      <input type="hidden" {...props?.countryCodeExtras} value={props?.countryCodeValue} />

      <Autocomplete
        color="secondary"
        label={props?.countryCodeLabel}
        className={className + ` ${props?.smaller ? "col-span-3" : "col-span-1"}`}
        radius="lg"
        size="sm"
        variant="bordered"
        //@ts-ignore
        classNames={classnames}
        defaultFilter={myFilter}
        value={props?.countryCodeValue}
        defaultSelectedKey={props?.countryCodeValue}
        isInvalid={props?.countryCodeErrorMessage ? true : false}
        errorMessage={props?.countryCodeErrorMessage ? props?.countryCodeErrorMessage : ""}

        onSelectionChange={(e: any) => {
          if (props?.onCountryChange) {
            props?.countryCodeExtras?.onChange({ target: { name: props.countryCodeExtras.name, value: !e ? e : countries?.getCountryData(e)?.phone[0] } });
            props?.onCountryChange(e);
          }
        }}

        // onInputChange={function(e: any){
        //   console.log("on input change: ", e);
        //   if (props?.onCountryChange) {
        //     props?.onCountryChange("AE");
        //   }
        //   props?.countryCodeExtras?.onChange({
        //     target: {
        //       name: "countryCode",
        //       value: e.match(/\+[0-9]+/)?.[0]
        //     }
        //   });
        // }}
      >
        {
          countryList?.map((item, index) => {
            return <AutocompleteItem textValue={getFlags(item.value) + " +" + item.code} value={item?.value} key={`${item?.value}`}>{getFlags(item.value)} {" +" + item.code}</AutocompleteItem>
          })
        }
      </Autocomplete>

      

      <Input
        color="secondary"
        label={props.label || "Mobile number"}
        type={"number"}
        size="sm"
        placeholder={props.placeholder}
        className={className + " col-span-5"}
        radius="lg"
        classNames={classnames}
        variant="bordered"
        isInvalid={props?.errorMessage ? true : false}
        errorMessage={props?.errorMessage}
        {...props?.extras}
        defaultValue={props?.value}
      />
    </div>
  );
}

=== ./components/input/theme-input.tsx ===
"use client";
import { Input } from "@nextui-org/input";
import { IconEye, IconEyeClosed } from "@tabler/icons-react";
import React from "react";

function isNumberKey(evt: any) {
  var charCode = evt?.which ? evt.which : evt.keyCode;
  if ((charCode >= 48 && charCode <=57) || (charCode >= 96 && charCode <=105) || charCode == 8) {
    return true
  }
  return evt.preventDefault();;
}

interface ThemeInputProps {
  value?: string | number;
  value2?: number;
  color?: string;
  label?: string;
  max?: number;
  maxLength?: number;
  type?: "email" | "text" | "password" | "number";
  endItem?: any;
  placeholder?: string;
  className?: string;
  radius?: string;
  name?: string;
  errorMessage?: string;
  classNames?: {
    inputWrapper?: string[];
    label?: string[];
  };
  step?: any;
  extras?: any;
  disabled?: boolean;
  custom?: boolean;
  onChange?: (e: any) => void;
  onFocus?: () => void;
  onBlur?: () => void;
  onKeyDown?: () => void;
  onKeyUp?: () => void;
  onEnter?: () => void;
  onClear?: () => void;
  onPaste?: () => void;
  allowOnlyNumbers?: boolean;
}
export const ThemeInput = (props: ThemeInputProps) => {
  const [isVisible, setIsVisible] = React.useState(false);
  const toggleVisibility = () => setIsVisible(!isVisible);
  const className =
    "bg-primary-800 rounded-xl xs:rounded-md focus:outline-none";
  const classnames = {
    inputWrapper: [
      "h-[48px]",
      "text-white border-primary-800",
      "bg-transparent active:bg-primary-800",
      "data-[hover=true]:bg-primary-800 data-[hover=true]:border-primary",
      "data-[focus=true]:bg-primary-800",
      "group[data-fucus=true]:bg-primary-800",
      "group-data-[focus=true]:bg-primary-800",
      "group-data-[hover=true]:bg-primary-800",
      props?.classNames?.inputWrapper?.length
        ? props.classNames!.inputWrapper
        : "",
    ],
    label: ["text-white/50", "xs:text-[12px]"],
  };
  return (
    <>
      <Input
        color="secondary"
        {...(props.disabled && { disabled: props.disabled })}
        variant="bordered"
        label={props.label}
        type={
          props.type === "password"
            ? isVisible
              ? "text"
              : "password"
            : props.type
        }
        onChange={props.onChange}
        placeholder={props.placeholder}
        className={className}
        radius="lg"
        name={props?.name}
        size="sm"
        step={props?.step || "any"}
        classNames={classnames}
        {...props?.extras}
        errorMessage={props?.errorMessage}
        isInvalid={props?.errorMessage ? true : false}
        defaultValue={props?.value}
        {...(props.custom && { value: props.value2 })}
        onKeyDown={props?.allowOnlyNumbers ? isNumberKey : undefined}
        endContent={
          props?.type === "password" ? (
            <button
              className="focus:outline-none"
              type="button"
              onClick={toggleVisibility}
            >
              {isVisible ? (
                <IconEye className="text-[20px] text-secondary pointer-events-none" />
              ) : (
                <IconEyeClosed className="text-[20px] text-secondary pointer-events-none" />
              )}
            </button>
          ) : props.endItem ? (
            props.endItem
          ) : null
        }
        maxLength={props?.maxLength}
        max={props?.max}
        aria-label={props?.label || "input"}
      />
    </>
  );
};


=== ./components/input/theme-select.tsx ===
'use client'
import { Input } from "@nextui-org/input";
import { Select, SelectItem } from "@nextui-org/react";
import { IconEye, IconEyeClosed } from "@tabler/icons-react";
import React from "react";

interface ThemeInputProps {
  value?: string;
  color?: string;
  label?: string;
  type?: "email" | "text" | "password" | "number";
  endItem?: any;
  placeholder?: string;
  className?: string;
  radius?: string;
  name?: string;
  errorMessage?: string;
  classNames?: {
    inputWrapper?: string[];
    label?: string[];
    trigger?: string[];
  };
  extras?: any;
  onChange?: (e: any) => void;
  onFocus?: () => void;
  onBlur?: () => void;
  onKeyDown?: () => void;
  onKeyUp?: () => void;
  onEnter?: () => void;
  onClear?: () => void;
  onPaste?: () => void;
  items?: {label: string; value: string}[]
}
const ThemeSelect = (props: ThemeInputProps) => {
  const [isVisible, setIsVisible] = React.useState(false);
  const toggleVisibility = () => setIsVisible(!isVisible);
  const className = "bg-primary-800 rounded-xl xs:rounded-md focus:outline-none";
  const classnames = {
    inputWrapper: [
      "h-[48px]",
      "text-white border-primary-800",
      "bg-transparent active:bg-primary-800",
      "data-[hover=true]:bg-primary-800 data-[hover=true]:border-primary",
      "data-[focus=true]:bg-primary-800",
      "group[data-fucus=true]:bg-primary-800",
      "group-data-[focus=true]:bg-primary-800",
      "group-data-[hover=true]:bg-primary-800",
      props?.classNames?.inputWrapper?.length ? props.classNames!.inputWrapper : ""
    ],
    label: [
      "text-white/50",
      "xs:text-[12px]",
    ],
    mainWrapper: [
        "border-secondary"
    ],
    trigger: [
        "text-white border-primary-800",
        "bg-transparent active:bg-primary-800",
        "data-[hover=true]:bg-primary-800 data-[hover=true]:border-primary",
        "data-[focus=true]:bg-primary-800",
        "group[data-fucus=true]:bg-primary-800",
        "group-data-[focus=true]:bg-primary-800",
        "group-data-[hover=true]:bg-primary-800",
        props?.classNames?.trigger?.length ? props.classNames?.trigger : ""
    ],
    value: ["text-white"]
  };
  return (
    <>
    <Select 
      color="secondary"
      variant="bordered"
      label={props.label}
      type={props.type === "password" ? (isVisible ? "text" : "password") : props.type}
      // onChange={props.onChange}
      placeholder={props.placeholder}
      className={className}
      radius="lg"
      name={props?.name}
      classNames={classnames}
      {...props?.extras}
      errorMessage={props?.errorMessage}
      isInvalid={props?.errorMessage ? true : false}
      items={props?.items}
      defaultSelectedKeys={props?.value ? [props?.value] : null}
    >
        {
            props.items ? props.items.map((item: any) => <SelectItem key={item.value} value={item.value}>{item.label}</SelectItem>) : null
        }
    </Select>
    </>
  );
}

export default ThemeSelect;

=== ./components/layout/Footer.tsx ===
import Image from "next/image";
import { Link } from "..";
import { IconBrandFacebook, IconBrandInstagram, IconBrandTiktok, IconBrandX } from "@tabler/icons-react";
import { getFooter } from "@/provider";
import Link2 from "next/link";
import { getLocale } from "next-intl/server";

async function getData(props: any) {
  const locale = await getLocale();

  try {
    const { data, error } = await getFooter(locale);
    
    if (error) throw error;

    return data;
  } catch (err) {
    // return err;
  }
}

export const Footer = async (props: any) => {

  const footerData = await getData(props);
  return (
    <div className="w-full sm:min-h-[450px] xs:min-h-[750px] bg-primary-800 xs:mt-12 gap-[24px] px-[12.4vw] py-[11vh]">
      {/* div with width main */}
      <div className="w-full max-w-main xs:py-0 grid sm:grid-cols-3 sm:gap-5 sm:items-space-between">

        <div className="sm:px-3 space-y-2 flex flex-col justify-between items-start leading-[23.9px] sm:text-start xs:text-center">
          <div className="flex flex-col justify-start sm:items-start xs:items-center">
            <Image 
              priority={true} 
              unoptimized 
              alt="E-Khayati footer logo" 
              width={"0"} 
              height={"0"} 
              sizes="100vw"
              src={footerData?.data?.attributes?.logo?.data?.attributes?.url || ""}
              className="sm:w-[162px] sm:h-[38px] h-auto" />
            <div className="my-5"></div>
            <p className="text-caption">{footerData?.data?.attributes?.tag_line}</p>
          </div>

          <div className="flex flex-row sm:justify-between sm:w-[50%] xs:w-full xs:hidden">
            {footerData?.data?.attributes?.tiktok ? <Link2 href={footerData?.data?.attributes?.tiktok} target="_blank"><IconBrandTiktok /></Link2> : null}
            {footerData?.data?.attributes?.twitter ? <Link2 href={footerData?.data?.attributes?.twitter} target="_blank"><IconBrandX /></Link2> : null}
            {footerData?.data?.attributes?.facebook ? <Link2 href={footerData?.data?.attributes?.facebook} target="_blank"><IconBrandFacebook /></Link2> : null}
            {footerData?.data?.attributes?.instagram ? <Link2 href={footerData?.data?.attributes?.instagram} target="_blank"><IconBrandInstagram /></Link2> : null}
          </div>
        </div>


        {
          footerData?.data?.attributes?.link_section?.map((item, index: number) => (
            <div key={`footer-section-${index}`} className={`${index === 0 ? "sm:pl-20" : "sm:pl-10"} flex flex-col sm:items-start sm:justify-start xs:items-center xs:mt-12`}>
              <h1 className="footer-section-title text-white text-medium text-l">{item.title}</h1>
              {
                item.Links?.map((link, index2: number) => (
                  <Link2 key={`footer-section-${index}-link-${index2}`} href={link?.URL || "#"} className={`text-caption  my-3 ${index2 === 0 ? "h-3" : ""}`}>{link.display_name}</Link2>
                ))
              }
            </div>
          ))
        }


          <div className="flex flex-row justify-between sm:w-[100%] px-5 mt-8 text-[25px] xs:w-full sm:hidden">
          {footerData?.data?.attributes?.tiktok ? <Link2 href={footerData?.data?.attributes?.tiktok} target="_blank"><IconBrandTiktok /></Link2> : null}
            {footerData?.data?.attributes?.twitter ? <Link2 href={footerData?.data?.attributes?.twitter} target="_blank"><IconBrandX /></Link2> : null}
            {footerData?.data?.attributes?.facebook ? <Link2 href={footerData?.data?.attributes?.facebook} target="_blank"><IconBrandFacebook /></Link2> : null}
            {footerData?.data?.attributes?.instagram ? <Link2 href={footerData?.data?.attributes?.instagram} target="_blank"><IconBrandInstagram /></Link2> : null}
          </div>
      </div>
    </div>
  )
}

=== ./components/layout/index.ts ===
export * from "./Footer";
export * from "./Navbar";

=== ./components/layout/Navbar/index.tsx ===
"use server"
import NavbarClientComponent from "./Navbar"

const Navbar = async (props: any) => {
  return <NavbarClientComponent />
}

export default Navbar;

=== ./components/layout/Navbar/Navbar.tsx ===
"use client";
import {
  Badge,
  Button,
  Navbar,
  NavbarBrand,
  NavbarContent,
  NavbarItem,
  NavbarMenu,
  NavbarMenuItem,
  NavbarMenuToggle,
} from "@nextui-org/react";
import React, { useState } from "react";
import Image from "next/image";
import { usePathname } from "next/navigation";
import { IconHeart, IconShoppingCart } from "@tabler/icons-react";
import { IconUser } from "@tabler/icons-react";
import { useLocale, useTranslations } from "next-intl";
import { useRouter } from "next/navigation";
import { Link } from "@/utils/navigation";
import { useAuth } from "@/provider/AuthContext";
import { IconMenu2 } from "@tabler/icons-react";
// import HamburgerIcon from "@/components/buttons/HamburgerIcon";
import {
  IconBrandFacebook,
  IconBrandInstagram,
  IconBrandTiktok,
  IconBrandX,
} from "@tabler/icons-react";
import { UserProfileDropDown } from "./UserProfileDropDown";
import SearchBarMobile from "./SearchBarMobile";
import SearchBar from "./SearchBar";

// Main component definition
const NavbarClientComponent = () => {
  // Hooks and context initialization
  const pathname: any = usePathname();
  const locale = useLocale();
  const t = useTranslations("navigation");
  const router = useRouter();

  const ctx = useAuth();

  const [isMenuOpen, setIsMenuOpen] = useState(false);

  const handleCloseMenu = () => {
    setIsMenuOpen(false);
  };

  const menuItems: any[] = [
    {
      name: t("home"),
      path: "/",
      authRequired: false,
    },
    {
      name: t("shop"),
      path: "/shop",
      authRequired: false,
    },
    {
      name: t("customize"),
      path: "/custom-mekhwar",
      authRequired: true,
    },
    {
      name: t("tailors"),
      path: "/shop/tailors",
      authRequired: false,
    },
    {
      name: t("about"),
      path: "/about",
      authRequired: false,
    },
    {
      name: t("contact"),
      path: "/contact",
      authRequired: false,
    },
  ];
  return (
    <Navbar
      isBordered
      isMenuOpen={isMenuOpen}
      onMenuOpenChange={setIsMenuOpen}
      className="w-full bg-primary-700 border-b-3 border-secondary-800 sm:h-[60px] overflow-hidden"
      classNames={{
        wrapper: [
          "max-w-main",
          "sm:flex",
          "sm:items-center",
          "sm:justify-between",
        ],
      }}
      shouldHideOnScroll={true}
    >
      <NavbarContent className="nav-lap:hidden pr-3" justify="start">
        <NavbarBrand>
          <Link href={"/"}>
            <Image
              priority={true}
              unoptimized
              src="/assets/images/logo.png"
              alt=""
              width="0"
              height="0"
              sizes="100vw"
              aria-label="Logo"
              className="w-full xs:max-w-[135.39px] xs:min-h-[28.2px] sm:max-w-[140px] sm:h-[30px]"
            />
          </Link>
        </NavbarBrand>
      </NavbarContent>

      <NavbarContent className="nav-lap:hidden" justify="end">
        

        <div className="flex items-center gap-1 md:gap-2 lg:gap-3 xl:gap-4 2xl:gap-6">
          <Link
            prefetch={true}
            href={ctx.isAuthenticated ? "/favorites" : "/login"}
          >
            <Button
              isIconOnly
              className="bg-transparent text-sm md:text-lg lg:text-xl"
              aria-label="Like"
            >
              <IconHeart />
            </Button>
          </Link>

          <Link prefetch={true} href={ctx.isAuthenticated ? "/cart" : "/login"}>
            <Badge
              content={ctx.cartItemCount}
              showOutline={false}
              isInvisible={ctx.cartItemCount < 1 || !ctx.isAuthenticated}
              variant="flat"
              color="secondary"
            >
              <Button
                isIconOnly
                className="bg-transparent text-sm md:text-lg lg:text-xl"
                aria-label="Like"
              >
                <IconShoppingCart />
              </Button>
            </Badge>
          </Link>

          {/* <Link
            prefetch={true}
            href={ctx.isAuthenticated ? "/profile" : "/login"}
          >
            <Button
              isIconOnly
              className="bg-transparent text-sm md:text-lg lg:text-xl"
              aria-label="Like"
            >
              <IconUser />
            </Button>
          </Link> */}

          {/* <Link
            href={pathname.replace(/\/ar\/|\/en\/|\/ar|\/en/, "/")}
            locale={locale === "en" ? "ar" : "en"}
          >
            <Button
              isIconOnly
              className="bg-transparent text-sm md:text-lg lg:text-xl"
              aria-label="Like"
            >
              <p className="text-white text-sm md:text-lg lg:text-xl">
                {locale === "en" ? "ع" : "En"}
              </p>
            </Button>
          </Link> */}
          <Link
            prefetch={true}
            href={ctx.isAuthenticated ? "/profile" : "/login"}
          >
            <Button
              isIconOnly
              className="bg-transparent text-sm md:text-lg lg:text-xl"
              aria-label="Like"
            >
              <IconUser />
            </Button>
          </Link>
          <Link
            href={pathname.replace(/\/ar\/|\/en\/|\/ar|\/en/, "/")}
            locale={locale === "en" ? "ar" : "en"}
          >
            <Button
              isIconOnly
              className="bg-transparent text-sm md:text-lg lg:text-xl"
              aria-label="Like"
            >
              <p className="text-white text-sm md:text-lg lg:text-xl">
                {locale === "en" ? "ع" : "En"}
              </p>
            </Button>
          </Link>
        </div>

        {/* <HamburgerIcon onClick={() => setIsMenuOpen(!isMenuOpen)} /> */}
        <NavbarMenuToggle
          icon={<IconMenu2 />}
          className="text-[24px]"
          aria-label={isMenuOpen ? "Close menu" : "Open menu"}
        />
      </NavbarContent>

      <NavbarContent
        className="hidden nav-lap:flex gap-8 items-center justify-center"
        justify="center"
      >
        <Link href={"/"}>
          <Image
            priority={true}
            unoptimized
            src="/assets/images/logo.png"
            alt=""
            height={`${31}`}
            width={148.8}
            className="sm:h-auto sm:min-w-[148.8px]"
          />
        </Link>

        <div style={{ paddingBottom: '10px' }}>
      <SearchBarMobile />
    </div>
        {menuItems.map((item, index) => {
          return (
            <NavbarItem
              key={`main-${item.name}-${item.path} grid grid-cols-5 gap-[50px]`}
            >
              <Link
                onClick={handleCloseMenu}
                prefetch={true}
                color={"secondary"}
                className={` text-[16px] col-span-1  text-base font-weight-500 transition-all transform hover:text-secondary hover:scale-110  ${
                  pathname === "/" + locale && pathname === item.path + locale
                    ? "text-secondary"
                    : pathname == "/" + locale + item.path
                    ? "text-secondary"
                    : "text-white/50"
                }`}
                href={
                  item.authRequired && !ctx?.isAuthenticated
                    ? "/login"
                    : item.path
                }
              >
                {item.name}
              </Link>
            </NavbarItem>
          );
        })}

        <div className="flex items-center gap-1 md:gap-2 lg:gap-3 xl:gap-4 2xl:gap-6">
          <Link
            prefetch={true}
            href={ctx.isAuthenticated ? "/favorites" : "/login"}
          >
            <Button
              isIconOnly
              className="bg-transparent text-sm md:text-lg lg:text-xl"
              aria-label="Like"
            >
              <IconHeart />
            </Button>
          </Link>

          <Link prefetch={true} href={ctx.isAuthenticated ? "/cart" : "/login"}>
            <Badge
              content={ctx.cartItemCount}
              showOutline={false}
              isInvisible={ctx.cartItemCount < 1 || !ctx.isAuthenticated}
              variant="flat"
              color="secondary"
            >
              <Button
                isIconOnly
                className="bg-transparent text-sm md:text-lg lg:text-xl"
                aria-label="Like"
              >
                <IconShoppingCart />
              </Button>
            </Badge>
          </Link>

          <UserProfileDropDown />

          <Link
            href={pathname.replace(/\/ar\/|\/en\/|\/ar|\/en/, "/")}
            locale={locale === "en" ? "ar" : "en"}
          >
            <Button
              isIconOnly
              className="bg-transparent text-sm md:text-lg lg:text-xl"
              aria-label="Like"
            >
              <p className="text-white text-sm md:text-lg lg:text-xl">
                {locale === "en" ? "ع" : "En"}
              </p>
            </Button>
          </Link>
        </div>
      </NavbarContent>

      {/* Mobile menu */}

      <NavbarMenu>
        <div className="flex mt-2 ">
          <SearchBar handleSearch={() => {
            setIsMenuOpen(false);
          }} />
        </div>

        <div className="mt-10 text-center space-y-4">
          {menuItems.map((item, index) => {
            return (
              <NavbarMenuItem key={`${item}-${index}`}>
                <Link
                  prefetch={true}
                  onClick={handleCloseMenu}
                  className={`w-full ${
                    pathname == locale + "/" + item.path ? "text-secondary" : ""
                  }`}
                  color={"secondary"}
                  href={
                    item.authRequired && !ctx?.isAuthenticated
                      ? "/login"
                      : item.path
                  }
                >
                  {item.name}
                </Link>
              </NavbarMenuItem>
            );
          })}

          <NavbarMenuItem>
            <Link prefetch={true} onClick={handleCloseMenu} href="/cart">
              Cart
            </Link>
          </NavbarMenuItem>

          <NavbarMenuItem
            className={`${!ctx.isAuthenticated ? "hidden" : "block"}`}
          >
            <Link prefetch={true} onClick={handleCloseMenu} href="/profile">
              Profile
            </Link>
          </NavbarMenuItem>

          <NavbarMenuItem
            className={`${!ctx.isAuthenticated ? "hidden" : "block"}`}
          >
            <Link
              prefetch={true}
              onClick={() => {
                ctx.logout();
                handleCloseMenu();
              }}
              href="/login"
            >
              {t("logout")}
            </Link>
          </NavbarMenuItem>

          <NavbarMenuItem
            className={`${ctx.isAuthenticated ? "hidden" : "block"}`}
          >
            <Link prefetch={true} onClick={handleCloseMenu} href="/login">
              Login
            </Link>
          </NavbarMenuItem>
        </div>

        <div className="flex flex-row items-end justify-center h-screen mb-4 space-x-4">
          <Link href="#">
            <IconBrandFacebook size={35} />
          </Link>
          <Link href="#">
            <IconBrandX size={35} />
          </Link>
          <Link href="#">
            <IconBrandTiktok size={35} />
          </Link>
          <Link href="#">
            <IconBrandInstagram size={35} />
          </Link>
        </div>
      </NavbarMenu>
    </Navbar>
  );
};

export default NavbarClientComponent;


=== ./components/layout/Navbar/SearchBar.tsx ===
"use client";
import { Input } from "@nextui-org/react";
import { IconSearch } from "@tabler/icons-react";
import { useRouter } from "next/navigation";
import { useLocale, useTranslations } from "next-intl";
import { useParams, useSearchParams } from "next/navigation";
import qs from "qs";
import { useState } from "react";

export default function SearchBar(props: any) {
  const [searchValue, setSearchValue] = useState<string>("");

  const t = useTranslations("navigation");
  const router = useRouter();
  const params = useSearchParams();
  const locale = useLocale();

  const handleRangeChange = (e: any) => {
    setSearchValue(e.target.value);
    
    
    const newArr = e.target.value;
    const queryString = params.toString();
    const parsedQuery: any = qs.parse(queryString);

    // return;

    //if parsed query does not include filter then add it
    if (!parsedQuery["filters"]) parsedQuery.filters = {};
    //if parsed query filter does ont have $and param then add it
    if (!parsedQuery?.["filters"]?.["$and"]) parsedQuery.filters["$and"] = [];
    //remove categories from filter.and array
    parsedQuery["filters"]["$and"] = parsedQuery?.["filters"]?.["$and"]?.filter(
      (item: any) => !item["title"]
    );
    //if parsed query filter does not include category then add it
    parsedQuery["filters"]["$and"].push({ title: { $containsi: newArr } });

    if (e.key === "Enter") {
      props.handleSearch();
      router.replace(
        //@ts-ignore
        `/${locale}/shop?${qs.stringify(parsedQuery, {
          encodeValuesOnly: true,
        })}`,
        {
          scroll: false,
        }
      );
    }
  };

  return (
    <Input
      isClearable
      radius="sm"
      size="sm"
      width="100%"
      height={40}
      classNames={{
        mainWrapper: ["w-full h-[40px] text-[16px]"],
        label: "text-black/50 dark:text-white/90",
        input: ["bg-transparent"],
        innerWrapper: "bg-transparent",
        inputWrapper: ["bg-white/5"],
      }}
      placeholder={t("type_to_search")}
      onClear={() => {
        setSearchValue("");
        props.handleSearch();
        router.push(`/${locale}/shop`);
      }}
      onChange={handleRangeChange}
      onKeyUp={handleRangeChange}
      aria-label="Search"
      startContent={
        <IconSearch className="text-white/50 mb-0.5 text-slate-400 pointer-events-none flex-shrink-0 mr-3" />
      }
    />
  );
}


=== ./components/layout/Navbar/SearchBarMobile.tsx ===
"use client";
// import { useRouter } from "@/utils";
import { Input } from "@nextui-org/react";
import { IconSearch } from "@tabler/icons-react";
import { useLocale, useTranslations } from "next-intl";
import { useSearchParams } from "next/navigation";
import { useRouter } from "next/navigation";
import qs from "qs";
import { useState } from "react";

export default function SearchBarMobile(props: any) {
  const [ searchValue, setSearchValue ] = useState<string>("");

  const t = useTranslations("navigation");
  const router = useRouter();
  const locale = useLocale();
  const params = useSearchParams();


  const handleRangeChange = (e: any) => {
    setSearchValue(e.target.value);
    const newArr = e.target.value;
    const queryString = params.toString();
    const parsedQuery: any = qs.parse(queryString);

    // return;

    //if parsed query does not include filter then add it
    if (!parsedQuery["filters"]) parsedQuery.filters = {};
    //if parsed query filter does ont have $and param then add it
    if (!parsedQuery?.["filters"]?.["$and"]) parsedQuery.filters["$and"] = [];
    //remove categories from filter.and array
    parsedQuery["filters"]["$and"] = parsedQuery?.["filters"]?.["$and"]?.filter(
      (item: any) => !item["title"]
    );
    //if parsed query filter does not include category then add it
    parsedQuery["filters"]["$and"].push({ title: { $containsi: newArr } });


    // router.push(
    //   {
    //     pathname: "/shop",
    //     query: {
    //       filter:  qs.stringify(parsedQuery, {
    //         encodeValuesOnly: false,
    //       }),
    //     }
    //   },
    //   {
    //     scroll: true
    //   },
    // );

    router.push(
      `/${locale}/shop?${qs.stringify(parsedQuery, {
        encodeValuesOnly: true,
      })}`
    );
  };

  return (
    <Input
      isClearable
      radius="sm"
      aria-label="Search"
      size="sm"
      width="100%"
      // height={40}
      // color="primary"
      classNames={{
        mainWrapper: ["w-full h-[35px] text-[16px]"],
        label: "text-black/50 dark:text-white/90",
        input: ["bg-transparent"],
        innerWrapper: "bg-transparent",
        inputWrapper: ["bg-white/5"],
      }}
      onChange={handleRangeChange}
      placeholder={t("type_to_search")}
      onClear={() => {
        setSearchValue("");
        router.push(`/${locale}/shop`);
      }}
      value={searchValue}
      startContent={
        <IconSearch className="text-white/50 mb-0.5 text-slate-400 pointer-events-none flex-shrink-0 mr-3" />
      }
    />
  );
}


=== ./components/layout/Navbar/UserProfileDropDown.tsx ===
"use client"
import { useAuth } from "@/provider/AuthContext";
import { Link, useRouter } from "@/utils";
import {
  Dropdown,
  DropdownTrigger,
  DropdownMenu,
  DropdownItem,
  Button,
} from "@nextui-org/react";
import { IconUser } from "@tabler/icons-react";
import { useTranslations } from "next-intl";
import { useEffect } from "react";

export function UserProfileDropDown(props: any) {
  const ctx = useAuth();
  const t = useTranslations("navigation");
  const router = useRouter();

  useEffect(() => {
    router.prefetch("/profile");
  }, [])

  const handleLogout = () => {
    ctx.logout();
    router.push("/");
  };

  return !ctx?.isAuthenticated ? (
    <Link prefetch={true} href={"/login"}>
      <Button
        isIconOnly
        className="bg-transparent text-sm md:text-lg lg:text-xl"
        aria-label="Like"
      >
        <IconUser />
      </Button>
    </Link>
  ) : (
    <Dropdown>
      <DropdownTrigger>
        <Button
          isIconOnly
          className="bg-transparent text-sm md:text-lg lg:text-xl"
          aria-label="Like"
        >
          <IconUser />
        </Button>
      </DropdownTrigger>

      <DropdownMenu
        aria-label="Example with disabled actions"
        disabledKeys={["edit", "delete"]}
      >
        <DropdownItem key="new" onClick={() => router.push("/profile")}>
          {t("user_profile")}
        </DropdownItem>
        <DropdownItem key="copy" onClick={handleLogout} className="text-danger">
          {t("logout")}
        </DropdownItem>
      </DropdownMenu>
    </Dropdown>
  );
}


=== ./components/sections/home-banner-slider/index.tsx ===
'use client'
import HomeBannerCard from "@/components/cards/HomeBanner";
import { Swiper, SwiperSlide } from "swiper/react";
import {Autoplay} from "swiper/modules";
import 'swiper/css';
import 'swiper/css/autoplay';
interface HomeBannerSlider {
  item?: {
    image?: string;
    title?: string;
    subtitle?: string;
    link?: string;
  }[]
}

const HomeBannerSlider = ({ item }: HomeBannerSlider) => {

  return (
    <div className="w-full">
      <Swiper>
        {
          item?.length && item?.map((item, index) => {
            return (
              <SwiperSlide key={"home banner item" + index}>
                <HomeBannerCard image={item.image} title={item.title} subtitle={item.subtitle} link={item.link} />
              </SwiperSlide>
            )
          })
        }
      </Swiper>
    </div>
  )
}

export default HomeBannerSlider;

=== ./components/sections/home-fabric-carousel/index.tsx ===
import LinkButton from "@/components/buttons/LinkButton"
import FabricCard from "@/components/cards/FabricCard"
import {HomeItemCarousel} from "@/components/sections/home-fabric-carousel/components/home-item-carousel"
import { IconChevronRight } from "@tabler/icons-react";
import { useTranslations } from "next-intl";

export interface HomeFabricCarouselProps {
  title?: string;
  coloredTitle?: string;
  description?: string;
  link?: string;
  items?: any;
  px?: string;
  maxW?: string;
  align?: "proper" | "improper";
}
const HomeFabricCarousel = ({ title, align, description, link, items, coloredTitle, px, maxW }: HomeFabricCarouselProps) => {
  const t = useTranslations("home");


  if (!items?.length) {
    return <></>
  }

  return (
    <div className={`w-screen mt-12 ${maxW}`}>

      <div className="flex justify-center">
        <div className={`section-header ${maxW ? maxW : "max-w-main"} w-full flex ${align === "proper" ? "sm:flex-row-reverse" : "sm:flex-row"} xs:flex-col-reverse justify-between items-end xs:py-0 ${px ? px : "xs:px-3 md:px-3"}`}>

          <LinkButton to="/shop/fabric" title={t("all_fabric")} thin={true} endIcon={<IconChevronRight />} />
          <div className="sm:hidden xs:flex mt-5"></div>

          <div className={`${align === "proper" ? "sm:text-start" : "sm:text-end"} xs:text-start`}>
            <h1 className="text-white inline-block mx-2 xs:text-[39.94px] xs:font-black sm:text-4xl sm:font-black">{title}</h1>
            <h1 className="text-secondary inline-block xs:text-[39.94px] xs:font-black sm:text-4xl sm:font-black">{coloredTitle}</h1>
            <p className="font-medium text-caption xs:text-[18px] xs:mt-2 sm:mt-2">{description}</p>
          </div>
        </div>
      </div>

      <div className="xs:hidden sm:block">
        <HomeItemCarousel items={items} />
      </div>

      <div className="xs:grid xs:grid-cols-2 justify-center items-center gap-y-5 mt-3 items-center w-full sm:hidden">
        {
          items?.length > 0 && items.map((item: any, index: number) => {
            if (index < 4) {
              return (
                <div key={"fabric-moible-home-item-" +index} className="grid-span-1 flex justify-center items-center">
                  <div className="w-[173px]">
                    <FabricCard
                      image={item.image}
                      name={item.title}
                      price={item.price}
                      id={item.id}
                    /></div>
                </div>
              );
            }
          })
        }
      </div>
    </div>
  )
}

export default HomeFabricCarousel;

=== ./components/sections/home-fabric-carousel/components/home-item-carousel/index.tsx ===
'use client'
import { Swiper, SwiperSlide } from "swiper/react";
import "swiper/css";

import { FabricCardGrowableProps, FabricCardGrowable } from "./components/FabricCardGrowable";
import { Link } from "@/components";
import { useLocale } from "next-intl";

export interface HomeItemCarouselProps {
  title?: string
  description?: string
  link?: string
  items?: FabricCardGrowableProps[]
  id?: number;
}

export const HomeItemCarousel = ({ title, description, link, items }: HomeItemCarouselProps) => {
  const locale = useLocale();

  return (
    <div className="w-full flex flex-col mt-0 mb-10">

      <div className="w-screen mt-10 mb-10 flex justify-start xs:hidden desktop-fabric-carousel">
        <Swiper spaceBetween={20} slidesPerView={"auto"} dir={locale === "ar" ? "ltr" : "ltr"}>
          {
            items?.length && items.map((_item, index) => {
              return (
                <SwiperSlide key={"swiper-slider-fabric-desktop" + index}>
                  <div className="item-container">
                    <div className="item">
                      {/* <Link key={"home-fabric-carousel-big-swiper-link-item" + index} prefetch={true} href={{ pathname: "/shop/fabric/[fabricId]", params: { fabricId: _item.id?.toString() || "" } }} scroll={true} > */}
                        <FabricCardGrowable
                          id={_item.id}
                          title={_item.title}
                          description={_item.description}
                          link={_item.link}
                          image={_item.image}
                          price={_item.price}
                        />
                      {/* </Link> */}
                    </div>
                  </div>
                </SwiperSlide>
              )
            })
          }
        </Swiper>
      </div>
    </div>
  )
}

=== ./components/sections/home-fabric-carousel/components/home-item-carousel/components/FabricCardGrowable.tsx ===
"use client";
import CardContainer from "@/abstract/CardContainer";
import Image from "next/image";
import { motion } from "framer-motion";
import { Link } from "@/utils";
import { useTranslations } from "next-intl";

export interface FabricCardGrowableProps {
  maxWidth?: number;
  image?: string;
  title?: string;
  description?: string;
  link?: string;
  id?: number;
  price?: number;
}

export const FabricCardGrowable = ({
  maxWidth,
  image,
  title,
  description,
  link,
  price,
  id,
}: FabricCardGrowableProps) => {
  const t = useTranslations("shop");
  return (
    <motion.div
      whileHover={{ scale: 1.1 }}
      transition={{ duration: 0.2 }}
      className="single-card-solitaire-container xs:w-[173px] xs:h-max-[280px] sm:w-[250px] overflow-visible"
    >
      <CardContainer scissors={true}>
        <Link
          href={{
            pathname: "/shop/fabric/[fabricId]",
            params: { fabricId: id?.toString() || "" },
          }}
          prefetch={true}
          scroll={true}
        >
          <Image
            priority={true}
            unoptimized
            src={image || ""}
            width="0"
            height="0"
            sizes="100vw"
            className="xs:w-full xs:h-[118px] object-cover sm:h-[150px] sm:w-full"
            style={{ maxWidth }}
            alt=""
          />

          <Image
            priority={true}
            unoptimized
            src="/assets/images/Border-desktop.png"
            className="xs:hidden sm:block mt-2 mb-1 w-[230px] h-[1px]"
            width="0"
            height="0"
            sizes="100vw"
            style={{ maxWidth }}
            alt=""
          />

          <Image
            priority={true}
            unoptimized
            src="/assets/images/Border-mobile.png"
            className="sm:hidden xs:block mt-2 mb-1 w-full"
            width={230}
            height={150}
            style={{ maxWidth }}
            alt=""
          />

          <div className="item-details flex flex-col xs:p-1 xs:pt-0 sm:p-2 sm:pt-0">
            <div className="w-full">
              <h3 className="xs:text-[10px] sm:text-white text-base font-medium ">
                {title}
              </h3>
            </div>

            <div className="flex items-center justify-between">
              <div className="flex flex-col items-start justify-center w-full">
                <div className="text-white text-[12px] sm:text-base font-medium  xs:mb-1 sm:my-1">
                  {price ? <>AED {price}</> : <>{t("price_after_confirmation")}</>}
                </div>
              </div>
            </div>
          </div>
        </Link>
      </CardContainer>
    </motion.div>
  );
};


=== ./components/sections/home-product-carousel/index.tsx ===

import LinkButton from "@/components/buttons/LinkButton"
import SolitaireCardSingle, { SolitaireCardSingleProps } from "@/components/cards/SolitaireCardSingle"
import HomeItemCarousel from "@/components/sections/home-product-carousel/components/home-item-carousel"
import { IconChevronRight } from "@tabler/icons-react";
import { useTranslations } from "next-intl";

interface HomeProductCarouselProps {
  title?: string;
  coloredTitle?: string;
  description?: string;
  link?: string;
  items?: SolitaireCardSingleProps[],
  px?: string;
  screenFull?: boolean;
}

const HomeProductCarousel = (props: HomeProductCarouselProps) => {
  const t = useTranslations("shop");

  return (
    <div className={`${props.screenFull ? "w-full" : "w-screen"} mt-12`}>

      <div className="flex justify-center">
        <div className={`section-header max-w-main w-full flex sm:flex-row xs:flex-col justify-between items-end xs:py-0 ${props?.px ? props.px : "xs:px-3 md:px-3"}`}>
          <div className="">
            <h1 className="text-white inline-block mx-2 xs:text-[39.94px] xs:font-black sm:text-4xl sm:font-black">{props?.title ? props.title : "Browse"}</h1>
            <h1 className="text-secondary inline-block xs:text-[39.94px] xs:font-black sm:text-4xl sm:font-black">{props?.coloredTitle ? props.coloredTitle : "Mekhwar"}</h1>
            <p className="font-medium text-caption xs:text-[18px] xs:mt-2 sm:mt-2">{props?.description ? props.description : "Browse our wide collection of Mekhwar design, made only for your style and luxury"}</p>
          </div>

          <div className="sm:hidden xs:flex mt-5"></div>
          <LinkButton to="/shop" title={t("browse_mekhwar")} thin={true} endIcon={<IconChevronRight />} />
        </div>
      </div>

      <div className="xs:hidden sm:block">
        <HomeItemCarousel
          items={props?.items || []}
          screenFull={props?.screenFull}
        />
      </div>

      <div className="xs:grid xs:grid-cols-2 justify-center justify-items-center	 gap-y-5 mt-3 items-center  w-full sm:hidden">
        {
          typeof props?.items?.length === "number" && props?.items?.length > 0 && props.items.map((item, index) => {
            if (index < 4) {
              return <SolitaireCardSingle key={"solitare-singe-lcard" + index} {...item} />
            }
          })
        }
      </div>
    </div>
  )
}

export default HomeProductCarousel;

=== ./components/sections/home-product-carousel/components/home-item-carousel/index.tsx ===
'use client'
import { Swiper, SwiperSlide } from "swiper/react";
import "swiper/css";

import SolitaireCardSingleGrowable from "./components/SolitaireCardSingleGrowable";
import { useLocale } from "next-intl";
import { SolitaireCardSingleProps } from "@/components/cards/SolitaireCardSingle";

export interface HomeItemCarouselProps {
  items: SolitaireCardSingleProps[];
  screenFull?: boolean;
}
const HomeItemCarousel = (props: HomeItemCarouselProps) => {
  const locale = useLocale();

  return (
    <div className="w-full flex flex-col mt-0 mb-10">
      
      <div className={`${props?.screenFull ? "w-full" : "w-screen"} mt-10 mb-10 flex justify-start xs:hidden desktop-item-carousel`}>
        <Swiper spaceBetween={20} slidesPerView={"auto"} dir={locale === "ar" ? "rtl" : "ltr"}>
          {
            typeof props?.items?.length === "number" && props?.items?.length > 0 && props?.items?.map((_item, index) => {
              return (
                  <SwiperSlide key={"mekhwar-desktop-" + index}>
                    <div className="item-container">
                      <div className="item">
                        <SolitaireCardSingleGrowable
                          title={_item?.title}
                          price={_item?.price}
                          image={_item?.image}
                          rating={_item?.rating}
                          id={_item?.id}
                          tailorName={_item?.tailorName}
                          customizable={_item?.customizable}
                          // maxWidth={_item?.maxWidth}
                        />
                      </div>
                    </div>
                  </SwiperSlide>
              )
            })
          }
        </Swiper>
      </div>
    </div>
  )
}

export default HomeItemCarousel;

=== ./components/sections/home-product-carousel/components/home-item-carousel/components/SolitaireCardSingleGrowable.tsx ===
"use client";
import { motion } from "framer-motion";

import CardContainer from "@/abstract/CardContainer";
import Image from "next/image";
import { FavoriteButton } from "../../../../../buttons/FavouriteButton";
import { Link } from "@/utils/navigation";
import { Rating } from "@smastrom/react-rating";
import "@smastrom/react-rating/style.css";
import { Chip } from "@nextui-org/react";
import { useTranslations } from "next-intl";

export interface SolitaireCardSingleGrowableProps {
  maxWidth?: number;
  image?: string;
  price?: number;
  id?: number;
  title?: string;
  tailorName?: string;
  rating?: number;
  customizable?: boolean;
}

const SolitaireCardSingleGrowable = ({
  maxWidth,
  image,
  price,
  id,
  title,
  tailorName,
  rating,
  customizable,
}: SolitaireCardSingleGrowableProps) => {
  const t = useTranslations("shop");
  return (
    <motion.div
      whileHover={{ scale: 1.1 }}
      transition={{ duration: 0.2 }}
      className="single-card-solitaire-container xs:w-[173px] xs:h-max-[280px] sm:h-full sm:w-[250px] sm:h-[404px]"
    >
      <CardContainer scissors={true}>
        <Link
          href={{
            pathname: "/shop/[id]",
            params: { id: id?.toString() || "" },
          }}
          scroll={true}
          prefetch={true}
          className="relative"
        >
          {customizable ? (
            <Chip
              className="absolute z-10 left-[10px] top-[10px] text-[10px] rounded-md bg-[#012828] text-white"
              variant="shadow"
            >
              {t("customizable")}
            </Chip>
          ) : (
            <></>
          )}

          <Image
            priority={true}
            unoptimized
            src={image || ""}
            width="0"
            height="0"
            sizes="100vw"
            className="prod-card-img xs:w-[164px] xs:h-[164px] object-cover sm:h-[230px] sm:w-full"
            style={{ maxWidth }}
            alt=""
          />

          <Image
            priority={true}
            unoptimized
            src="/assets/images/Border-desktop.png"
            className={`xs:hidden sm:block mt-2 mb-1 w-full h-[2px]`}
            width="0"
            height="0"
            sizes="100vw"
            style={{ maxWidth }}
            alt=""
          />

          <Image
            priority={true}
            unoptimized
            src="/assets/images/Border-mobile.png"
            className={`sm:hidden sm:block mt-2 mb-1 w-full h-[2px]`}
            width="0"
            height="0"
            sizes="100vw"
            style={{ maxWidth }}
            alt=""
          />

          <div className="item-details flex flex-col p-2 mt-3">
            <div className="w-full h-6">
              <div className="text-white xs:text-[12px] sm:text-base font-medium my-1 truncate">
                {title}
              </div>
              <div className="prod-card-old-price ml-2 inline-block text-stone-300 text-sm font-normal line-through"></div>
            </div>

            <div className="my-3 flex items-center">
              <Rating
                value={rating || 0}
                readOnly
                isDisabled
                items={5}
                style={{ maxWidth: "80px" }}
              />
              <div className="ml-2 text-center align-center text-secondary text-md font-normal">
                {rating}
              </div>
            </div>

            <div className="flex items-center justify-between">
              <div className="flex flex-col items-start justify-center w-[75%]">
                <div className="prod-card-price inline-block  text-white xs:text-m  sm:text-xl font-semibold">
                  AED {price}
                </div>
                <div className="text-white xs:text-[9px] sm:text-xs font-light my-1 h-[1rem] whitespace-nowrap text-ellipsis overflow-hidden w-full">
                  {/* {truncate(tailorName || "", 25)} */}
                  {tailorName}
                </div>
              </div>
              <FavoriteButton id={id} />
            </div>
          </div>
        </Link>
      </CardContainer>
    </motion.div>
  );
};

export default SolitaireCardSingleGrowable;


=== ./components/sections/home-tailor-carousel/index.tsx ===
import LinkButton from "@/components/buttons/LinkButton";
import { IconChevronRight } from "@tabler/icons-react";
import { useTranslations } from "next-intl";
import { HomeTailorCarousel } from "./components/home-fabric-carousel";

export interface HomeFabricCarouselProps {
  title?: string;
  coloredTitle?: string;
  description?: string;
  link?: string;
  items?: any[];
  px?: string;
  maxW?: string;
  align?: "proper" | "improper";
}
const HomeTailorsCarousel = ({ title, align, description, link, items, coloredTitle, px, maxW }: HomeFabricCarouselProps) => {
  const t = useTranslations("home");

  return (
    <div className={`w-screen mt-12 ${maxW}`}>

      <div className="flex justify-center">
        <div className={`section-header ${maxW ? maxW : "max-w-main"} w-full flex ${align === "proper" ? "sm:flex-row-reverse" : "sm:flex-row"} xs:flex-col-reverse justify-between items-end xs:py-0 ${px ? px : "xs:px-3 md:px-3"}`}>

          <LinkButton to="/shop/tailors" title={t("all_tailors")} thin={true} endIcon={<IconChevronRight />} />
          <div className="sm:hidden xs:flex mt-5"></div>

          <div className={`${align === "proper" ? "sm:text-start" : "sm:text-end"} xs:text-start`}>
            <h1 className="text-white inline-block mx-2 xs:text-[39.94px] xs:font-black sm:text-4xl sm:font-black">{title}</h1>
            <h1 className="text-secondary inline-block xs:text-[39.94px] xs:font-black sm:text-4xl sm:font-black">{coloredTitle}</h1>
            <p className="font-medium text-caption xs:text-[18px] xs:mt-2 sm:mt-2">{description}</p>
          </div>
        </div>
      </div>

      <div className="block">
        <HomeTailorCarousel items={items} />
      </div>
    </div>
  )
}

export default HomeTailorsCarousel;

=== ./components/sections/home-tailor-carousel/components/home-fabric-carousel/index.tsx ===
"use client";
import { Swiper, SwiperSlide } from "swiper/react";
import { Pagination, Autoplay } from "swiper/modules";
import "swiper/css";
import "swiper/css/pagination";
import "swiper/css/autoplay";

import { FabricCardGrowableProps, FabricCardGrowable } from "./components/FabricCardGrowable";
import { Link, TailorCard } from "@/components";
import { useLocale } from "next-intl";

export interface HomeItemCarouselProps {
  title?: string;
  description?: string;
  link?: string;
  items?: any[];
  id?: number;
}

export const HomeTailorCarousel = ({
  title,
  description,
  link,
  items,
}: HomeItemCarouselProps) => {
  const locale = useLocale();

  return (
    <div className="w-full flex flex-col mt-0 mb-10">
      <div className="w-screen mt-10 mb-10 flex justify-start desktop-tailor-carousel">
        <Swiper
          spaceBetween={20}
          slidesPerView={"auto"}
          dir={locale === "ar" ? "ltr" : "ltr"}
          autoplay={true}
          loop={true}
          pagination={{ clickable: true }}
          // modules={[Pagination, Autoplay]}
          className="tailor-home-carousel"
          breakpoints={{
            600: {
              slidesPerView: 1,
              spaceBetween: 20,
              centeredSlides: true,
            },
            800: {
              slidesPerView: 2,
              spaceBetween: 20,
              centeredSlides: true,
            },
            1500: {
              slidesPerView: 3,
              spaceBetween: 20,
              centeredSlides: false,
            },
            3000: {
              slidesPerView: 5,
              spaceBetween: 20,
              centeredSlides: false,
            },
          }}
        >
          {items?.length &&
            items.map((_item, index) => {
              return (
                <SwiperSlide key={"swiper-slider-tailor-desktop" + index}>
                  <div className="item-container">
                    <div className="item">
                      <TailorCard
                        image={_item?.attributes?.image?.data?.attributes?.url || ""}
                        name={_item?.attributes?.name || ""}
                        id={_item.id}
                        description={_item.attributes?.description || ""}
                        rating={_item.attributes?.rating || 0}
                        key={_item.id}
                      />
                    </div>
                  </div>
                </SwiperSlide>
              );
            })}
        </Swiper>
      </div>
    </div>
  );
};


=== ./components/sections/home-tailor-carousel/components/home-fabric-carousel/components/FabricCardGrowable.tsx ===
'use client'
import CardContainer from "@/abstract/CardContainer";
import Image from "next/image";
import { motion } from "framer-motion";

export interface FabricCardGrowableProps {
  attributes: any;
  maxWidth?: number
  image?: string;
  title?: string;
  description?: string;
  link?: string;
  id?: number;
  price?: number;
}

export const FabricCardGrowable = ({ maxWidth, image, title, description, link, price }: FabricCardGrowableProps) => {
  return (
    <motion.div whileHover={{ scale: 1.1 }} transition={{ duration: 0.2 }} className="single-card-solitaire-container xs:w-[173px] xs:h-max-[280px] sm:h-full sm:w-[250px] sm:h-[404px] overflow-visible">
      <CardContainer scissors={true}>
        <Image priority={true} unoptimized src={image || ""} width="0" height="0" sizes="100vw" className="xs:w-full xs:h-[118px] object-cover sm:h-[150px] sm:w-full" style={{ maxWidth, }} alt="" />

        <Image priority={true} unoptimized src="/assets/images/Border-desktop.png" className="xs:hidden sm:block mt-2 mb-1 w-[230px] h-[1px]" width="0"
          height="0"
          sizes="100vw" style={{ maxWidth, }} alt="" />

        <Image priority={true} unoptimized src="/assets/images/Border-mobile.png" className="sm:hidden xs:block mt-2 mb-1 w-full" width={230} height={150} style={{ maxWidth, }} alt="" />

        <div className="item-details flex flex-col xs:p-1 xs:pt-0 sm:p-2 sm:pt-0">

          <div className="w-full">
            <h3 className="xs:text-[10px] sm:text-white text-base font-medium ">{title}</h3>
          </div>

          {/* <div className="flex items-center justify-between">
            <div className="flex flex-col items-start justify-center w-[75%]">
              <div className="text-white xs:text-[12px] sm:text-base font-medium  xs:mb-1 sm:my-1">Mekhwar Name</div>
              <div className="text-white xs:text-[9px] sm:text-xs font-light  ">Arabian Tailors Modest</div>
            </div>
            <FavoriteButton />
          </div> */}
        </div>

      </CardContainer>
    </motion.div>
  );
}


=== ./components/shop/DesignBuyOptions.tsx ===
'use client'
import { useAuth } from "@/provider/AuthContext";
import { Button } from "@nextui-org/react";
import { useState } from "react";
import { useRouter } from "..";
import { addCustomToCart, extractError } from "@/provider";
import { useForm } from "react-hook-form";
import * as Yup from "yup";
import { yupResolver } from "@hookform/resolvers/yup";
import 'react-toastify/dist/ReactToastify.css';
import { ToastContainer, toast } from "react-toastify";
import { IconShoppingBag } from "@tabler/icons-react";
import { useTranslations } from "next-intl";

const formSchema = Yup.object().shape({
  shoulder: Yup.number().required('Please enter your shoulder size').min(1),
  wrist: Yup.number().required('Please enter your wrist size').min(1),
  bust: Yup.number().required('Please enter your bust size').min(1),
  arm_length: Yup.number().required('Please enter your arm length size').min(1),
  top_length: Yup.number().required('Please enter your top length size').min(1),
  top_width: Yup.number().required('Please enter your top width size').min(1),
  saveSizeProfile: Yup.boolean(),
});

interface DesignBuyOptionsForm {
  shoulder: number;
  bust: number;
  arm_length: number;
  wrist: number;
  top_length: number;
  top_width: number;
  saveSizeProfile: boolean;
}

export interface DesignBuyOptionsProps {
  id?: string;
  sizes?: any[];
  description?: string;
  query?: any;
  tailorId?: number;
}

export default function DesignBuyOptions (props: DesignBuyOptionsProps) {
  const [isLoading, setIsLoading] = useState(false);
  const t = useTranslations("shop");

  const ctx = useAuth();
  const router = useRouter();

  const {
    register,
    handleSubmit,
    formState: { errors },
    getValues,
    setValue,
    trigger,
  } = useForm<DesignBuyOptionsForm>({
    mode: "onTouched",
    //@ts-ignore
    resolver: yupResolver(formSchema)
  });

  const handleAddToCart = async () => {
    setIsLoading(true);
    const { data, error } = await addCustomToCart(ctx.token, {...props.query, designId: props.id, tailorId: props.tailorId });

    if (error) {
      toast.error(extractError(error));
      setIsLoading(false);
      return;
    }
    setIsLoading(false);
    //@ts-ignore
    toast.success("Added successfully");
  }

  return (
    <div className="flex flex-col justify-start items-start w-[100%]">

      <div className="my-[8px]"></div>

      <div className="my-[10px]"></div>

      <p className="m-0 mt-0 text-white font-[14px] w-[100%]">{props?.description}</p>

      <div className="my-[6px]"></div>

      <Button 
        onClick={handleAddToCart}
        isLoading={isLoading}
        className="bg-primary-700 text-white text-[16px] font-bold min-w-full min-h-0 py-6 rounded-[6px]"
        startContent={<IconShoppingBag size={18} />}>{t("add_to_cart")}</Button>

      <ToastContainer />
    </div>
  );
}



=== ./components/shop/FabricBuyOptions.tsx ===
"use client";
import { Avatar, Button, Card, CardHeader, Modal, ModalContent } from "@nextui-org/react";
import { useState } from "react";
import { useRouter } from "..";
import { useAuth } from "@/provider/AuthContext";
import { IconEye, IconNeedleThread } from "@tabler/icons-react";
import { useTranslations } from "next-intl";
import CardContainer from "@/abstract/CardContainer";

export interface FabricBuyOptionsProps {
  id?: number;
  sizes?: any[];
  description?: string;
  patterns?: any[];
}

export const FabricBuyOptions = (props: FabricBuyOptionsProps) => {
  const [selectFabricPatternDialogOpen, setSelectFabricPatternDialogOpen] = useState(false);

  const ctx = useAuth();
  const router = useRouter();
  const t = useTranslations("customization");

  const [CustomDesignStepDialogOpen, setCustomDesignStepDialogOpen] = useState(false);

  const handleNextClick = () => {
    if (!ctx.isAuthenticated) {
      return router.push("/login");
    }

    if (props?.patterns?.length) {
      setSelectFabricPatternDialogOpen(true);
      return;
    }

    if (props?.id) moveToCustomization(props?.id);
  };

  const moveToCustomization = (fabricId: number, selectedPattern?: string) => {
    const query: any = {
      fabricId: fabricId,
    };

    if (selectedPattern) {
      query["selectedPattern"] = selectedPattern;
    }

    router.push({
      pathname: "/custom-mekhwar",
      query,
    });
  };

  return (
    <div className="flex flex-col justify-start items-start w-[100%]">
      <p className="m-0 mt-0 text-white font-[14px] w-[100%]">{props?.description}</p>

      <div className="xs:my-[10px] my-[20px] h-full"></div>

      <Button
        onClick={handleNextClick}
        className={`bg-primary-700 text-secondary text-[16px] font-bold min-w-full min-h-0 py-6 rounded-[6px]`}
        startContent={<IconNeedleThread size={18} />}
      >
        {t("start_customization")}
      </Button>

      {props?.patterns?.length && props?.patterns?.length > 0 ? (
        <Modal
          isOpen={selectFabricPatternDialogOpen}
          onClose={() => setSelectFabricPatternDialogOpen(false)}
          size="sm"
        >
          <ModalContent>
            <CardContainer scissors={false}>
              <div className="w-full h-full flex flex-col items-start justify-start p-3">
                <h1 className="text-xl font-bold text-secondary text-[16px]">
                  Select Pattern
                </h1>
                <div className="w-full h-full flex flex-col">
                  {props?.patterns?.map((pattern) => (
                    <Card
                      key={pattern.id}
                      className="max-w-[340px] bg-transparent shadow-sm px-0"
                    >
                      <CardHeader className="justify-between pr-0 pl-1">
                        <div className="flex gap-5">
                          <Avatar
                            isBordered
                            radius="sm"
                            size="md"
                            src={pattern?.image?.data?.attributes?.url}
                          />
                          <div className="flex flex-col gap-1 items-start justify-center">
                            <h4 className="text-small font-semibold leading-none text-default-600">
                              {pattern?.title}
                            </h4>
                            {/* <h5 className="text-small tracking-tight text-default-400">
                            {pattern?.price} AED
                          </h5> */}
                          </div>
                        </div>
                        <Button
                          color="primary"
                          radius="full"
                          size="sm"
                          onClick={() => moveToCustomization(props?.id || 0, pattern.id)}
                        >
                          {t("select")}
                        </Button>
                      </CardHeader>
                    </Card>
                  ))}
                </div>
              </div>
            </CardContainer>
          </ModalContent>
        </Modal>
      ) : null}
    </div>
  );
};


=== ./components/shop/MekhwarBuyOptions.tsx ===
"use client";
import { ThemeInput } from "@/components/input/theme-input";
import { useAuth } from "@/provider/AuthContext";
import {
  Button,
  Checkbox,
  DropdownMenu,
  Dropdown,
  DropdownItem,
  DropdownTrigger,
} from "@nextui-org/react";
import { useEffect, useRef, useState } from "react";
import { Link, useRouter } from "..";
import { addMekhwarToCart } from "@/provider";
import { useForm } from "react-hook-form";
import * as Yup from "yup";
import { yupResolver } from "@hookform/resolvers/yup";
import "react-toastify/dist/ReactToastify.css";
import { ToastContainer, toast } from "react-toastify";
import { getUserProfiles, storeCart } from "@/utils/cart";
import {
  IconEye,
  IconInfoCircle,
  IconNeedleThread,
  IconShoppingBag,
} from "@tabler/icons-react";
import { useLocale, useTranslations } from "next-intl";
import DropdownComponent from "@/app/[locale]/custom-mekhwar/components/Drop";

let patternTwoDigisAfterComma = /^\d+(\.\d{0,2})?$/;

const formSchema = Yup.object().shape({
  shoulder: Yup.number()
    .positive()
    .test(
      "is-decimal",
      "The amount should be a decimal with maximum two digits after comma",
      (val: any) => {
        if (val != undefined) {
          return patternTwoDigisAfterComma.test(val);
        }
        return true;
      }
    )
    .typeError("Number required")
    .required("Required")
    .max(13.5)
    .min(8),
  bust: Yup.number()
    .positive()
    .test(
      "is-decimal",
      "The amount should be a decimal with maximum two digits after comma",
      (val: any) => {
        if (val != undefined) {
          return patternTwoDigisAfterComma.test(val);
        }
        return true;
      }
    )
    .typeError("Number required")
    .required("Required")
    .max(42)
    .min(32),
  sleeves_length: Yup.number()
    .positive()
    .test(
      "is-decimal",
      "The amount should be a decimal with maximum two digits after comma",
      (val: any) => {
        if (val != undefined) {
          return patternTwoDigisAfterComma.test(val);
        }
        return true;
      }
    )
    .typeError("Number required")
    .required("Required")
    .max(30)
    .min(19),
  hips: Yup.number()
    .test(
      "is-decimal",
      "The amount should be a decimal with maximum two digits after comma",
      (val: any) => {
        if (val != undefined) {
          return patternTwoDigisAfterComma.test(val);
        }
        return true;
      }
    )
    .typeError("Number required")
    .required("Required")
    .max(44)
    .min(34),
  arm_width: Yup.number()
    .test(
      "is-decimal",
      "The amount should be a decimal with maximum two digits after comma",
      (val: any) => {
        if (val != undefined) {
          return patternTwoDigisAfterComma.test(val);
        }
        return true;
      }
    )
    .typeError("Number required")
    .required("Required")
    .max(20.5)
    .min(10),
  wrist: Yup.number()
    .test(
      "is-decimal",
      "The amount should be a decimal with maximum two digits after comma",
      (val: any) => {
        if (val != undefined) {
          return patternTwoDigisAfterComma.test(val);
        }
        return true;
      }
    )
    .typeError("Number required")
    .required("Required")
    .max(9.25)
    .min(6.80),
  height: Yup.number()
    .test(
      "is-decimal",
      "The amount should be a decimal with maximum two digits after comma",
      (val: any) => {
        if (val != undefined) {
          return patternTwoDigisAfterComma.test(val);
        }
        return true;
      }
    )
    .typeError("Number required")
    .required("Required")
    .min(50),
  neck: Yup.number()
    .test(
      "is-decimal",
      "The amount should be a decimal with maximum two digits after comma",
      (val: any) => {
        if (val != undefined) {
          return patternTwoDigisAfterComma.test(val);
        }
        return true;
      }
    )
    .typeError("Number required")
    .required("Required")
    .max(9)
    .min(5.5),
  saveSizeProfile: Yup.boolean(),
});

interface MekhwarBuyOptionsForm {
  shoulder: number;
  arm_width: number;
  wrist: number;
  height: number;
  neck: number;
  hips: number;
  sleeves_length: number;
  saveSizeProfile: boolean;
  localizations?: any;
  bust: number;
}

export interface MekhwarBuyOptionsProps {
  id?: string;
  sizes?: any[];
  description?: string;
  localizations?: any;
  fabric?: any;
  customizable?: boolean;
}

export const MekhwarBuyOptions = (props: MekhwarBuyOptionsProps) => {
  const [isLoading, setIsLoading] = useState(false);
  const [selectedSize, setSelectedSize] = useState("CUSTOM");
  const [sizeProfiles, setSizeProfiles] = useState<any[]>([]);
  const [selectedSizeProfile, setSelectedSizeProfile] = useState<any>(null);
  const [saveSizeProfile, setSaveSizeProfile] = useState(false);
  const t = useTranslations("shop");
  const [selectedChestOption, setSelectedChestOption] = useState(t("chest_point"));
  const [selectedCupOption, setSelectedCupOption] = useState(t("cup_size"));
  const [customerInstructions, setcustomerInstructions] = useState("");
  const [shoulder, setShoulder] = useState<number>();
  const [neck, setNeck] = useState<number>();
  const [height, setHeight] = useState<number>();
  const [wrist, setWrist] = useState<number>();
  const [sleevesLength, setSleevesLength] = useState<number>();
  const [armWidth, setArmWidth] = useState<number>();
  const [hips, setHips] = useState<number>();
  const [bust, setBust] = useState<number>();
  // const [selectedWristOption, setSelectedWristOption] = useState("Wrist Style");
  // const [selectedNeckOption, setSelectedNeckOption] = useState("Neck Style");
  const ctx = useAuth();
  const router = useRouter();
  const locale = useLocale();
  const handleChestChange = (value: string) => {
    setSelectedChestOption(value);
  };
  const handleCupChange = (value: string) => {
    setSelectedCupOption(value);
  };

  const {
    register,
    handleSubmit,
    formState: { errors },
    getValues,
    setValue,
    trigger,
    reset,
  } = useForm<MekhwarBuyOptionsForm>({
    mode: "onTouched",
    //@ts-ignore
    resolver: yupResolver(formSchema),
  });

  const loadData = async () => {
    const sizeProfiles = getUserProfiles();
    setSizeProfiles(sizeProfiles);
  };

  useEffect(() => {
    loadData();
  }, []);

  const handleAddToCart = async () => {
    if (!ctx.isAuthenticated) {
      return router.push("/login");
    }
    if (selectedChestOption === "Chest Point") {
      toast.error("Please select a Chest Point size", {
        position: "bottom-center",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "light",
      });
      return;
    }
    if (selectedCupOption === "Cup") {
      toast.error("Please select a Cup size", {
        position: "bottom-center",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "light",
      });
      return;
    }
    trigger();
    return await addCustomToCart();
  };

  const handleNewSize = () => {
    setSelectedSize("CUSTOM");
    setWrist(undefined);
    setShoulder(undefined);
    setNeck(undefined);
    setHeight(undefined);
    setWrist(undefined);
    setSleevesLength(undefined);
    setArmWidth(undefined);
    setHips(undefined);
    setSelectedSizeProfile(null);
    setBust(undefined);
    reset();
  };

  const addCustomToCart = async () => {
    const vals = getValues();
    for (const key in vals) {
      //@ts-ignore
      if (vals[key] < 1) {
        return;
      }
    }
    setIsLoading(true);
    const { data, error } = await addMekhwarToCart(ctx.token, {
      ...getValues(),
      cup: selectedCupOption,
      chest_point: selectedChestOption,
      customer_instructions: customerInstructions,
      mekhwarId: locale === "en" ? props.id : props.localizations,
      sizeProfile: selectedSizeProfile,
      saveSizeProfile: saveSizeProfile,
      // wrist: selectedWristOption,
      // neck: selectedNeckOption,
    });
    storeCart(data);
    setIsLoading(false);
    //@ts-ignore
    toast.success("Added successfully");
  };

  const handleSelectSavedSize = (item: any) => {
    reset();
    setSaveSizeProfile(false);
    setSelectedSize("saved");
    setSelectedChestOption(item?.chest_point?.toString());
    setSelectedCupOption(item.cup);
    setShoulder((prevShoulder) => item.shoulder);
    setNeck((prevNeck) => item.neck);
    setHeight(item.height);
    setWrist(item.wrist);
    setSleevesLength(item.sleeves_length);
    setArmWidth(item.arm_width);
    setHips(item.hips);
    setValue("height", item.height);
    setValue("shoulder", item.shoulder);
    setValue("neck", item.neck);
    setValue("wrist", item.wrist);
    setValue("sleeves_length", item.sleeves_length);
    setValue("arm_width", item.arm_width);
    setValue("hips", item.hips);
    setValue("bust", item.bust);
    setSelectedSizeProfile(item.id);
  };

  const handleCustomization = () => {
    if (!ctx.isAuthenticated) {
      return router.push("/login");
    }
    router.push({
      pathname: "/custom-mekhwar",
      query: {
        designId: props.id,
      },
    });
  };

  return (
    <div className="flex flex-col justify-start items-start w-[100%]">
      <div className="w-full">
        <div className={`options grid grid-cols-2 gap-5 ${props?.customizable && "hidden"}`}>
          <Dropdown>
            <DropdownTrigger>
              <Button
                className={`${
                  selectedSize === "saved"
                    ? "border-secondary text-secondary"
                    : "border-white/20 text-white/50"
                } grid-col rounded-[8px] min-w-0 min-h-0 p-0 text-[14px] xs:px-4 xs:py-5 sm:px-6 sm:py-5`}
                variant="bordered"
              >
                {t("saved_size")}
              </Button>
            </DropdownTrigger>
            <DropdownMenu aria-label="Static Actions">
              {sizeProfiles?.map((item, index) => {
                return (
                  <DropdownItem onClick={() => handleSelectSavedSize(item)} key={index}>
                    {item.title}
                  </DropdownItem>
                );
              })}
            </DropdownMenu>
          </Dropdown>

          <Button onClick={handleNewSize} className="bg-primary-700">
            {t("new_size")}
          </Button>
        </div>
      </div>
      <div
        className={`grid available xs:grid-cols-2 sm:grid-cols-3 auto-rows-fr w-full gap-4 mt-5 ${
          props?.customizable && "hidden"
        }`}
      >
        <DropdownComponent
          fullHeight={true}
          classNames={{ trigger: "h-full" }}
          describe="Chest Point"
          selectedValue={selectedChestOption}
          onSelectionChange={handleChestChange}
          items={[
            { key: "18", label: "18" },
            { key: "20", label: "20" },
            { key: "22", label: "22" },
            { key: "24", label: "24" },
            { key: "26", label: "26" },
          ]}
        />
        <DropdownComponent
          fullHeight={true}
          classNames={{ trigger: "h-full" }}
          describe="Cup"
          selectedValue={selectedCupOption}
          onSelectionChange={handleCupChange}
          items={[
            { key: "A", label: "A" },
            { key: "AA", label: "AA" },
            { key: "B", label: "B" },
            { key: "C", label: "C" },
            { key: "D", label: "D" },
            { key: "DD", label: "DD" },
            { key: "DDD", label: "DDD" },
            { key: "G", label: "G" },
            { key: "H", label: "H" },
          ]}
        />
        <ThemeInput
          custom={true}
          errorMessage={errors.shoulder?.message}
          extras={{ ...register("shoulder") }}
          label={t("shoulder")}
          classNames={{ inputWrapper: ["px-[16px] py-[12px] h-[60px]"] }}
          endItem={<p className="text-white font-[14px]">{t("in")}</p>}
          type="text"
          value2={shoulder}
        />
        <ThemeInput
          custom={true}
          errorMessage={errors.bust?.message}
          extras={{ ...register("bust") }}
          label={t("bust")}
          classNames={{ inputWrapper: ["px-[16px] py-[12px] h-[60px]"] }}
          endItem={<p className="text-white font-[14px]">{t("in")}</p>}
          type="text"
          value2={bust}
        />
        <ThemeInput
          custom={true}
          errorMessage={errors.arm_width?.message}
          extras={{ ...register("arm_width") }}
          label={t("arm_width")}
          classNames={{ inputWrapper: ["px-[16px] py-[12px] h-[60px]"] }}
          endItem={<p className="text-white font-[14px]">{t("in")}</p>}
          type="text"
          value2={armWidth}
        />
        <ThemeInput
          custom={true}
          errorMessage={errors.wrist?.message}
          extras={{ ...register("wrist") }}
          label={t("wrist")}
          classNames={{ inputWrapper: ["px-[16px] py-[12px] h-[60px]"] }}
          endItem={<p className="text-white font-[14px]">{t("in")}</p>}
          type="text"
          value2={wrist}
        />
        <ThemeInput
          custom={true}
          errorMessage={errors.height?.message}
          extras={{ ...register("height") }}
          label={t("height")}
          classNames={{ inputWrapper: ["px-[16px] py-[12px] h-[60px]"] }}
          endItem={<p className="text-white font-[14px]">{t("in")}</p>}
          type="text"
          value2={height}
        />
        <ThemeInput
          custom={true}
          errorMessage={errors.sleeves_length?.message}
          extras={{ ...register("sleeves_length") }}
          label={t("sleeves_length")}
          classNames={{ inputWrapper: ["px-[16px] py-[12px] h-[60px]"] }}
          endItem={<p className="text-white font-[14px]">{t("in")}</p>}
          type="text"
          value2={sleevesLength}
        />
        <ThemeInput
          custom={true}
          errorMessage={errors.neck?.message}
          extras={{ ...register("neck") }}
          label={t("neck")}
          classNames={{ inputWrapper: ["px-[16px] py-[12px] h-[60px]"] }}
          endItem={<p className="text-white font-[14px]">{t("in")}</p>}
          type="text"
          value2={neck}
        />
        <ThemeInput
          custom={true}
          errorMessage={errors.hips?.message}
          extras={{ ...register("hips") }}
          label={t("hips")}
          classNames={{ inputWrapper: ["px-[16px] py-[12px] h-[60px]"] }}
          endItem={<p className="text-white font-[14px]">{t("in")}</p>}
          type="text"
          value2={hips}
        />
      </div>

      <div className={`hidden my-[10px]`}></div>

      <textarea
        placeholder={t("additional_tailoring_requests")}
        className={`mt-3 p-2 border border-gray-300 bg-primary-800 rounded-md w-full resize-none overflow-y-auto ${
          props?.customizable && "hidden"
        }`}
        style={{ minHeight: "80px" }}
        value={customerInstructions}
        onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>
          setcustomerInstructions(e.target.value)
        }
      />

      <div className={`w-full flex flex-row justify-between items-center ${props.customizable ? "" : "my-[8px]"}`}>
        <Checkbox
          {...register("saveSizeProfile", {
            onChange: (e) => {
              if (e.target.checked) {
                setValue("saveSizeProfile", true);
                return;
              }
              setValue("saveSizeProfile", false);
            },
          })}
          color="secondary"
          className={`text-[18px] mt-0 ${props?.customizable && "hidden"}`}
        >
          {t("save_size_profile")}
        </Checkbox>

        <span className="flex items-end">
          <Link
            href="/size-guide"
            prefetch={true}
            className={`flex flex-row font-normal text-white text-md tracking-tight leading-tight underline whitespace-nowrap ${props?.customizable ? "mt-0" : "mt-4"}`}
          >
            <IconInfoCircle color="#ffb84d" size={25} />
            {t("need_help_taking_sizes")}
          </Link>
        </span>
      </div>

      <div className="my-[6px]"></div>

      <Button
        onClick={handleAddToCart}
        isLoading={isLoading}
        className={`bg-primary-700 text-white text-[16px] font-bold min-w-full min-h-0 py-6 rounded-[6px] ${
          props?.customizable && "hidden"
        }`}
        startContent={<IconShoppingBag size={18} />}
      >
        {t("add_to_cart")}
      </Button>

      <div className="xs:hidden my-[20px] h-full"></div>

      <Button
        onClick={handleCustomization}
        isLoading={isLoading}
        className={`bg-primary-700 text-secondary text-[16px] font-bold min-w-full min-h-0 py-6 rounded-[6px] ${
          !props?.customizable && "hidden"
        }`}
        startContent={<IconNeedleThread size={18} />}
      >
        {t("start_customization")}
      </Button>

      <ToastContainer />
    </div>
  );
};


=== ./components/shop/pagination.tsx ===
/* eslint-disable react-hooks/exhaustive-deps */
"use client";

import { Pagination } from "@nextui-org/react";
import {
  useParams,
  useRouter,
  usePathname,
  useSearchParams,
} from "next/navigation";
import { useEffect, useState } from "react";
import qs from "qs";
import { useLocale } from "next-intl";

const ShopPagination = (props: any) => {
  const router = useRouter();
  const pathName = usePathname();
  const searchparams = useSearchParams();
  const [page, setPage] = useState(0);
  const [pageCount, setPageCount] = useState(0);

  const handlePageChange = (page: number) => {
    if (window !== undefined) {
      let s = window?.location.search;
      if (s?.length) s = s.slice(1, s.length);
      const parsed: any = qs.parse(s);
      if (!parsed?.pagination) parsed.pagination = {};
      parsed.pagination.page = page;
      router.push(
        `${pathName}?${qs.stringify(parsed, { encodeValuesOnly: true })}`,
        { scroll: true }
      );
    }
  };

  useEffect(() => {
    if (props?.data?.pageCount) {
      setPageCount(props.data.pageCount);
      setPage(props.data.page);
    }

    if (window !== undefined) {
      let s = window?.location.search;
      if (s?.length) s = s.slice(1, s.length);
      const parsed: any = qs.parse(s);
      if (parsed?.pagination?.page) {
        setPage(+parsed.pagination.page);
      }
    }
  }, [props?.data?.pageCount, props?.data?.page, searchparams.getAll("filter")]);

  return (
    <>
      {pageCount > 0 && (
        <Pagination
          classNames={{
            item: ["bg-primary-700"],
            cursor: ["bg-secondary"],
          }}
          total={pageCount}
          page={page}
          initialPage={page}
          onChange={handlePageChange}
          hidden={pageCount < 1 || page < 1}
        />
      )}
    </>
  );
};

export default ShopPagination;


=== ./components/shop/ProductDetailRating.tsx ===
'use client'
import { Rating } from '@smastrom/react-rating'
import '@smastrom/react-rating/style.css'

export interface ProductDetailRatingProps {
  value: number;
}

export function ProductDetailRating({ value }: ProductDetailRatingProps) {

  return (
    <div className="flex flex-row justify-start items-center">
      <Rating value={value || 0}
                readOnly
                isDisabled
                items={5} style={{ maxWidth: 100 }} />
      <p className="text-secondary-900 ml-2 opacity-100 sm:text-[18px]">{value}</p>
    </div>
  )
}

=== ./components/shop/ProductImageSwiperList.tsx ===
'use client'
import { Swiper, SwiperSlide } from "swiper/react";
import {
  GlassMagnifier,
  MagnifierContainer
} from "react-image-magnifiers";
import { FreeMode, Navigation, Thumbs } from 'swiper/modules';
import { useState } from "react";
import Image from "next/image";
import CardContainer from "@/abstract/CardContainer";
import 'swiper/css';
import 'swiper/css/free-mode';
import 'swiper/css/navigation';
import 'swiper/css/thumbs';

export interface ProductImageSwiperListProps {
  images: string[]
}

export const ProductImageSwiperList = (props: ProductImageSwiperListProps) => {

  const [thumbsSwiper, setThumbsSwiper] = useState<any>(null);

  const { images } = props;

  return (
    <div className="sm:w-[500px] sm:h-[500px] xs:w-full">
      <Swiper
        style={{
          //@ts-ignore
          '--swiper-navigation-color': '#fff',
          '--swiper-pagination-color': '#fff',
        }}
        spaceBetween={10}
        navigation={true}
        thumbs={{swiper: thumbsSwiper && !thumbsSwiper?.destroyed ? thumbsSwiper : null}}
        modules={[FreeMode, Navigation, Thumbs]}
        className="mySwiper2"
      >
        {
          images?.map((item, index) => {
            return (
              <SwiperSlide key={index}>
                <CardContainer relative={false} scissors={false} noPadding={true} borderRadius={18}>
                <div className="magincont w-auto xs:min-w-[350px] xs:w-full xs:h-[90vw] xs:min-h-[350px] sm:min-w-[500px] sm:min-h-[500px] sm:max-h-[500px] sm:max-w-[500px] object-cover">
                  {/* <Image priority={true} unoptimized 
                    src={item} 
                    width={100} 
                    height={100} 
                    className="p-[2px] rounded-[18px] w-auto xs:min-w-[350px] xs:w-[98vw] xs:h-[90vw] xs:min-h-[350px] sm:min-w-[500px] sm:min-h-[500px] sm:max-h-[500px] sm:max-w-[500px] object-cover" alt="product image" fetchPriority="high" /> */}
                    <MagnifierContainer className="w-auto xs:min-w-[350px] xs:w-full xs:h-[90vw] xs:min-h-[350px] sm:min-w-[500px] sm:min-h-[500px] sm:max-h-[500px] sm:max-w-[500px] object-cover">
                      <GlassMagnifier
                        className="p-[2px] rounded-[18px] w-auto xs:min-w-[350px] xs:w-full xs:h-[90vw] xs:min-h-[350px] sm:min-w-[500px] sm:min-h-[500px] sm:max-h-[500px] sm:max-w-[500px] object-cover overflow-hidden"
                        magnifierSize={"60%"}
                        magnifierBorderColor="#FFD992"
                        allowOverflow={false}
                        square
                        imageSrc={item}
                      />
                  </MagnifierContainer>
                </div>
                </CardContainer>
              </SwiperSlide>
            )
          })
        }
      </Swiper>

      <div className="my-7"></div>

      <Swiper
        onSwiper={setThumbsSwiper}
        spaceBetween={32}
        slidesPerView={6}
        freeMode={true}
        watchSlidesProgress={true}
        navigation={true}
        modules={[FreeMode, Navigation, Thumbs]}
        className="productPageThumbs"
      >
        {
          images?.map((item, index) => {
            return (
              <SwiperSlide 
                key={index + "thumb"}
                className="sm:min-w-[100px] sm:min-h-[100px] sm:max-h-[100px] sm:max-w-[100px] thumbsSwiperSlide"
              >
                <Image
                  src={item} 
                  width={100} 
                  height={100} 
                  className="w-auto rounded-[9px] xs:min-w-[60px] xs:max-h-[60px] sm:min-w-[100px] sm:min-h-[100px] sm:max-h-[100px] sm:max-w-[100px] object-cover" 
                  alt="product image" 
                  fetchPriority="high"
                />
              </SwiperSlide>
            )
          })
        }
      </Swiper>
    </div>
  )
}


=== ./components/shop/shop-page-header.tsx ===

'use client'
import { Button } from '@nextui-org/react';
import { IconChevronLeft } from '@tabler/icons-react';
import { useRouter } from 'next/navigation'

const ShopPageHeader = ({title, description, coloredTitle}: {title: string, coloredTitle: string, description: string}) => {
  const router = useRouter();

  const handleBack = () => {
    // router.prefetch();
    router.back();
  }

  return (
    <header style={{boxSizing: "border-box"}} className="xs:mb-12 sm:mb-12 flex min-h-[50px] justify-start items-center">
      <div className=" flex items-center justify-center h-[60px] px-3">
        <Button onClick={handleBack} isIconOnly size="sm" className="xs:text-[15px] xs:min-w-[25px] xs:min-h-[25px] xs:h-[25px] bg-transparent text-[20px] w-[10px] p-x-0 rounded-md border-white border-2"><IconChevronLeft className='xs:w-[15px]' /></Button>
      </div>
      <div>
        <h1 className="text-white xs:text-[20px] text-5xl font-black">{title} <span className="text-secondary">{coloredTitle}</span></h1>
        <p className="text-caption">{description}</p>
      </div>
    </header>
  );
}

export default ShopPageHeader;

=== ./components/shop/customization/CustomDesignStepDialog.tsx ===
'use client'
import React from "react";
import { Modal, ModalContent, ModalHeader, ModalBody, ModalFooter, Button, useDisclosure, RadioGroup, Radio } from "@nextui-org/react";
import CardContainer from "@/abstract/CardContainer";
import { useRouter } from "@/utils";
import { IconChevronRight, IconInfoCircle } from "@tabler/icons-react";
import { useTranslations } from "next-intl";

export interface CustomDesignStepDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  selectedSize: string | null;
  selectedSizeProfile: any;
  shoulder?: any;
  wrist?: any;
  bust?: any;
  arm_length?: any;
  top_length?: any;
  top_width?: any;
  saveSizeProfile?: any;
  id: number;
}

const CustomDesignStepDialog = ({id, open, onOpenChange, selectedSize, selectedSizeProfile, shoulder, wrist, bust, arm_length, top_length, top_width, saveSizeProfile }: CustomDesignStepDialogProps) => {
  const [nextStep, setNextStep] = React.useState("tailor");
  const router = useRouter();
  const t = useTranslations("shop");

  const onContinue = () => {
    const query = {
      shoulder: shoulder,
      wrist: wrist,
      bust: bust,
      arm_length: arm_length,
      top_length: top_length,
      top_width: top_width,
      saveSizeProfile: saveSizeProfile,
      selectedSize: selectedSize,
      selectedSizeProfile: selectedSizeProfile,
      fabricId: id,
    };
    if (nextStep === "tailor") {
      router.push({
        pathname: `/custom/journey/[fabricId]/tailor`,
        params: {
          fabricId: id,
        },
        query,
      }, {
        scroll: true,
      });
    } else {
      router.push({
        pathname: `/custom/journey/[fabricId]/design`,
        params: {
          fabricId: id,
        },
        query,
      }, {
        scroll: true
      });
    }
  }
  return (
    <>
      <Modal isOpen={open} onOpenChange={onOpenChange}>
        <ModalContent className="bg-primary">
          {(onClose) => (
            <CardContainer noPadding={true} scissors={false}>
              <div className="px-2 py-6">
              <ModalHeader className="flex flex-row justify-start items-center">
                <IconInfoCircle size={24} className="mr-2 text-secondary" />
                <h1 className="text-secondary text-[20px] text-bold">Custom Mekhwar Process</h1>
              </ModalHeader>
              <ModalBody>
                <p>
                  Please select whether you want to choose a design or a tailor for to proceed with your custom design order.
                </p>

                <RadioGroup value={nextStep} onChange={(e) => setNextStep(e.target.value)} className="mt-5" color="secondary" orientation="horizontal">
                  <Radio value="tailor">Choose Tailor</Radio>
                  <Radio value="design">Choose Design</Radio>
                </RadioGroup>
              </ModalBody>
              <ModalFooter>
                <Button onClick={onContinue} color="secondary" className="bg-secondary-800 text-black px-10 py-4 rounded-[5px]" onPress={onContinue}>
                  <IconChevronRight /> {t("next")}
                </Button>
              </ModalFooter>
              </div>
            </CardContainer>
          )}
        </ModalContent>
      </Modal>
    </>
  );
}

export default CustomDesignStepDialog;

=== ./components/shop/customization/index.ts ===
export * from "./CustomDesignStepDialog";


=== ./components/shop/rating/index.tsx ===
'use client'
import React from "react";
import { Tabs, Tab, Progress, Button } from "@nextui-org/react";
import { Rating } from "react-simple-star-rating";
import { IconCheck } from "@tabler/icons-react";
import { useTranslations } from "next-intl";
export interface RatingsSectionProps {
  description?: string;
  highlights?: string[];
}

interface IStats {
  averageScore: number;
  reviewsCount: number | null;
}

interface IAuthor {
  username: string;
  email: string;
  id: number;
}

interface IReview {
  id: number;
  createdAt: string;
  comment: string | null;
  author: IAuthor | null;
  score: number;
}

export const RatingsSection = ({ description, highlights }: RatingsSectionProps) => {
  const t = useTranslations("shop")

  return (
    <section className="ratings-by-customers w-full">
      <Tabs
        aria-label="Options"
        color="primary"
        variant="underlined"
        className="w-full"
        classNames={{
          tabList: "gap-6 w-full relative rounded-none p-0 border-b border-divider xs:justify-center",
          cursor: "w-full bg-secondary",
          tab: "max-w-fit px-0 h-12",
          tabContent: "group-data-[selected=true]:text-secondary"

        }}
      >
        <Tab
          key="description"
          title={
            <div className="flex items-center space-x-2">
              <span className="px-10">{t("description")}</span>
            </div>
          }
        >
          <div className="w-full py-6">
            {/* <h2 className="product-description m-0 p-0 text-secondary-800 text-[24px] font-bold">{t("product_description")}</h2>

            <div className="my-6"></div>

            <div className="text-white font-[16px] max-w-[1054px]">{description}</div>

            <div className="my-12"></div> */}

            <h2 className="product-description m-0 p-0 text-secondary-800 text-[24px] font-bold">{t("product_description")}</h2>

            <ul>
              {
                highlights?.map((item, index) => {
                  return (
                    <li key={index} className="text-white font-[16px] max-w-[1054px] flex flex-row my-4 items-start justify-start">
                      <span className="bg-white rounded-full p-1 text-secondary mr-3">{<IconCheck size={12} />}</span>
                      <span className="text-white text-[16px]">{item}</span>
                    </li>
                  )
                })
              }
            </ul>
          </div>
        </Tab>

        <Tab
        className="hidden"
          key="reviews"
          title={
            <div className="flex items-center space-x-2">
              <span className="px-10">{t("reviews")}</span>
            </div>
          }
        >
          <div className="w-full flex flex-col justify-start items-start">
            <div className="w-full py-6 bg-primary-700 rounded-[10px] p-8 sm:py-12 mt-10">
              {/* average rating number */}
              <div className="flex flex-row justify-start items-center">

                <div className="rating-amount flex xs:flex-row sm:flex-col justify-center items-center sm:p-8 xs:w-full sm:w-[25%]">
                  <div className="xs:mr-8">
                    <h4 className="text-white font-bold text-[56px] m-0">4.5</h4>
                    <p className="text-caption font-[16px] mt-2">of 5 {t("reviews")}</p>
                  </div>
                  <Rating emptyStyle={{display: "flex"}} size={18} disableFillHover={true} iconsCount={5} />
                </div>

                <div className=" xs:hidden sm:flex flex-col w-full">

                  <div className="flex flex-row justify-start items-center my-1">
                    <h5 className="text-white text-[18px] font-medium min-w-[146px]">{t("excellent")}</h5>
                    <Progress className="ml-4 text-secondary min-w-[145px] h-[5px]" classNames={{ indicator: ["bg-secondary-800"] }} color="secondary" value={80} maxValue={100} />
                    <span className="text-caption text-[16px] ml-[25px]">100</span>
                  </div>

                  <div className="flex flex-row justify-start items-center my-1">
                    <h5 className="text-white text-[18px] font-medium min-w-[146px]">{t("good")}</h5>
                    <Progress className="ml-4 text-secondary min-w-[145px] h-[5px]" classNames={{ indicator: ["bg-secondary-800"] }} color="secondary" value={80} maxValue={100} />
                    <span className="text-caption text-[16px] ml-[25px]">100</span>
                  </div>
                  <div className="flex flex-row justify-start items-center my-1">
                    <h5 className="text-white text-[18px] font-medium min-w-[146px]">{t("average")}</h5>
                    <Progress className="ml-4 text-secondary min-w-[145px] h-[5px]" classNames={{ indicator: ["bg-secondary-800"] }} color="secondary" value={80} maxValue={100} />
                    <span className="text-caption text-[16px] ml-[25px]">100</span>
                  </div>
                  <div className="flex flex-row justify-start items-center my-1">
                    <h5 className="text-white text-[18px] font-medium min-w-[146px]">{t("bellow_average")}</h5>
                    <Progress className="ml-4 text-secondary min-w-[145px] h-[5px]" classNames={{ indicator: ["bg-secondary-800"] }} color="secondary" value={80} maxValue={100} />
                    <span className="text-caption text-[16px] ml-[25px]">100</span>
                  </div>
                  <div className="flex flex-row justify-start items-center my-1">
                    <h5 className="text-white text-[18px] font-medium min-w-[146px]">{t("poor")}</h5>
                    <Progress className="ml-4 text-secondary min-w-[145px] h-[5px]" classNames={{ indicator: ["bg-secondary-800"] }} color="secondary" value={80} maxValue={100} />
                    <span className="text-caption text-[16px] ml-[25px]">100</span>
                  </div>

                </div>

              </div>

              <div className="xs:hidden w-full mt-2 sm:flex flex-row justify-center items-center">
                <Button
                  className="w-[60%] border-white/50 text-[14px] text-[#BFCCCD] rounded-[7px] py-6 border-1 mt-5"
                  variant="bordered"
                >Leave Comment</Button>
              </div>
            </div>

            <div className=" sm:hidden xs:flex flex-col w-full mt-8">

              <div className="flex flex-row justify-start items-center my-1">
                <h5 className="text-white text-[18px] font-medium min-w-[146px]">{t("excellent")}</h5>
                <Progress className="ml-4 text-secondary min-w-[145px] h-[5px]" classNames={{ indicator: ["bg-secondary-800"] }} color="secondary" value={80} maxValue={100} />
                <span className="text-caption text-[16px] ml-[25px]">100</span>
              </div>

              <div className="flex flex-row justify-start items-center my-1">
                <h5 className="text-white text-[18px] font-medium min-w-[146px]">{t("good")}</h5>
                <Progress className="ml-4 text-secondary min-w-[145px] h-[5px]" classNames={{ indicator: ["bg-secondary-800"] }} color="secondary" value={80} maxValue={100} />
                <span className="text-caption text-[16px] ml-[25px]">100</span>
              </div>
              <div className="flex flex-row justify-start items-center my-1">
                <h5 className="text-white text-[18px] font-medium min-w-[146px]">{t("average")}</h5>
                <Progress className="ml-4 text-secondary min-w-[145px] h-[5px]" classNames={{ indicator: ["bg-secondary-800"] }} color="secondary" value={80} maxValue={100} />
                <span className="text-caption text-[16px] ml-[25px]">100</span>
              </div>
              <div className="flex flex-row justify-start items-center my-1">
                <h5 className="text-white text-[18px] font-medium min-w-[146px]">{t("bellow_average")}</h5>
                <Progress className="ml-4 text-secondary min-w-[145px] h-[5px]" classNames={{ indicator: ["bg-secondary-800"] }} color="secondary" value={80} maxValue={100} />
                <span className="text-caption text-[16px] ml-[25px]">100</span>
              </div>
              <div className="flex flex-row justify-start items-center my-1">
                <h5 className="text-white text-[18px] font-medium min-w-[146px]">{t("poor")}</h5>
                <Progress className="ml-4 text-secondary min-w-[145px] h-[5px]" classNames={{ indicator: ["bg-secondary-800"] }} color="secondary" value={80} maxValue={100} />
                <span className="text-caption text-[16px] ml-[25px]">100</span>
              </div>

            </div>

            <div className="w-full py-6 bg-primary-700 rounded-[10px] p-8 sm:py-12 mt-10">
              <h4>Saliha Salim</h4>
              <Rating emptyStyle={{display: "flex"}} size={18} disableFillHover={true} iconsCount={5} />
              <p className="text-white text-[15px] mt-4">Lorem ipsum, dolor sit amet consectetur adipisicing elit. Enim suscipit earum ut itaque beatae quae rem hic obcaecati magnam, quas cum officiis fugit vitae perspiciatis aspernatur explicabo inventore asperiores aperiam!</p>
            </div>

            <div className="w-full py-6 bg-primary-700 rounded-[10px] p-8 sm:py-12 mt-10">
              <h4>Salim Suhaila</h4>
              <Rating emptyStyle={{display: "flex"}} size={18} disableFillHover={true} iconsCount={5} />
              <p className="text-white text-[15px] mt-4">Lorem ipsum, dolor sit amet consectetur adipisicing elit. Enim suscipit earum ut itaque beatae quae rem hic obcaecati magnam, quas cum officiis fugit vitae perspiciatis aspernatur explicabo inventore asperiores aperiam!</p>
            </div>

            <div className="w-full py-6 bg-primary-700 rounded-[10px] p-8 sm:py-12 mt-10">
              <h4>Saliha w Salim</h4>
              <Rating emptyStyle={{display: "flex"}} size={18} disableFillHover={true} iconsCount={5} />
              <p className="text-white text-[15px] mt-4">Lorem ipsum, dolor sit amet consectetur adipisicing elit. Enim suscipit earum ut itaque beatae quae rem hic obcaecati magnam, quas cum officiis fugit vitae perspiciatis aspernatur explicabo inventore asperiores aperiam!</p>
            </div>

            <div className="w-full py-6 flex justify-center items-center rounded-[10px] p-8 sm:py-12 mt-10">
              <Button variant="bordered" className="border-secondary-800 text-secondary-800">View More</Button>
            </div>
          </div>
        </Tab>


      </Tabs>
    </section>
  )
}

export default RatingsSection;

=== ./components/sliders/index.ts ===
export * from "./Solitaire";

=== ./components/sliders/Solitaire.tsx ===
'use client'
import SolitaireCard, { SolitaireCardProps } from "../cards/SolitaireCard";
import { Swiper, SwiperSlide } from 'swiper/react';
import "swiper/css";
import 'swiper/css/effect-cards';
import { EffectCards } from "swiper/modules";

interface SolitaireProps {
  items?: SolitaireCardProps[]
}

const Solitaire = (props: SolitaireProps) => {
  
  return (
    <div className="w-full h-full flex justify-center">
      <div style={{width: "250px"}}>
      <Swiper 
        effect={'cards'}
        grabCursor={true}
        modules={[EffectCards]}
        className="mySwiper"
        cardsEffect={{
          perSlideOffset: 12
        }}
        >
        {
          props.items?.length && props.items.map((item, index) => {
            return <SwiperSlide key={index}>
              <SolitaireCard
                maxWidth={230}
                image={item.image}
                title={item.title}
                price={item.price}
                rating={item.rating}
                id={item.id}
                tailorName={item.tailorName}
                customizable={item.customizable}
              />
            </SwiperSlide>
          })
        }
      </Swiper>
      </div>
    </div>
  )
}

export default Solitaire;

=== ./provider/api_routes.ts ===
import { getTokenFromLocalCookie } from "@/utils";
import { POST, GET, PUT, DELETE } from "./client";
import { operations, paths } from "./schema";
import qs from "qs";
import axios from "axios";
export const registerApi = (body: any) => POST("/auth/local/register", {body});

export const loginApi = (body: paths["/auth/local"]["post"]["requestBody"]["content"]["application/json"]) => POST("/auth/local", {body});

export const getHomePageData = () => POST("/home-page/localizations", {
  body: {
    locale: "en",
  }
});

interface GetFabricParams {
    sort?: string | undefined;
    "pagination[withCount]"?: boolean | undefined;
    "pagination[page]"?: number | undefined;
    "pagination[pageSize]"?: number | undefined;
    "pagination[limit]"?: number | undefined;
    "pagination[start]"?: number | undefined;
    populate?: string | undefined;
    fields?: string | undefined;
    filters?: Record<string, never> | undefined;
    locale?: string | undefined;
}

/**
 * Get the listing of fabrics.
 * 
 * @param {string} token - The access token for authentication.
 * @param {object} params - The query parameters for the request.
 * @returns {Promise<object>} - A promise that resolves to the fabric listing.
 */
export const getFabricListing = (token: string, params: operations["get/fabrics"]["parameters"]["query"]) => {
  // Create headers object and set Authorization and Accept headers
  let headers: any = new Headers();
  if (!token) token = process.env.API_TOKEN || getTokenFromLocalCookie() || "";
  headers.append("Authorization", `Bearer ${token}`);
  headers.append("Accept", "application/json");

  // Send GET request to /fabrics endpoint with headers and query parameters
  return GET("/fabrics", {
    headers,
    params: {
      query: {
        ...params,
        populate: "*",
        "pagination[pageSize]" : 200,
      },
    },
  });
};

export const getProductCategoryListing = (token: string, params: operations["get/categories"]["parameters"]["query"]) => {
  let headers: any = new Headers();
  if (!token) token = process.env.API_TOKEN || getTokenFromLocalCookie() || "";
  headers.append("Authorization", `Bearer ${token}`);
  headers.append("Accept", "application/json");
  return GET("/categories", {
    headers,
    params: {
      query: params
    }
  })
}

export const getProductListing = (token: string, params: operations["get/mekhwars"]["parameters"]["query"]) => {
  let headers: any = new Headers();
  if (!token) token = process.env.API_TOKEN || getTokenFromLocalCookie() || "";
  headers.append("Authorization", `Bearer ${token}`);
  headers.append("Accept", "application/json");
  return GET("/mekhwars", {
    headers,
    params: {
      query: params,
    },
  })
}

export const getHomeData = (token: string, params: operations["get/home-page"]["parameters"]["query"]) => {
  let headers: any = new Headers();
  if (!token) token = process.env.API_TOKEN || getTokenFromLocalCookie() || "";
  headers.append("Authorization", `Bearer ${token}`);
  headers.append("Accept", "application/json");
  return GET("/home-page", {
    headers,
    params: {
      query: params
    }
  })
}

export const getSiteConfig = () => {
  return GET("/site-config")
}

export const getTailorListing = (token: string, params: operations["get/tailors"]["parameters"]["query"]) => {
  let headers: any = new Headers();
  if (!token) token = process.env.API_TOKEN || getTokenFromLocalCookie() || "";
  headers.append("Authorization", `Bearer ${token}`);
  headers.append("Accept", "application/json");
  return GET("/tailors", {
    headers,
    params: {
      query: params
    }
  })
}

export const getDesignListing = (token: string, params: operations["get/designs"]["parameters"]["query"]) => {
  let headers: any = new Headers();
  if (!token) token = process.env.API_TOKEN || getTokenFromLocalCookie() || "";
  headers.append("Authorization", `Bearer ${token}`);
  headers.append("Accept", "application/json");
  return GET("/designs", {
    headers,
    params: {
      query: params
    }
  })
}

export const getTailorMekhwarListing = (token: string, params: operations["get/designs"]["parameters"]["query"]) => {
  let headers: any = new Headers();
  if (!token) token = process.env.API_TOKEN || getTokenFromLocalCookie() || "";
  headers.append("Authorization", `Bearer ${token}`);
  headers.append("Accept", "application/json");
  return GET("/mekhwars", {
    headers,
    params: {
      query: params
    }
  })
}

export const getDesignData = (token: string, params: operations["get/designs/{id}"]["parameters"]) => {
  let headers: any = new Headers();
  if (!token) token = process.env.API_TOKEN || getTokenFromLocalCookie() || "";
  headers.append("Authorization", `Bearer ${token}`);
  headers.append("Accept", "application/json");
  //@ts-ignore
  return GET("/designs/{id}?populate=deep", {
    headers,
    params
  });
}

export const getMekhwarByID = (token: string, id: any) => {
  let headers: any = new Headers();
  headers.append("Accept", "application/json");
  let url: any = `/mekhwars/{id}?populate=deep`;
  let options: any = {
    headers,
    params: {
      path: {
        id,
      },
    },
  };
  return GET(url,
    //@ts-ignore
    options)
}

export const getFabricByID = (token: string, id: any) => {
  let headers: any = new Headers();
  if (!token) token = process.env.API_TOKEN || getTokenFromLocalCookie() || "";
  headers.append("Authorization", `Bearer ${token}`);
  headers.append("Accept", "application/json");
  //@ts-ignore
  return GET(`/fabrics/{id}?populate=*,main_image,images,fabric_pattern.image,detail_list_item,detail_list_item.title`, {
    headers,
    params: {
      path: {
        id,
      },
    },
  })
}

export const getTailorByID = async (token: string, id: any, locale = "en") => {
  let headers: any = new Headers();
  if (!token) token = process.env.API_TOKEN || getTokenFromLocalCookie() || "";
  headers.append("Authorization", `Bearer ${token}`);
  headers.append("Accept", "application/json");
  //@ts-ignore
  let res = await GET(`/tailors/{id}?populate=*`, {
    headers,
    params: {
      path: {
        id,
      },
    },
  });

  //if res.locale = locale then return same
  //@ts-ignore
  if (res.data?.data?.attributes?.locale != locale) {
    //@ts-ignore
    const otherLocaleID = res.data?.data?.attributes?.localizations?.data?.[0].id;
    //@ts-ignore
    res = await GET(`/tailors/{id}?populate=*`, {
      headers,
      params: {
        path: {
          id: otherLocaleID,
        },
      },
    });
  }
  //else poulate 

  return res;
}

export const getMekhwarByMetaID = (token: string, id: any) => {
  let headers: any = new Headers();
  if (!token) token = process.env.API_TOKEN || getTokenFromLocalCookie() || "";
  headers.append("Authorization", `Bearer ${token}`);
  headers.append("Accept", "application/json");
  //@ts-ignore
  return GET(`/mekhwars/{id}?populate=*`, {
    headers,
    params: {
      path: {
        id,
      },
    },
  });
}

export const filterMekhwar = (params: operations["get/mekhwars"]["parameters"]["query"]) => {
  return GET(`/mekhwars`, {
    params: {
      query: params,
    }
  })
}

export const filterFabric = (params: operations["get/fabrics"]["parameters"]["query"]) => {
  return GET(`/fabrics`, {
    params: {
      query: params,
    }
  })
}

/*==============================================USER ENDPOINTS===================================================*/
export const getMe = (token?: string) => {
  let headers: any = new Headers();
  if (!token) token =  getTokenFromLocalCookie() || process.env.API_TOKEN || "";
  headers.append("Authorization", `Bearer ${token}`);
  headers.append("Accept", "application/json");
  //@ts-ignore
  return GET("/users/me?populate=size_profiles,addresses,cart,cart.mekhwar.mekhwar.main_image,cart.custom.design,cart.custom.design.image,cart.custom.tailor,cart.custom.fabric", {
    params: {
      query: ""
    },
    headers
  });
}

export const getFavoritedProducts = (token?: string) => {
  let headers: any = new Headers();
  if (!token) token =  getTokenFromLocalCookie() || process.env.API_TOKEN || "";
  headers.append("Authorization", `Bearer ${token}`);
  headers.append("Accept", "application/json");
  return GET("/favourite-product/get-user-favourite-products", {
    headers
  });
}

export const getCart = (token?: string) => {
  let headers: any = new Headers();
  headers.append("Authorization", `Bearer ${token}`);
  headers.append("Accept", "application/json");
  //@ts-ignore
  return GET("/cart/getOrInsert", {
    headers,
  });
}

export const addMekhwarToCart = (token: string, body: any) => {
  let headers: any = new Headers();
  headers.append("Authorization", `Bearer ${token}`);
  headers.append("Accept", "application/json");
  return PUT("/cart/add-custom", {
    headers,
    body
  });
}

export const addCustomToCart = (token: string, body: any) => {
  let headers: any = new Headers();
  headers.append("Authorization", `Bearer ${token}`);
  headers.append("Accept", "application/json");
  return PUT("/cart/add-custom", {
    headers,
    body
  });
}

export const incrementCartItem = (token: string, body: any) => {
  let headers: any = new Headers();
  headers.append("Authorization", `Bearer ${token}`);
  headers.append("Accept", "application/json");
  return PUT("/cart/increment/{id}", {
    headers,
    body,
    params: {
      path: {
        id: body?.id
      }
    }
  });
}

export const decrementCartItem = (token: string, body: any) => {
  let headers: any = new Headers();
  headers.append("Authorization", `Bearer ${token}`);
  headers.append("Accept", "application/json");
  return PUT("/cart/decrement/{id}", {
    headers,
    params: {
      path: {
        id: body?.id
      }
    },
    body,
  });
}

export const removeCartItem = (token: string, body: any) => {
  let headers: any = new Headers();
  headers.append("Authorization", `Bearer ${token}`);
  headers.append("Accept", "application/json");
  return PUT("/cart/remove-item/{id}", {
    headers,
    params: {
      path: {
        id: body?.id
      }
    },
    body
  });
}

export const applyCoupon = (token: string, body: any) => {
  let headers: any = new Headers();
  headers.append("Authorization", `Bearer ${token}`);
  headers.append("Accept", "application/json");
  return POST("/cart/coupon/check", {
    headers,
    body
  });
}

export const getCustomerAddresses = (token: string) => {
  let headers: any = new Headers();
  headers.append("Authorization", `Bearer ${token}`);
  headers.append("Accept", "application/json");
  return GET("/customer-addresses", {
    headers,
    params: {
      query: {
        filters: {
          
        }
      }
    }
  });
}

export const createCustomerAddress = (token: string | undefined, body: any) => {
  let headers: any = new Headers();
  headers.append("Authorization", `Bearer ${token}`);
  headers.append("Accept", "application/json");
  return POST("/customer-addresses/create", {
    headers,
    body
  });
}

export const updateCustomerAddress = (token: string | undefined, body: any) => {
  let headers: any = new Headers();
  headers.append("Authorization", `Bearer ${token}`);
  headers.append("Accept", "application/json");
  return PUT("/customer-addresses/updateAddress/{id}", {
    headers,
    params: {
      path: {
        id: body?.id
      }
    },
    body
  });
}

export const getClientSecret = (token: string | undefined, body: any) => {
  let headers: any = new Headers();
  headers.append("Authorization", `Bearer ${token}`);
  headers.append("Accept", "application/json");
  return POST("/orders/client-secret", {
    headers,
    body
  });
}

export const getCustomOrderDetails = (token: string | undefined, body: any) => {
  let headers: any = new Headers();
  headers.append("Authorization", `Bearer ${token}`);
  headers.append("Accept", "application/json");
  return GET("/custom-order/customer-get-order/{id}", {
    headers,
    params: {
      path: {
        id: body?.id
      }
    }
  });
}

export const updateCustomerDetails = (token: string | undefined, id: any, body: any) => {
  let headers: any = new Headers();
  headers.append("Authorization", `Bearer ${token}`);
  headers.append("Accept", "application/json");
  return PUT("/users/{id}", {
    headers,
    params: {
      path: {
        id,
      }
    },
    body
  });
}

/**
 * Deletes a customer address.
 *
 * @param {string} token - The authentication token.
 * @param {object} body - The request body containing the address ID.
 * @returns {Promise} - A promise that resolves with the API response.
 */
export const deleteCustomerAddress = (token: any, body: { id: number }) => {
  // Create the headers object
  let headers = new Headers();
  headers.append("Authorization", `Bearer ${token}`);
  headers.append("Accept", "application/json");

  // Call the DELETE API endpoint
  return DELETE("/customer-addresses/deleteAddress/{id}", {
    headers,
    params: {
      path: {
        id: body?.id
      }
    },
  });
}

export const getUserProfile = (token: string) => {
  let headers: any = new Headers();
  headers.append("Authorization", `Bearer ${token}`);
  headers.append("Accept", "application/json");
  return GET("/orders/user-profile", {
    headers
  });
}

export const cancelCustomOrder = (token: string | undefined, body: any) => {
  let headers: any = new Headers();
  headers.append("Authorization", `Bearer ${token}`);
  headers.append("Accept", "application/json");
  return POST("/custom-order/cancel-custom-order", {
    headers,
    body
  });
}

//create,update,delete size profile
export const createSizeProfile = (token: string | undefined, body: any) => {
  let headers: any = new Headers();
  headers.append("Authorization", `Bearer ${token}`);
  headers.append("Accept", "application/json");
  return POST("/size-profiles", {
    headers,
    body
  });
}

export const updateSizeProfile = (token: string | undefined, body: any) => {
  let headers: any = new Headers();
  headers.append("Authorization", `Bearer ${token}`);
  headers.append("Accept", "application/json");
  return PUT("/size-profiles/{id}", {
    headers,
    params: {
      path: {
        id: body?.id
      }
    },
    body
  });
}

export const deleteSizeProfile = (token: string | undefined, body: any) => {
  let headers: any = new Headers();
  headers.append("Authorization", `Bearer ${token}`);
  headers.append("Accept", "application/json");
  return DELETE("/size-profiles/{id}", {
    headers,
    params: {
      path: {
        id: body?.id
      }
    },
  });
}

export const createCustomOder = (token: string | undefined, body: any) => {
  let headers: any = new Headers();
  headers.append("Authorization", `Bearer ${token}`);
  headers.append("Accept", "application/json");
  return POST("/custom-order/customer-create-order", {
    headers,
    body
  });
}


export const quseUploadFile = async (token: string | undefined, body: any) => {
  let headers: any = new Headers();
  headers.append("Authorization", `Bearer ${token}`);
  headers.append("Accept", "application/json");
  headers.append("Content-Type", "multipart/form-data");
  const res = await axios.post(process.env.NEXT_PUBLIC_API_HOST + "upload", body, {
    headers: {
      "Content-Type": "multipart/form-data",
      "Authorization": `Bearer ${token}`
    }
  });
  return res;
}

export const addToFavorite = async (token: string | undefined, body: { productID: number, locale: string }) => {
  let headers: any = new Headers();
  headers.append("Authorization", `Bearer ${token}`);
  headers.append("Accept", "application/json");
  const res = await POST("/favourite-product/add", {
    headers,
    //@ts-ignore
    body
  });
  return res;
}

export const removeFromFavorite = async (token: string | undefined, body: { productID: number, locale: string }) => {
  let headers: any = new Headers();
  headers.append("Authorization", `Bearer ${token}`);
  headers.append("Accept", "application/json");
  const res = await POST("/favourite-product/remove", {
    headers,
    //@ts-ignore
    body
  });
  return res;
}

export const getPrivacyPolicy = async (locale: string) => {
  const res = await GET("/privacy-policy", {
    params: {
      query: {
        locale,
      }
    }
  });
  return res;
}

export const getTermsAndConditions = async (locale: string) => {
  const res = await GET("/terms-and-condition", {
    params: {
      query: {
        locale,
      }
    }
  });
  return res;
}

export const requestResetPassword = async (body: any) => {
  const res = await POST("/auth/forgot-password", {
    body
  });
  return res;
}

export const resetPassword = async (body: any) => {
  const res = await POST("/auth/reset-password", {
    body
  });
  return res;
}

export const getFooter = async (locale: string) => {
  const res = await GET("/footer", {
    params: {
      query: {
        locale,
        populate: "logo,link_section,link_section.Links"
      }
    }
  });
  return res;
}

export const getAboutUs = async (locale: string) => {
  const res = await GET("/about-us", {
    params: {
      query: {
        locale,
        populate: "show_case_1,show_case_2,show_case_3,how_it_works,how_it_works.step,seo"
      }
    }
  });
  return res;
}

export const getPurchasePolicy = async (locale: string) => {
  const res = await GET("/purchase-policy", {
    params: {
      query: {
        locale
      }
    }
  });
  return res;
}

export const extractError = (error: any) => {
  //@ts-ignore
  if (error?.error?.details?.errors?.[0]?.message) {
    //@ts-ignore
    return error?.error.details.errors[0].message;
  }

  if (error?.error?.message) {
    return error?.error?.message;
  }
}

export const sendContactUs = async (body: any) => {
  const res = await POST("/email-template/sendContactUs", {
    body,
  });
  return res;
}

=== ./provider/auth.ts ===
import Cookies from "js-cookie";



=== ./provider/AuthContext.tsx ===
'use client'
import { getEmailFromLocalCookie, getIdFromServerCookie, getToken, getTokenFromLocalCookie, getUserIDFromLocalCookie, getUserNameFromLocalCookie, removeToken } from '@/utils';
import { clearCart, getUserCart } from '@/utils/cart';
import { createContext, useContext, useEffect, useState } from 'react';

interface IUser {
  id: any;
  name: any;
  email: any;
}
const AuthContext = createContext<{
  token: string;
  setToken: (token: string) => void;
  isAuthenticated: boolean;
  setIsAuthenticated: (isAuthenticated: boolean) => void;
  user: IUser;
  setUser: (user: IUser) => void;
  checkAuth: any;
  cartItemCount: number;
  setCartItemCount: (i: number) => void;
  logout: () => void;
}>({
  token: '',
  setToken: (token: string) => { },
  isAuthenticated: false,
  setIsAuthenticated: (isAuthenticated: boolean) => { },
  user: {
    id: '',
    name: '',
    email: ''
  },
  setUser: (user: IUser) => { },
  checkAuth: () => { },
  cartItemCount: 0,
  setCartItemCount: (i: number) => { },
  logout: () => { }
});

export const useAuth = () => {
  return useContext(AuthContext);
}

/**
 * Component that provides authentication context to its children.
 * @param children - The child components.
 * @returns The component that provides authentication context.
 */
export default function AuthContextProvider({ children }: any) {
  const [token, setToken] = useState('');
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [user, setUser] = useState<IUser>({
    id: undefined,
    name: '',
    email: ''
  });
  const [cartItemCount, setCartItemCount] = useState(0);


  const checkAuth = () => {
    const token = getTokenFromLocalCookie();
    const id = getUserIDFromLocalCookie();
    const name = getUserNameFromLocalCookie();
    const email = getEmailFromLocalCookie();
    if (token) {
      setToken(token);
      setIsAuthenticated(true);
      setUser({
        id,
        name,
        email
      });
      return true;
    }
    return false;
  }

  const checkCart = () => {
    const isAuthenticated = checkAuth();
    const cart = getUserCart();
    if ((cart?.mekhwar || cart?.custom) && isAuthenticated) {
      setCartItemCount(
        cart?.custom.reduce((c: any, p: { quantity: any; }, a: any) => (p?.quantity || 0) + c, 0)
      );
    }
  }

  const handleLocalStorageUpdate = () => {
    if (window !== undefined) {
      checkCart();
    }
  }

  useEffect(() => {
    checkAuth();
    //@ts-ignore
    // eslint-disable-next-line react-hooks/exhaustive-deps
    if (window !== undefined) {
      window.addEventListener("storage", handleLocalStorageUpdate);
      checkCart();
    }
    return () => {
      //@ts-ignore
      // eslint-disable-next-line react-hooks/exhaustive-deps
      window.removeEventListener('storage', handleLocalStorageUpdate);
    }
  }, []);

  const logout = () => {
    setToken("");
    setIsAuthenticated(false);
    if (window !== undefined) {
      clearCart();
      setUser({
        email: "",
        id: "",
        name: ""
      });
      localStorage.clear();
      removeToken()
    }
  }

  return (
    <AuthContext.Provider
      value={{
        token,
        setToken,
        isAuthenticated,
        setIsAuthenticated,
        user,
        setUser,
        checkAuth,
        cartItemCount,
        setCartItemCount,
        logout,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
}


=== ./provider/client.ts ===
import createClient from "openapi-fetch";
import { paths } from "./schema";

const { GET, PUT, POST, DELETE } = createClient<paths>({ baseUrl: process?.env?.NEXT_PUBLIC_API_HOST ||  "https://d924s003eg.execute-api.eu-central-1.amazonaws.com/api/" || "http://localhost:1337/api/" || process.env.API_HOST });

export { GET, PUT, POST, DELETE };

=== ./provider/ImageZoomProvider.tsx ===
"use client";

import { createContext, useContext } from "react";

const ImageZoomContext = createContext<{}>({});

export const useImageZoom = () => {
    return useContext(ImageZoomContext);
}

export function ImageZoomProvider ({ children }: any) {
    return (
        <ImageZoomContext.Provider value={{}}>
            {children}
        </ImageZoomContext.Provider>
    );
}

=== ./provider/index.ts ===
export * from "./client";
export * from "./api_routes";

=== ./provider/schema.d.ts ===
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/about-us": {
    get: operations["get/about-us"];
    put: operations["put/about-us"];
    delete: operations["delete/about-us"];
  };
  "/about-us/localizations": {
    post: operations["post/about-us/localizations"];
  };
  "/carts": {
    get: operations["get/carts"];
    post: operations["post/carts"];
  };
  "/carts/{id}": {
    get: operations["get/carts/{id}"];
    put: operations["put/carts/{id}"];
    delete: operations["delete/carts/{id}"];
  };
  "/cart/getOrInsert": {
    get: operations["get/cart/getOrInsert"];
  };
  "/cart/add-mekhwar": {
    put: operations["put/cart/add-mekhwar"];
  };
  "/cart/add-custom": {
    put: operations["put/cart/add-custom"];
  };
  "/cart/remove-item/{id}": {
    put: operations["put/cart/remove-item/{id}"];
  };
  "/cart/decrement/{id}": {
    put: operations["put/cart/decrement/{id}"];
  };
  "/cart/increment/{id}": {
    put: operations["put/cart/increment/{id}"];
  };
  "/cart/coupon/check": {
    post: operations["post/cart/coupon/check"];
  };
  "/categories": {
    get: operations["get/categories"];
    post: operations["post/categories"];
  };
  "/categories/{id}": {
    get: operations["get/categories/{id}"];
    put: operations["put/categories/{id}"];
    delete: operations["delete/categories/{id}"];
  };
  "/categories/{id}/localizations": {
    post: operations["post/categories/{id}/localizations"];
  };
  "/coupons": {
    get: operations["get/coupons"];
    post: operations["post/coupons"];
  };
  "/coupons/{id}": {
    get: operations["get/coupons/{id}"];
    put: operations["put/coupons/{id}"];
    delete: operations["delete/coupons/{id}"];
  };
  "/coupon-usages": {
    get: operations["get/coupon-usages"];
    post: operations["post/coupon-usages"];
  };
  "/coupon-usages/{id}": {
    get: operations["get/coupon-usages/{id}"];
    put: operations["put/coupon-usages/{id}"];
    delete: operations["delete/coupon-usages/{id}"];
  };
  "/custom-orders": {
    get: operations["get/custom-orders"];
    post: operations["post/custom-orders"];
  };
  "/custom-orders/{id}": {
    get: operations["get/custom-orders/{id}"];
    put: operations["put/custom-orders/{id}"];
    delete: operations["delete/custom-orders/{id}"];
  };
  "/custom-order/customer-create-order": {
    post: operations["post/custom-order/customer-create-order"];
  };
  "/custom-order/cancel-custom-order": {
    post: operations["post/custom-order/cancel-custom-order"];
  };
  "/custom-order/customer-get-order/{id}": {
    get: operations["get/custom-order/customer-get-order/{id}"];
  };
  "/customer-addresses/my-addresses": {
    get: operations["get/customer-addresses/my-addresses"];
  };
  "/customer-addresses/create": {
    post: operations["post/customer-addresses/create"];
  };
  "/customer-addresses/updateAddress/{id}": {
    put: operations["put/customer-addresses/updateAddress/{id}"];
  };
  "/customer-addresses/deleteAddress/{id}": {
    delete: operations["delete/customer-addresses/deleteAddress/{id}"];
  };
  "/customer-addresses": {
    get: operations["get/customer-addresses"];
    post: operations["post/customer-addresses"];
  };
  "/customer-addresses/{id}": {
    get: operations["get/customer-addresses/{id}"];
    put: operations["put/customer-addresses/{id}"];
    delete: operations["delete/customer-addresses/{id}"];
  };
  "/designs": {
    get: operations["get/designs"];
    post: operations["post/designs"];
  };
  "/designs/{id}": {
    get: operations["get/designs/{id}"];
    put: operations["put/designs/{id}"];
    delete: operations["delete/designs/{id}"];
  };
  "/email-templates": {
    get: operations["get/email-templates"];
    post: operations["post/email-templates"];
  };
  "/email-templates/{id}": {
    get: operations["get/email-templates/{id}"];
    put: operations["put/email-templates/{id}"];
    delete: operations["delete/email-templates/{id}"];
  };
  "/email-template/sendContactUs": {
    post: operations["post/email-template/sendContactUs"];
  };
  "/fabrics": {
    get: operations["get/fabrics"];
    post: operations["post/fabrics"];
  };
  "/fabrics/{id}": {
    get: operations["get/fabrics/{id}"];
    put: operations["put/fabrics/{id}"];
    delete: operations["delete/fabrics/{id}"];
  };
  "/fabrics/{id}/localizations": {
    post: operations["post/fabrics/{id}/localizations"];
  };
  "/fabric-categories": {
    get: operations["get/fabric-categories"];
    post: operations["post/fabric-categories"];
  };
  "/fabric-categories/{id}": {
    get: operations["get/fabric-categories/{id}"];
    put: operations["put/fabric-categories/{id}"];
    delete: operations["delete/fabric-categories/{id}"];
  };
  "/fabric-categories/{id}/localizations": {
    post: operations["post/fabric-categories/{id}/localizations"];
  };
  "/favourite-products": {
    get: operations["get/favourite-products"];
    post: operations["post/favourite-products"];
  };
  "/favourite-products/{id}": {
    get: operations["get/favourite-products/{id}"];
    put: operations["put/favourite-products/{id}"];
    delete: operations["delete/favourite-products/{id}"];
  };
  "/favourite-product/add": {
    post: operations["post/favourite-product/add"];
  };
  "/favourite-product/remove": {
    post: operations["post/favourite-product/remove"];
  };
  "/favourite-product/get-user-favourite-products": {
    get: operations["get/favourite-product/get-user-favourite-products"];
  };
  "/footer": {
    get: operations["get/footer"];
    put: operations["put/footer"];
    delete: operations["delete/footer"];
  };
  "/footer/localizations": {
    post: operations["post/footer/localizations"];
  };
  "/home-page": {
    get: operations["get/home-page"];
    put: operations["put/home-page"];
    delete: operations["delete/home-page"];
  };
  "/home-page/localizations": {
    post: operations["post/home-page/localizations"];
  };
  "/mekhwars": {
    get: operations["get/mekhwars"];
    post: operations["post/mekhwars"];
  };
  "/mekhwars/{id}": {
    get: operations["get/mekhwars/{id}"];
    put: operations["put/mekhwars/{id}"];
    delete: operations["delete/mekhwars/{id}"];
  };
  "/mekhwars/{id}/localizations": {
    post: operations["post/mekhwars/{id}/localizations"];
  };
  "/orders": {
    get: operations["get/orders"];
    post: operations["post/orders"];
  };
  "/orders/{id}": {
    get: operations["get/orders/{id}"];
    put: operations["put/orders/{id}"];
    delete: operations["delete/orders/{id}"];
  };
  "/orders/client-secret": {
    post: operations["post/orders/client-secret"];
  };
  "/orders/publishable-key": {
    get: operations["get/orders/publishable-key"];
  };
  "/orders/wh": {
    post: operations["post/orders/wh"];
  };
  "/orders/user-profile": {
    get: operations["get/orders/user-profile"];
  };
  "/privacy-policy": {
    get: operations["get/privacy-policy"];
    put: operations["put/privacy-policy"];
    delete: operations["delete/privacy-policy"];
  };
  "/privacy-policy/localizations": {
    post: operations["post/privacy-policy/localizations"];
  };
  "/purchase-policy": {
    get: operations["get/purchase-policy"];
    put: operations["put/purchase-policy"];
    delete: operations["delete/purchase-policy"];
  };
  "/purchase-policy/localizations": {
    post: operations["post/purchase-policy/localizations"];
  };
  "/site-config": {
    get: operations["get/site-config"];
    put: operations["put/site-config"];
    delete: operations["delete/site-config"];
  };
  "/size-profiles": {
    get: operations["get/size-profiles"];
    post: operations["post/size-profiles"];
  };
  "/size-profiles/{id}": {
    get: operations["get/size-profiles/{id}"];
    put: operations["put/size-profiles/{id}"];
    delete: operations["delete/size-profiles/{id}"];
  };
  "/tailors": {
    get: operations["get/tailors"];
    post: operations["post/tailors"];
  };
  "/tailors/{id}": {
    get: operations["get/tailors/{id}"];
    put: operations["put/tailors/{id}"];
    delete: operations["delete/tailors/{id}"];
  };
  "/tailors/{id}/localizations": {
    post: operations["post/tailors/{id}/localizations"];
  };
  "/terms-and-condition": {
    get: operations["get/terms-and-condition"];
    put: operations["put/terms-and-condition"];
    delete: operations["delete/terms-and-condition"];
  };
  "/terms-and-condition/localizations": {
    post: operations["post/terms-and-condition/localizations"];
  };
  "/upload": {
    /** @description Upload files */
    post: {
      /** @description Upload files */
      requestBody: {
        content: {
          "multipart/form-data": {
            /** @description The folder where the file(s) will be uploaded to (only supported on strapi-provider-upload-aws-s3). */
            path?: string;
            /** @description The ID of the entry which the file(s) will be linked to */
            refId?: string;
            /** @description The unique ID (uid) of the model which the file(s) will be linked to (api::restaurant.restaurant). */
            ref?: string;
            /** @description The field of the entry which the file(s) will be precisely linked to. */
            field?: string;
            files: string[];
          };
        };
      };
      responses: {
        /** @description response */
        200: {
          content: {
            "application/json": components["schemas"]["UploadFile"][];
          };
        };
      };
    };
  };
  "/upload?id={id}": {
    /** @description Upload file information */
    post: {
      parameters: {
        query: {
          /** @description File id */
          id: string;
        };
      };
      /** @description Upload files */
      requestBody: {
        content: {
          "multipart/form-data": {
            fileInfo?: {
              name?: string;
              alternativeText?: string;
              caption?: string;
            };
            /** Format: binary */
            files?: string;
          };
        };
      };
      responses: {
        /** @description response */
        200: {
          content: {
            "application/json": components["schemas"]["UploadFile"][];
          };
        };
      };
    };
  };
  "/upload/files": {
    get: {
      responses: {
        /** @description Get a list of files */
        200: {
          content: {
            "application/json": components["schemas"]["UploadFile"][];
          };
        };
      };
    };
  };
  "/upload/files/{id}": {
    get: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Get a specific file */
        200: {
          content: {
            "application/json": components["schemas"]["UploadFile"];
          };
        };
      };
    };
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** @description Delete a file */
        200: {
          content: {
            "application/json": components["schemas"]["UploadFile"];
          };
        };
      };
    };
  };
  "/connect/{provider}": {
    /**
     * Login with a provider
     * @description Redirects to provider login before being redirect to /auth/{provider}/callback
     */
    get: {
      parameters: {
        path: {
          /** @description Provider name */
          provider: string;
        };
      };
      responses: {
        /** @description Redirect response */
        301: {
          content: never;
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/auth/local": {
    /**
     * Local login
     * @description Returns a jwt token and user info
     */
    post: {
      requestBody: {
        content: {
          /**
           * @example {
           *   "identifier": "foobar",
           *   "password": "Test1234"
           * }
           */
          "application/json": {
            identifier?: string;
            password?: string;
          };
        };
      };
      responses: {
        /** @description Connection */
        200: {
          content: {
            "application/json": components["schemas"]["Users-Permissions-UserRegistration"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/auth/local/register": {
    /**
     * Register a user
     * @description Returns a jwt token and user info
     */
    post: {
      requestBody: {
        content: {
          /**
           * @example {
           *   "username": "foobar",
           *   "email": "foo.bar@strapi.io",
           *   "password": "Test1234"
           * }
           */
          "application/json": {
            username?: string;
            email?: string;
            password?: string;
          };
        };
      };
      responses: {
        /** @description Successful registration */
        200: {
          content: {
            "application/json": components["schemas"]["Users-Permissions-UserRegistration"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/auth/{provider}/callback": {
    /** Default Callback from provider auth */
    get: {
      parameters: {
        path: {
          /** @description Provider name */
          provider: string;
        };
      };
      responses: {
        /** @description Returns a jwt token and user info */
        200: {
          content: {
            "application/json": components["schemas"]["Users-Permissions-UserRegistration"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/auth/forgot-password": {
    /** Send rest password email */
    post: {
      requestBody: {
        content: {
          /**
           * @example {
           *   "email": "foo.bar@strapi.io"
           * }
           */
          "application/json": {
            email?: string;
          };
        };
      };
      responses: {
        /** @description Returns ok */
        200: {
          content: {
            "application/json": {
              /** @enum {string} */
              ok?: true;
            };
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/auth/reset-password": {
    /** Rest user password */
    post: {
      requestBody: {
        content: {
          /**
           * @example {
           *   "password": "Test1234",
           *   "passwordConfirmation": "Test1234",
           *   "code": "zertyoaizndoianzodianzdonaizdoinaozdnia"
           * }
           */
          "application/json": {
            password?: string;
            passwordConfirmation?: string;
            code?: string;
          };
        };
      };
      responses: {
        /** @description Returns a jwt token and user info */
        200: {
          content: {
            "application/json": components["schemas"]["Users-Permissions-UserRegistration"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/auth/change-password": {
    /** Update user's own password */
    post: {
      requestBody: {
        content: {
          "application/json": {
            password: string;
            currentPassword: string;
            passwordConfirmation: string;
          };
        };
      };
      responses: {
        /** @description Returns a jwt token and user info */
        200: {
          content: {
            "application/json": components["schemas"]["Users-Permissions-UserRegistration"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/auth/email-confirmation": {
    /** Confirm user email */
    get: {
      parameters: {
        query?: {
          /** @description confirmation token received by email */
          confirmation?: string;
        };
      };
      responses: {
        /** @description Redirects to the configure email confirmation redirect url */
        301: {
          content: never;
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/auth/send-email-confirmation": {
    /** Send confirmation email */
    post: {
      requestBody: {
        content: {
          "application/json": {
            email?: string;
          };
        };
      };
      responses: {
        /** @description Returns email and boolean to confirm email was sent */
        200: {
          content: {
            "application/json": {
              email?: string;
              /** @enum {string} */
              sent?: true;
            };
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/users-permissions/permissions": {
    /** Get default generated permissions */
    get: {
      responses: {
        /** @description Returns the permissions tree */
        200: {
          content: {
            "application/json": {
              permissions?: components["schemas"]["Users-Permissions-PermissionsTree"];
            };
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/users-permissions/roles": {
    /** List roles */
    get: {
      responses: {
        /** @description Returns list of roles */
        200: {
          content: {
            "application/json": {
              roles?: (components["schemas"]["Users-Permissions-Role"] & {
                  nb_users?: number;
                })[];
            };
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Create a role */
    post: {
      requestBody: components["requestBodies"]["Users-Permissions-RoleRequest"];
      responses: {
        /** @description Returns ok if the role was create */
        200: {
          content: {
            "application/json": {
              /** @enum {string} */
              ok?: true;
            };
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/users-permissions/roles/{id}": {
    /** Get a role */
    get: {
      parameters: {
        path: {
          /** @description role Id */
          id: string;
        };
      };
      responses: {
        /** @description Returns the role */
        200: {
          content: {
            "application/json": {
              role?: components["schemas"]["Users-Permissions-Role"];
            };
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/users-permissions/roles/{role}": {
    /** Update a role */
    put: {
      parameters: {
        path: {
          /** @description role Id */
          role: string;
        };
      };
      requestBody: components["requestBodies"]["Users-Permissions-RoleRequest"];
      responses: {
        /** @description Returns ok if the role was udpated */
        200: {
          content: {
            "application/json": {
              /** @enum {string} */
              ok?: true;
            };
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Delete a role */
    delete: {
      parameters: {
        path: {
          /** @description role Id */
          role: string;
        };
      };
      responses: {
        /** @description Returns ok if the role was delete */
        200: {
          content: {
            "application/json": {
              /** @enum {string} */
              ok?: true;
            };
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/users": {
    /** Get list of users */
    get: {
      responses: {
        /** @description Returns an array of users */
        200: {
          content: {
            "application/json": components["schemas"]["Users-Permissions-User"][];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Create a user */
    post: {
      requestBody: {
        content: {
          /**
           * @example {
           *   "username": "foo",
           *   "email": "foo@strapi.io",
           *   "password": "foo-password"
           * }
           */
          "application/json": {
            email: string;
            username: string;
            password: string;
          };
        };
      };
      responses: {
        /** @description Returns created user info */
        201: {
          content: {
            "application/json": components["schemas"]["Users-Permissions-User"] & {
              role?: components["schemas"]["Users-Permissions-Role"];
            };
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/users/{id}": {
    /** Get a user */
    get: {
      parameters: {
        path: {
          /** @description user Id */
          id: string;
        };
      };
      responses: {
        /** @description Returns a user */
        200: {
          content: {
            "application/json": components["schemas"]["Users-Permissions-User"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Update a user */
    put: {
      parameters: {
        path: {
          /** @description user Id */
          id: string;
        };
      };
      requestBody: {
        content: {
          /**
           * @example {
           *   "username": "foo",
           *   "email": "foo@strapi.io",
           *   "password": "foo-password"
           * }
           */
          "application/json": {
            email: string;
            username: string;
            password: string;
          };
        };
      };
      responses: {
        /** @description Returns updated user info */
        200: {
          content: {
            "application/json": components["schemas"]["Users-Permissions-User"] & {
              role?: components["schemas"]["Users-Permissions-Role"];
            };
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Delete a user */
    delete: {
      parameters: {
        path: {
          /** @description user Id */
          id: string;
        };
      };
      responses: {
        /** @description Returns deleted user info */
        200: {
          content: {
            "application/json": components["schemas"]["Users-Permissions-User"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/users/me": {
    /** Get authenticated user info */
    get: {
      responses: {
        /** @description Returns user info */
        200: {
          content: {
            "application/json": components["schemas"]["Users-Permissions-User"];
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
  "/users/count": {
    /** Get user count */
    get: {
      responses: {
        /** @description Returns a number */
        200: {
          content: {
            "application/json": number;
          };
        };
        /** @description Error */
        default: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Error: {
      data?: Record<string, never> | Record<string, never>[] | null;
      error: {
        status?: number;
        name?: string;
        message?: string;
        details?: Record<string, never>;
      };
    };
    AboutUsLocalizationRequest: {
      about?: string;
      /** @example string or id */
      show_case_1?: number | string;
      /** @example string or id */
      show_case_2?: number | string;
      /** @example string or id */
      show_case_3?: number | string;
      how_it_works?: components["schemas"]["AboutHowItWorksComponent"];
      purchase_policy_url?: string;
      seo?: components["schemas"]["SharedSeoComponent"][];
      locale: string;
    };
    AboutUsRequest: {
      data: {
        about?: string;
        /** @example string or id */
        show_case_1?: number | string;
        /** @example string or id */
        show_case_2?: number | string;
        /** @example string or id */
        show_case_3?: number | string;
        how_it_works?: components["schemas"]["AboutHowItWorksComponent"];
        purchase_policy_url?: string;
        seo?: components["schemas"]["SharedSeoComponent"][];
        locale?: string;
      };
    };
    AboutUsResponseDataObjectLocalized: {
      id?: number;
      attributes?: components["schemas"]["AboutUs"];
    };
    AboutUsLocalizationResponse: {
      data?: components["schemas"]["AboutUsResponseDataObjectLocalized"];
      meta?: Record<string, never>;
    };
    AboutUsListResponseDataItemLocalized: {
      id?: number;
      attributes?: components["schemas"]["AboutUs"];
    };
    AboutUsLocalizationListResponse: {
      data?: components["schemas"]["AboutUsListResponseDataItemLocalized"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    AboutUsListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["AboutUs"];
    };
    AboutUsListResponse: {
      data?: components["schemas"]["AboutUsListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    AboutUs: {
      about?: string;
      show_case_1?: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            alternativeText?: string;
            caption?: string;
            width?: number;
            height?: number;
            formats?: unknown;
            hash?: string;
            ext?: string;
            mime?: string;
            /** Format: float */
            size?: number;
            url?: string;
            previewUrl?: string;
            provider?: string;
            provider_metadata?: unknown;
            related?: {
              data?: {
                  id?: number;
                  attributes?: Record<string, never>;
                }[];
            };
            folder?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  pathId?: number;
                  parent?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  children?: {
                    data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      }[];
                  };
                  files?: {
                    data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: {
                                firstname?: string;
                                lastname?: string;
                                username?: string;
                                /** Format: email */
                                email?: string;
                                resetPasswordToken?: string;
                                registrationToken?: string;
                                isActive?: boolean;
                                roles?: {
                                  data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        code?: string;
                                        description?: string;
                                        users?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        permissions?: {
                                          data?: {
                                              id?: number;
                                              attributes?: {
                                                action?: string;
                                                actionParameters?: unknown;
                                                subject?: string;
                                                properties?: unknown;
                                                conditions?: unknown;
                                                role?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                              };
                                            }[];
                                        };
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    }[];
                                };
                                blocked?: boolean;
                                preferedLanguage?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                createdBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                updatedBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                              };
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      }[];
                  };
                  path?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              };
            };
            folderPath?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      show_case_2?: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            alternativeText?: string;
            caption?: string;
            width?: number;
            height?: number;
            formats?: unknown;
            hash?: string;
            ext?: string;
            mime?: string;
            /** Format: float */
            size?: number;
            url?: string;
            previewUrl?: string;
            provider?: string;
            provider_metadata?: unknown;
            related?: {
              data?: {
                  id?: number;
                  attributes?: Record<string, never>;
                }[];
            };
            folder?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            folderPath?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      show_case_3?: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            alternativeText?: string;
            caption?: string;
            width?: number;
            height?: number;
            formats?: unknown;
            hash?: string;
            ext?: string;
            mime?: string;
            /** Format: float */
            size?: number;
            url?: string;
            previewUrl?: string;
            provider?: string;
            provider_metadata?: unknown;
            related?: {
              data?: {
                  id?: number;
                  attributes?: Record<string, never>;
                }[];
            };
            folder?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            folderPath?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      how_it_works?: components["schemas"]["AboutHowItWorksComponent"];
      purchase_policy_url?: string;
      seo?: components["schemas"]["SharedSeoComponent"][];
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      localizations?: {
        data?: components["schemas"]["AboutUs"][];
      };
      locale?: string;
    };
    AboutUsResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["AboutUs"];
    };
    AboutUsResponse: {
      data?: components["schemas"]["AboutUsResponseDataObject"];
      meta?: Record<string, never>;
    };
    AboutHowItWorksComponent: {
      id?: number;
      title?: string;
      step?: {
          id?: number;
          number?: number;
          title?: string;
          description?: string;
        }[];
    };
    SharedSeoComponent: {
      id?: number;
      metaTitle?: string;
      metaDescription?: string;
      metaImage?: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            alternativeText?: string;
            caption?: string;
            width?: number;
            height?: number;
            formats?: unknown;
            hash?: string;
            ext?: string;
            mime?: string;
            /** Format: float */
            size?: number;
            url?: string;
            previewUrl?: string;
            provider?: string;
            provider_metadata?: unknown;
            related?: {
              data?: {
                  id?: number;
                  attributes?: Record<string, never>;
                }[];
            };
            folder?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            folderPath?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      metaSocial?: ({
          id?: number;
          /** @enum {string} */
          socialNetwork?: "Facebook" | "Twitter";
          title?: string;
          description?: string;
          image?: {
            data?: {
              id?: number;
              attributes?: {
                name?: string;
                alternativeText?: string;
                caption?: string;
                width?: number;
                height?: number;
                formats?: unknown;
                hash?: string;
                ext?: string;
                mime?: string;
                /** Format: float */
                size?: number;
                url?: string;
                previewUrl?: string;
                provider?: string;
                provider_metadata?: unknown;
                related?: {
                  data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    }[];
                };
                folder?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                folderPath?: string;
                /** Format: date-time */
                createdAt?: string;
                /** Format: date-time */
                updatedAt?: string;
                createdBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
                updatedBy?: {
                  data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  };
                };
              };
            };
          };
        })[];
      keywords?: string;
      metaRobots?: string;
      structuredData?: unknown;
      metaViewport?: string;
      canonicalURL?: string;
    };
    CartRequest: {
      data: {
        /** @example string or id */
        user?: number | string;
        custom?: components["schemas"]["CartCustomComponent"][];
        /** @enum {string} */
        status?: "PENDING" | "PLACED" | "ON THE WAY" | "DELIVERED" | "CANCELLED" | "REFUNDED";
        cancel_reason?: string;
        /** Format: date */
        cancel_date?: string;
        /** @enum {string} */
        size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";
      };
    };
    CartListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["Cart"];
    };
    CartListResponse: {
      data?: components["schemas"]["CartListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    Cart: {
      user?: {
        data?: {
          id?: number;
          attributes?: {
            username?: string;
            /** Format: email */
            email?: string;
            provider?: string;
            resetPasswordToken?: string;
            confirmationToken?: string;
            confirmed?: boolean;
            blocked?: boolean;
            role?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  description?: string;
                  type?: string;
                  permissions?: {
                    data?: {
                        id?: number;
                        attributes?: {
                          action?: string;
                          role?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: {
                                firstname?: string;
                                lastname?: string;
                                username?: string;
                                /** Format: email */
                                email?: string;
                                resetPasswordToken?: string;
                                registrationToken?: string;
                                isActive?: boolean;
                                roles?: {
                                  data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        code?: string;
                                        description?: string;
                                        users?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        permissions?: {
                                          data?: {
                                              id?: number;
                                              attributes?: {
                                                action?: string;
                                                actionParameters?: unknown;
                                                subject?: string;
                                                properties?: unknown;
                                                conditions?: unknown;
                                                role?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                              };
                                            }[];
                                        };
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    }[];
                                };
                                blocked?: boolean;
                                preferedLanguage?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                createdBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                updatedBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                              };
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      }[];
                  };
                  users?: {
                    data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      }[];
                  };
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              };
            };
            phone?: string;
            name?: string;
            size_profiles?: {
              data?: {
                  id?: number;
                  attributes?: {
                    title?: string;
                    /** Format: float */
                    shoulder?: number;
                    /** Format: float */
                    bust?: number;
                    /** Format: float */
                    arm_length?: number;
                    /** Format: float */
                    wrist?: number;
                    /** Format: float */
                    top_length?: number;
                    /** Format: float */
                    top_width?: number;
                    users_permissions_user?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    cup?: string;
                    /** Format: float */
                    chest_point?: number;
                    /** Format: float */
                    neck?: number;
                    /** Format: float */
                    hips?: number;
                    /** Format: float */
                    height?: number;
                    /** Format: float */
                    arm_width?: number;
                    /** Format: float */
                    sleeves_length?: number;
                    wrist_style?: string;
                    neck_style?: string;
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    /** Format: date-time */
                    publishedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                  };
                }[];
            };
            cart?: {
              data?: {
                id?: number;
                attributes?: {
                  user?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  custom?: ({
                      id?: number;
                      size_profile?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      quantity?: number;
                      /** Format: float */
                      shoulder?: number;
                      /** Format: float */
                      bust?: number;
                      /** Format: float */
                      wrist?: number;
                      save_size_profile?: boolean;
                      /** @enum {string} */
                      size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";
                      customer_instructions?: string;
                      chest_point?: string;
                      cup?: string;
                      /** Format: float */
                      arm_width?: number;
                      /** Format: float */
                      height?: number;
                      /** Format: float */
                      sleeves_length?: number;
                      /** Format: float */
                      neck?: number;
                      /** Format: float */
                      hips?: number;
                      mekhwar?: {
                        data?: {
                          id?: number;
                          attributes?: {
                            title?: string;
                            description?: string;
                            main_image?: {
                              data?: {
                                id?: number;
                                attributes?: {
                                  name?: string;
                                  alternativeText?: string;
                                  caption?: string;
                                  width?: number;
                                  height?: number;
                                  formats?: unknown;
                                  hash?: string;
                                  ext?: string;
                                  mime?: string;
                                  /** Format: float */
                                  size?: number;
                                  url?: string;
                                  previewUrl?: string;
                                  provider?: string;
                                  provider_metadata?: unknown;
                                  related?: {
                                    data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      }[];
                                  };
                                  folder?: {
                                    data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        pathId?: number;
                                        parent?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        children?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        files?: {
                                          data?: {
                                              id?: number;
                                              attributes?: {
                                                name?: string;
                                                alternativeText?: string;
                                                caption?: string;
                                                width?: number;
                                                height?: number;
                                                formats?: unknown;
                                                hash?: string;
                                                ext?: string;
                                                mime?: string;
                                                /** Format: float */
                                                size?: number;
                                                url?: string;
                                                previewUrl?: string;
                                                provider?: string;
                                                provider_metadata?: unknown;
                                                related?: {
                                                  data?: {
                                                      id?: number;
                                                      attributes?: Record<string, never>;
                                                    }[];
                                                };
                                                folder?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                folderPath?: string;
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                              };
                                            }[];
                                        };
                                        path?: string;
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    };
                                  };
                                  folderPath?: string;
                                  /** Format: date-time */
                                  createdAt?: string;
                                  /** Format: date-time */
                                  updatedAt?: string;
                                  createdBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  updatedBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                };
                              };
                            };
                            images?: {
                              data?: {
                                  id?: number;
                                  attributes?: {
                                    name?: string;
                                    alternativeText?: string;
                                    caption?: string;
                                    width?: number;
                                    height?: number;
                                    formats?: unknown;
                                    hash?: string;
                                    ext?: string;
                                    mime?: string;
                                    /** Format: float */
                                    size?: number;
                                    url?: string;
                                    previewUrl?: string;
                                    provider?: string;
                                    provider_metadata?: unknown;
                                    related?: {
                                      data?: {
                                          id?: number;
                                          attributes?: Record<string, never>;
                                        }[];
                                    };
                                    folder?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    folderPath?: string;
                                    /** Format: date-time */
                                    createdAt?: string;
                                    /** Format: date-time */
                                    updatedAt?: string;
                                    createdBy?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    updatedBy?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                  };
                                }[];
                            };
                            category?: {
                              data?: {
                                id?: number;
                                attributes?: {
                                  Name?: string;
                                  Image?: {
                                    data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        alternativeText?: string;
                                        caption?: string;
                                        width?: number;
                                        height?: number;
                                        formats?: unknown;
                                        hash?: string;
                                        ext?: string;
                                        mime?: string;
                                        /** Format: float */
                                        size?: number;
                                        url?: string;
                                        previewUrl?: string;
                                        provider?: string;
                                        provider_metadata?: unknown;
                                        related?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        folder?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        folderPath?: string;
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    };
                                  };
                                  mekhwars?: {
                                    data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      }[];
                                  };
                                  tailor?: {
                                    data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        location?: string;
                                        description?: string;
                                        image?: {
                                          data?: {
                                            id?: number;
                                            attributes?: {
                                              name?: string;
                                              alternativeText?: string;
                                              caption?: string;
                                              width?: number;
                                              height?: number;
                                              formats?: unknown;
                                              hash?: string;
                                              ext?: string;
                                              mime?: string;
                                              /** Format: float */
                                              size?: number;
                                              url?: string;
                                              previewUrl?: string;
                                              provider?: string;
                                              provider_metadata?: unknown;
                                              related?: {
                                                data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  }[];
                                              };
                                              folder?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                              folderPath?: string;
                                              /** Format: date-time */
                                              createdAt?: string;
                                              /** Format: date-time */
                                              updatedAt?: string;
                                              createdBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                              updatedBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                            };
                                          };
                                        };
                                        background?: {
                                          data?: {
                                            id?: number;
                                            attributes?: {
                                              name?: string;
                                              alternativeText?: string;
                                              caption?: string;
                                              width?: number;
                                              height?: number;
                                              formats?: unknown;
                                              hash?: string;
                                              ext?: string;
                                              mime?: string;
                                              /** Format: float */
                                              size?: number;
                                              url?: string;
                                              previewUrl?: string;
                                              provider?: string;
                                              provider_metadata?: unknown;
                                              related?: {
                                                data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  }[];
                                              };
                                              folder?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                              folderPath?: string;
                                              /** Format: date-time */
                                              createdAt?: string;
                                              /** Format: date-time */
                                              updatedAt?: string;
                                              createdBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                              updatedBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                            };
                                          };
                                        };
                                        /** Format: date */
                                        date_joined?: string;
                                        designs?: {
                                          data?: {
                                              id?: number;
                                              attributes?: {
                                                name?: string;
                                                tailor?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                image?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: {
                                                      name?: string;
                                                      alternativeText?: string;
                                                      caption?: string;
                                                      width?: number;
                                                      height?: number;
                                                      formats?: unknown;
                                                      hash?: string;
                                                      ext?: string;
                                                      mime?: string;
                                                      /** Format: float */
                                                      size?: number;
                                                      url?: string;
                                                      previewUrl?: string;
                                                      provider?: string;
                                                      provider_metadata?: unknown;
                                                      related?: {
                                                        data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          }[];
                                                      };
                                                      folder?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                      folderPath?: string;
                                                      /** Format: date-time */
                                                      createdAt?: string;
                                                      /** Format: date-time */
                                                      updatedAt?: string;
                                                      createdBy?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                      updatedBy?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                    };
                                                  };
                                                };
                                                /** Format: float */
                                                price?: number;
                                                /** Format: float */
                                                rating?: number;
                                                description?: string;
                                                sizes?: {
                                                    id?: number;
                                                    __component?: string;
                                                    name?: string;
                                                    shoulder?: number;
                                                    writst?: number;
                                                    top_width?: number;
                                                    bust?: number;
                                                    top_length?: number;
                                                    arm_length?: number;
                                                  }[];
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                /** Format: date-time */
                                                publishedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                              };
                                            }[];
                                        };
                                        experience?: string;
                                        style?: string;
                                        philosophy?: string;
                                        mekhwars?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        category?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        fabrics?: {
                                          data?: {
                                              id?: number;
                                              attributes?: {
                                                name?: string;
                                                /** Format: float */
                                                price?: number;
                                                description?: string;
                                                main_image?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: {
                                                      name?: string;
                                                      alternativeText?: string;
                                                      caption?: string;
                                                      width?: number;
                                                      height?: number;
                                                      formats?: unknown;
                                                      hash?: string;
                                                      ext?: string;
                                                      mime?: string;
                                                      /** Format: float */
                                                      size?: number;
                                                      url?: string;
                                                      previewUrl?: string;
                                                      provider?: string;
                                                      provider_metadata?: unknown;
                                                      related?: {
                                                        data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          }[];
                                                      };
                                                      folder?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                      folderPath?: string;
                                                      /** Format: date-time */
                                                      createdAt?: string;
                                                      /** Format: date-time */
                                                      updatedAt?: string;
                                                      createdBy?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                      updatedBy?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                    };
                                                  };
                                                };
                                                images?: {
                                                  data?: {
                                                      id?: number;
                                                      attributes?: {
                                                        name?: string;
                                                        alternativeText?: string;
                                                        caption?: string;
                                                        width?: number;
                                                        height?: number;
                                                        formats?: unknown;
                                                        hash?: string;
                                                        ext?: string;
                                                        mime?: string;
                                                        /** Format: float */
                                                        size?: number;
                                                        url?: string;
                                                        previewUrl?: string;
                                                        provider?: string;
                                                        provider_metadata?: unknown;
                                                        related?: {
                                                          data?: {
                                                              id?: number;
                                                              attributes?: Record<string, never>;
                                                            }[];
                                                        };
                                                        folder?: {
                                                          data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          };
                                                        };
                                                        folderPath?: string;
                                                        /** Format: date-time */
                                                        createdAt?: string;
                                                        /** Format: date-time */
                                                        updatedAt?: string;
                                                        createdBy?: {
                                                          data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          };
                                                        };
                                                        updatedBy?: {
                                                          data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          };
                                                        };
                                                      };
                                                    }[];
                                                };
                                                category?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: {
                                                      name?: string;
                                                      Thumbnail?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: {
                                                            name?: string;
                                                            alternativeText?: string;
                                                            caption?: string;
                                                            width?: number;
                                                            height?: number;
                                                            formats?: unknown;
                                                            hash?: string;
                                                            ext?: string;
                                                            mime?: string;
                                                            /** Format: float */
                                                            size?: number;
                                                            url?: string;
                                                            previewUrl?: string;
                                                            provider?: string;
                                                            provider_metadata?: unknown;
                                                            related?: {
                                                              data?: {
                                                                  id?: number;
                                                                  attributes?: Record<string, never>;
                                                                }[];
                                                            };
                                                            folder?: {
                                                              data?: {
                                                                id?: number;
                                                                attributes?: Record<string, never>;
                                                              };
                                                            };
                                                            folderPath?: string;
                                                            /** Format: date-time */
                                                            createdAt?: string;
                                                            /** Format: date-time */
                                                            updatedAt?: string;
                                                            createdBy?: {
                                                              data?: {
                                                                id?: number;
                                                                attributes?: Record<string, never>;
                                                              };
                                                            };
                                                            updatedBy?: {
                                                              data?: {
                                                                id?: number;
                                                                attributes?: Record<string, never>;
                                                              };
                                                            };
                                                          };
                                                        };
                                                      };
                                                      fabrics?: {
                                                        data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          }[];
                                                      };
                                                      /** Format: date-time */
                                                      createdAt?: string;
                                                      /** Format: date-time */
                                                      updatedAt?: string;
                                                      /** Format: date-time */
                                                      publishedAt?: string;
                                                      createdBy?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                      updatedBy?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                      localizations?: {
                                                        data?: unknown[];
                                                      };
                                                      locale?: string;
                                                    };
                                                  };
                                                };
                                                detail_list_item?: {
                                                    id?: number;
                                                    title?: string;
                                                  }[];
                                                fabric_pattern?: {
                                                    id?: number;
                                                    title?: string;
                                                    /** Format: float */
                                                    price?: number;
                                                    image?: {
                                                      data?: {
                                                        id?: number;
                                                        attributes?: {
                                                          name?: string;
                                                          alternativeText?: string;
                                                          caption?: string;
                                                          width?: number;
                                                          height?: number;
                                                          formats?: unknown;
                                                          hash?: string;
                                                          ext?: string;
                                                          mime?: string;
                                                          /** Format: float */
                                                          size?: number;
                                                          url?: string;
                                                          previewUrl?: string;
                                                          provider?: string;
                                                          provider_metadata?: unknown;
                                                          related?: {
                                                            data?: {
                                                                id?: number;
                                                                attributes?: Record<string, never>;
                                                              }[];
                                                          };
                                                          folder?: {
                                                            data?: {
                                                              id?: number;
                                                              attributes?: Record<string, never>;
                                                            };
                                                          };
                                                          folderPath?: string;
                                                          /** Format: date-time */
                                                          createdAt?: string;
                                                          /** Format: date-time */
                                                          updatedAt?: string;
                                                          createdBy?: {
                                                            data?: {
                                                              id?: number;
                                                              attributes?: Record<string, never>;
                                                            };
                                                          };
                                                          updatedBy?: {
                                                            data?: {
                                                              id?: number;
                                                              attributes?: Record<string, never>;
                                                            };
                                                          };
                                                        };
                                                      };
                                                    };
                                                  }[];
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                /** Format: date-time */
                                                publishedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                localizations?: {
                                                  data?: unknown[];
                                                };
                                                locale?: string;
                                              };
                                            }[];
                                        };
                                        /** Format: float */
                                        rating?: number;
                                        tags?: string;
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        /** Format: date-time */
                                        publishedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        localizations?: {
                                          data?: unknown[];
                                        };
                                        locale?: string;
                                      };
                                    };
                                  };
                                  /** Format: date-time */
                                  createdAt?: string;
                                  /** Format: date-time */
                                  updatedAt?: string;
                                  /** Format: date-time */
                                  publishedAt?: string;
                                  createdBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  updatedBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  localizations?: {
                                    data?: unknown[];
                                  };
                                  locale?: string;
                                };
                              };
                            };
                            /** Format: float */
                            price?: number;
                            tailor?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            detail_list_item?: {
                                id?: number;
                                __component?: string;
                                title?: string;
                              }[];
                            /** Format: float */
                            rating?: number;
                            favourite_products?: {
                              data?: {
                                  id?: number;
                                  attributes?: {
                                    mekhwar?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    user?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    /** Format: date-time */
                                    createdAt?: string;
                                    /** Format: date-time */
                                    updatedAt?: string;
                                    /** Format: date-time */
                                    publishedAt?: string;
                                    createdBy?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    updatedBy?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                  };
                                }[];
                            };
                            slug?: string;
                            customizable?: boolean;
                            fabrics?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            /** Format: date-time */
                            publishedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            localizations?: {
                              data?: unknown[];
                            };
                            locale?: string;
                          };
                        };
                      };
                    })[];
                  /** @enum {string} */
                  status?: "PENDING" | "PLACED" | "ON THE WAY" | "DELIVERED" | "CANCELLED" | "REFUNDED";
                  cancel_reason?: string;
                  /** Format: date */
                  cancel_date?: string;
                  /** @enum {string} */
                  size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  /** Format: date-time */
                  publishedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              };
            };
            addresses?: {
              data?: ({
                  id?: number;
                  attributes?: {
                    name?: string;
                    country?: string;
                    city?: string;
                    street?: string;
                    building?: string;
                    address?: string;
                    flat?: string;
                    mobile?: string;
                    user?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    /** @enum {string} */
                    type?: "home" | "office" | "gym" | "work";
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    /** Format: date-time */
                    publishedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                  };
                })[];
            };
            orders?: {
              data?: ({
                  id?: number;
                  attributes?: {
                    ref?: string;
                    customer_address?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    users_permissions_user?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    paid?: boolean;
                    /** Format: float */
                    tax?: number;
                    /** Format: float */
                    discount?: number;
                    /** Format: float */
                    total?: number;
                    /** Format: float */
                    delivery_charge?: number;
                    custom?: {
                        id?: number;
                        quantity?: number;
                        /** Format: float */
                        bust?: number;
                        /** Format: float */
                        wrist?: number;
                        /** Format: float */
                        shoulder?: number;
                        cup?: string;
                        /** Format: float */
                        chest_point?: number;
                        /** Format: float */
                        neck?: number;
                        /** Format: float */
                        hips?: number;
                        /** Format: float */
                        height?: number;
                        /** Format: float */
                        arm_width?: number;
                        /** Format: float */
                        sleeves_length?: number;
                        wrist_style?: string;
                        neck_style?: string;
                        customer_instructions?: string;
                        color?: string;
                        mekhwar?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                      }[];
                    delivery_note?: string;
                    /** @enum {string} */
                    status?: "PLACED" | "SEWING" | "ON THE WAY" | "DELIVERED" | "CANCELLED";
                    /** @enum {string} */
                    size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                  };
                })[];
            };
            custom_design_orders?: {
              data?: ({
                  id?: number;
                  attributes?: {
                    design?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                    color?: string;
                    fabric?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    tailor?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    /** Format: float */
                    price?: number;
                    /** Format: float */
                    tax?: number;
                    /** Format: float */
                    delivery_charge?: number;
                    /** Format: float */
                    tailor_fee?: number;
                    /** @enum {string} */
                    status?: "PENDING" | "APPROVED" | "PROCESSING" | "REJECTED" | "CANCELLED" | "ON THE WAY" | "DELIVERED";
                    style?: unknown;
                    size_profile?: {
                      id?: number;
                      /** Format: float */
                      shoulder?: number;
                      /** Format: float */
                      bust?: number;
                      /** Format: float */
                      arm_length?: number;
                      /** Format: float */
                      wrist?: number;
                      /** Format: float */
                      top_length?: number;
                      /** Format: float */
                      top_width?: number;
                      cup?: string;
                      /** Format: float */
                      chest_point?: number;
                      /** Format: float */
                      neck?: number;
                      /** Format: float */
                      hips?: number;
                      /** Format: float */
                      height?: number;
                      /** Format: float */
                      sleeves_length?: number;
                      wrist_style?: string;
                      neck_style?: string;
                      /** Format: float */
                      arm_width?: number;
                    };
                    /** @enum {string} */
                    size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL" | "CUSTOM";
                    user?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    address?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    customer_instructions?: string;
                    design2?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                    design3?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                    design4?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    /** Format: date-time */
                    publishedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                  };
                })[];
            };
            favourite_products?: {
              data?: {
                  id?: number;
                  attributes?: Record<string, never>;
                }[];
            };
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      custom?: components["schemas"]["CartCustomComponent"][];
      /** @enum {string} */
      status?: "PENDING" | "PLACED" | "ON THE WAY" | "DELIVERED" | "CANCELLED" | "REFUNDED";
      cancel_reason?: string;
      /** Format: date */
      cancel_date?: string;
      /** @enum {string} */
      size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
    };
    CartResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["Cart"];
    };
    CartResponse: {
      data?: components["schemas"]["CartResponseDataObject"];
      meta?: Record<string, never>;
    };
    CartCustomComponent: {
      id?: number;
      size_profile?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      quantity?: number;
      /** Format: float */
      shoulder?: number;
      /** Format: float */
      bust?: number;
      /** Format: float */
      wrist?: number;
      save_size_profile?: boolean;
      /** @enum {string} */
      size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";
      customer_instructions?: string;
      chest_point?: string;
      cup?: string;
      /** Format: float */
      arm_width?: number;
      /** Format: float */
      height?: number;
      /** Format: float */
      sleeves_length?: number;
      /** Format: float */
      neck?: number;
      /** Format: float */
      hips?: number;
      mekhwar?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
    };
    CategoryLocalizationRequest: {
      Name: string;
      /** @example string or id */
      Image: number | string;
      mekhwars?: (number | string)[];
      /** @example string or id */
      tailor?: number | string;
      locale: string;
    };
    CategoryRequest: {
      data: {
        Name: string;
        /** @example string or id */
        Image: number | string;
        mekhwars?: (number | string)[];
        /** @example string or id */
        tailor?: number | string;
        locale?: string;
      };
    };
    CategoryResponseDataObjectLocalized: {
      id?: number;
      attributes?: components["schemas"]["Category"];
    };
    CategoryLocalizationResponse: {
      data?: components["schemas"]["CategoryResponseDataObjectLocalized"];
      meta?: Record<string, never>;
    };
    CategoryListResponseDataItemLocalized: {
      id?: number;
      attributes?: components["schemas"]["Category"];
    };
    CategoryLocalizationListResponse: {
      data?: components["schemas"]["CategoryListResponseDataItemLocalized"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    CategoryListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["Category"];
    };
    CategoryListResponse: {
      data?: components["schemas"]["CategoryListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    Category: {
      Name: string;
      Image: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            alternativeText?: string;
            caption?: string;
            width?: number;
            height?: number;
            formats?: unknown;
            hash?: string;
            ext?: string;
            mime?: string;
            /** Format: float */
            size?: number;
            url?: string;
            previewUrl?: string;
            provider?: string;
            provider_metadata?: unknown;
            related?: {
              data?: {
                  id?: number;
                  attributes?: Record<string, never>;
                }[];
            };
            folder?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  pathId?: number;
                  parent?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  children?: {
                    data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      }[];
                  };
                  files?: {
                    data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: {
                                firstname?: string;
                                lastname?: string;
                                username?: string;
                                /** Format: email */
                                email?: string;
                                resetPasswordToken?: string;
                                registrationToken?: string;
                                isActive?: boolean;
                                roles?: {
                                  data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        code?: string;
                                        description?: string;
                                        users?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        permissions?: {
                                          data?: {
                                              id?: number;
                                              attributes?: {
                                                action?: string;
                                                actionParameters?: unknown;
                                                subject?: string;
                                                properties?: unknown;
                                                conditions?: unknown;
                                                role?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                              };
                                            }[];
                                        };
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    }[];
                                };
                                blocked?: boolean;
                                preferedLanguage?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                createdBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                updatedBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                              };
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      }[];
                  };
                  path?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              };
            };
            folderPath?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      mekhwars?: {
        data?: ({
            id?: number;
            attributes?: {
              title?: string;
              description?: string;
              main_image?: {
                data?: {
                  id?: number;
                  attributes?: {
                    name?: string;
                    alternativeText?: string;
                    caption?: string;
                    width?: number;
                    height?: number;
                    formats?: unknown;
                    hash?: string;
                    ext?: string;
                    mime?: string;
                    /** Format: float */
                    size?: number;
                    url?: string;
                    previewUrl?: string;
                    provider?: string;
                    provider_metadata?: unknown;
                    related?: {
                      data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        }[];
                    };
                    folder?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    folderPath?: string;
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                  };
                };
              };
              images?: {
                data?: {
                    id?: number;
                    attributes?: {
                      name?: string;
                      alternativeText?: string;
                      caption?: string;
                      width?: number;
                      height?: number;
                      formats?: unknown;
                      hash?: string;
                      ext?: string;
                      mime?: string;
                      /** Format: float */
                      size?: number;
                      url?: string;
                      previewUrl?: string;
                      provider?: string;
                      provider_metadata?: unknown;
                      related?: {
                        data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          }[];
                      };
                      folder?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      folderPath?: string;
                      /** Format: date-time */
                      createdAt?: string;
                      /** Format: date-time */
                      updatedAt?: string;
                      createdBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      updatedBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                    };
                  }[];
              };
              category?: {
                data?: {
                  id?: number;
                  attributes?: {
                    Name?: string;
                    Image?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                    mekhwars?: {
                      data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        }[];
                    };
                    tailor?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          location?: string;
                          description?: string;
                          image?: {
                            data?: {
                              id?: number;
                              attributes?: {
                                name?: string;
                                alternativeText?: string;
                                caption?: string;
                                width?: number;
                                height?: number;
                                formats?: unknown;
                                hash?: string;
                                ext?: string;
                                mime?: string;
                                /** Format: float */
                                size?: number;
                                url?: string;
                                previewUrl?: string;
                                provider?: string;
                                provider_metadata?: unknown;
                                related?: {
                                  data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    }[];
                                };
                                folder?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                folderPath?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                createdBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                updatedBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                              };
                            };
                          };
                          background?: {
                            data?: {
                              id?: number;
                              attributes?: {
                                name?: string;
                                alternativeText?: string;
                                caption?: string;
                                width?: number;
                                height?: number;
                                formats?: unknown;
                                hash?: string;
                                ext?: string;
                                mime?: string;
                                /** Format: float */
                                size?: number;
                                url?: string;
                                previewUrl?: string;
                                provider?: string;
                                provider_metadata?: unknown;
                                related?: {
                                  data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    }[];
                                };
                                folder?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                folderPath?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                createdBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                updatedBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                              };
                            };
                          };
                          /** Format: date */
                          date_joined?: string;
                          designs?: {
                            data?: {
                                id?: number;
                                attributes?: {
                                  name?: string;
                                  tailor?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  image?: {
                                    data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        alternativeText?: string;
                                        caption?: string;
                                        width?: number;
                                        height?: number;
                                        formats?: unknown;
                                        hash?: string;
                                        ext?: string;
                                        mime?: string;
                                        /** Format: float */
                                        size?: number;
                                        url?: string;
                                        previewUrl?: string;
                                        provider?: string;
                                        provider_metadata?: unknown;
                                        related?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        folder?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        folderPath?: string;
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    };
                                  };
                                  /** Format: float */
                                  price?: number;
                                  /** Format: float */
                                  rating?: number;
                                  description?: string;
                                  sizes?: {
                                      id?: number;
                                      __component?: string;
                                      name?: string;
                                      shoulder?: number;
                                      writst?: number;
                                      top_width?: number;
                                      bust?: number;
                                      top_length?: number;
                                      arm_length?: number;
                                    }[];
                                  /** Format: date-time */
                                  createdAt?: string;
                                  /** Format: date-time */
                                  updatedAt?: string;
                                  /** Format: date-time */
                                  publishedAt?: string;
                                  createdBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  updatedBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                };
                              }[];
                          };
                          experience?: string;
                          style?: string;
                          philosophy?: string;
                          mekhwars?: {
                            data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                          };
                          category?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          fabrics?: {
                            data?: {
                                id?: number;
                                attributes?: {
                                  name?: string;
                                  /** Format: float */
                                  price?: number;
                                  description?: string;
                                  main_image?: {
                                    data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        alternativeText?: string;
                                        caption?: string;
                                        width?: number;
                                        height?: number;
                                        formats?: unknown;
                                        hash?: string;
                                        ext?: string;
                                        mime?: string;
                                        /** Format: float */
                                        size?: number;
                                        url?: string;
                                        previewUrl?: string;
                                        provider?: string;
                                        provider_metadata?: unknown;
                                        related?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        folder?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        folderPath?: string;
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    };
                                  };
                                  images?: {
                                    data?: {
                                        id?: number;
                                        attributes?: {
                                          name?: string;
                                          alternativeText?: string;
                                          caption?: string;
                                          width?: number;
                                          height?: number;
                                          formats?: unknown;
                                          hash?: string;
                                          ext?: string;
                                          mime?: string;
                                          /** Format: float */
                                          size?: number;
                                          url?: string;
                                          previewUrl?: string;
                                          provider?: string;
                                          provider_metadata?: unknown;
                                          related?: {
                                            data?: {
                                                id?: number;
                                                attributes?: Record<string, never>;
                                              }[];
                                          };
                                          folder?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          folderPath?: string;
                                          /** Format: date-time */
                                          createdAt?: string;
                                          /** Format: date-time */
                                          updatedAt?: string;
                                          createdBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          updatedBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                        };
                                      }[];
                                  };
                                  category?: {
                                    data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        Thumbnail?: {
                                          data?: {
                                            id?: number;
                                            attributes?: {
                                              name?: string;
                                              alternativeText?: string;
                                              caption?: string;
                                              width?: number;
                                              height?: number;
                                              formats?: unknown;
                                              hash?: string;
                                              ext?: string;
                                              mime?: string;
                                              /** Format: float */
                                              size?: number;
                                              url?: string;
                                              previewUrl?: string;
                                              provider?: string;
                                              provider_metadata?: unknown;
                                              related?: {
                                                data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  }[];
                                              };
                                              folder?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                              folderPath?: string;
                                              /** Format: date-time */
                                              createdAt?: string;
                                              /** Format: date-time */
                                              updatedAt?: string;
                                              createdBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                              updatedBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                            };
                                          };
                                        };
                                        fabrics?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        /** Format: date-time */
                                        publishedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        localizations?: {
                                          data?: unknown[];
                                        };
                                        locale?: string;
                                      };
                                    };
                                  };
                                  detail_list_item?: {
                                      id?: number;
                                      title?: string;
                                    }[];
                                  fabric_pattern?: {
                                      id?: number;
                                      title?: string;
                                      /** Format: float */
                                      price?: number;
                                      image?: {
                                        data?: {
                                          id?: number;
                                          attributes?: {
                                            name?: string;
                                            alternativeText?: string;
                                            caption?: string;
                                            width?: number;
                                            height?: number;
                                            formats?: unknown;
                                            hash?: string;
                                            ext?: string;
                                            mime?: string;
                                            /** Format: float */
                                            size?: number;
                                            url?: string;
                                            previewUrl?: string;
                                            provider?: string;
                                            provider_metadata?: unknown;
                                            related?: {
                                              data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                }[];
                                            };
                                            folder?: {
                                              data?: {
                                                id?: number;
                                                attributes?: Record<string, never>;
                                              };
                                            };
                                            folderPath?: string;
                                            /** Format: date-time */
                                            createdAt?: string;
                                            /** Format: date-time */
                                            updatedAt?: string;
                                            createdBy?: {
                                              data?: {
                                                id?: number;
                                                attributes?: Record<string, never>;
                                              };
                                            };
                                            updatedBy?: {
                                              data?: {
                                                id?: number;
                                                attributes?: Record<string, never>;
                                              };
                                            };
                                          };
                                        };
                                      };
                                    }[];
                                  /** Format: date-time */
                                  createdAt?: string;
                                  /** Format: date-time */
                                  updatedAt?: string;
                                  /** Format: date-time */
                                  publishedAt?: string;
                                  createdBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  updatedBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  localizations?: {
                                    data?: unknown[];
                                  };
                                  locale?: string;
                                };
                              }[];
                          };
                          /** Format: float */
                          rating?: number;
                          tags?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          /** Format: date-time */
                          publishedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          localizations?: {
                            data?: unknown[];
                          };
                          locale?: string;
                        };
                      };
                    };
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    /** Format: date-time */
                    publishedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    localizations?: {
                      data?: unknown[];
                    };
                    locale?: string;
                  };
                };
              };
              /** Format: float */
              price?: number;
              tailor?: {
                data?: {
                  id?: number;
                  attributes?: Record<string, never>;
                };
              };
              detail_list_item?: {
                  id?: number;
                  __component?: string;
                  title?: string;
                }[];
              /** Format: float */
              rating?: number;
              favourite_products?: {
                data?: ({
                    id?: number;
                    attributes?: {
                      mekhwar?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      user?: {
                        data?: {
                          id?: number;
                          attributes?: {
                            username?: string;
                            /** Format: email */
                            email?: string;
                            provider?: string;
                            resetPasswordToken?: string;
                            confirmationToken?: string;
                            confirmed?: boolean;
                            blocked?: boolean;
                            role?: {
                              data?: {
                                id?: number;
                                attributes?: {
                                  name?: string;
                                  description?: string;
                                  type?: string;
                                  permissions?: {
                                    data?: {
                                        id?: number;
                                        attributes?: {
                                          action?: string;
                                          role?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          /** Format: date-time */
                                          createdAt?: string;
                                          /** Format: date-time */
                                          updatedAt?: string;
                                          createdBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          updatedBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                        };
                                      }[];
                                  };
                                  users?: {
                                    data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      }[];
                                  };
                                  /** Format: date-time */
                                  createdAt?: string;
                                  /** Format: date-time */
                                  updatedAt?: string;
                                  createdBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  updatedBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                };
                              };
                            };
                            phone?: string;
                            name?: string;
                            size_profiles?: {
                              data?: {
                                  id?: number;
                                  attributes?: {
                                    title?: string;
                                    /** Format: float */
                                    shoulder?: number;
                                    /** Format: float */
                                    bust?: number;
                                    /** Format: float */
                                    arm_length?: number;
                                    /** Format: float */
                                    wrist?: number;
                                    /** Format: float */
                                    top_length?: number;
                                    /** Format: float */
                                    top_width?: number;
                                    users_permissions_user?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    cup?: string;
                                    /** Format: float */
                                    chest_point?: number;
                                    /** Format: float */
                                    neck?: number;
                                    /** Format: float */
                                    hips?: number;
                                    /** Format: float */
                                    height?: number;
                                    /** Format: float */
                                    arm_width?: number;
                                    /** Format: float */
                                    sleeves_length?: number;
                                    wrist_style?: string;
                                    neck_style?: string;
                                    /** Format: date-time */
                                    createdAt?: string;
                                    /** Format: date-time */
                                    updatedAt?: string;
                                    /** Format: date-time */
                                    publishedAt?: string;
                                    createdBy?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    updatedBy?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                  };
                                }[];
                            };
                            cart?: {
                              data?: {
                                id?: number;
                                attributes?: {
                                  user?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  custom?: ({
                                      id?: number;
                                      size_profile?: {
                                        data?: {
                                          id?: number;
                                          attributes?: Record<string, never>;
                                        };
                                      };
                                      quantity?: number;
                                      /** Format: float */
                                      shoulder?: number;
                                      /** Format: float */
                                      bust?: number;
                                      /** Format: float */
                                      wrist?: number;
                                      save_size_profile?: boolean;
                                      /** @enum {string} */
                                      size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";
                                      customer_instructions?: string;
                                      chest_point?: string;
                                      cup?: string;
                                      /** Format: float */
                                      arm_width?: number;
                                      /** Format: float */
                                      height?: number;
                                      /** Format: float */
                                      sleeves_length?: number;
                                      /** Format: float */
                                      neck?: number;
                                      /** Format: float */
                                      hips?: number;
                                      mekhwar?: {
                                        data?: {
                                          id?: number;
                                          attributes?: Record<string, never>;
                                        };
                                      };
                                    })[];
                                  /** @enum {string} */
                                  status?: "PENDING" | "PLACED" | "ON THE WAY" | "DELIVERED" | "CANCELLED" | "REFUNDED";
                                  cancel_reason?: string;
                                  /** Format: date */
                                  cancel_date?: string;
                                  /** @enum {string} */
                                  size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";
                                  /** Format: date-time */
                                  createdAt?: string;
                                  /** Format: date-time */
                                  updatedAt?: string;
                                  /** Format: date-time */
                                  publishedAt?: string;
                                  createdBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  updatedBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                };
                              };
                            };
                            addresses?: {
                              data?: ({
                                  id?: number;
                                  attributes?: {
                                    name?: string;
                                    country?: string;
                                    city?: string;
                                    street?: string;
                                    building?: string;
                                    address?: string;
                                    flat?: string;
                                    mobile?: string;
                                    user?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    /** @enum {string} */
                                    type?: "home" | "office" | "gym" | "work";
                                    /** Format: date-time */
                                    createdAt?: string;
                                    /** Format: date-time */
                                    updatedAt?: string;
                                    /** Format: date-time */
                                    publishedAt?: string;
                                    createdBy?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    updatedBy?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                  };
                                })[];
                            };
                            orders?: {
                              data?: ({
                                  id?: number;
                                  attributes?: {
                                    ref?: string;
                                    customer_address?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    users_permissions_user?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    paid?: boolean;
                                    /** Format: float */
                                    tax?: number;
                                    /** Format: float */
                                    discount?: number;
                                    /** Format: float */
                                    total?: number;
                                    /** Format: float */
                                    delivery_charge?: number;
                                    custom?: {
                                        id?: number;
                                        quantity?: number;
                                        /** Format: float */
                                        bust?: number;
                                        /** Format: float */
                                        wrist?: number;
                                        /** Format: float */
                                        shoulder?: number;
                                        cup?: string;
                                        /** Format: float */
                                        chest_point?: number;
                                        /** Format: float */
                                        neck?: number;
                                        /** Format: float */
                                        hips?: number;
                                        /** Format: float */
                                        height?: number;
                                        /** Format: float */
                                        arm_width?: number;
                                        /** Format: float */
                                        sleeves_length?: number;
                                        wrist_style?: string;
                                        neck_style?: string;
                                        customer_instructions?: string;
                                        color?: string;
                                        mekhwar?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      }[];
                                    delivery_note?: string;
                                    /** @enum {string} */
                                    status?: "PLACED" | "SEWING" | "ON THE WAY" | "DELIVERED" | "CANCELLED";
                                    /** @enum {string} */
                                    size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";
                                    /** Format: date-time */
                                    createdAt?: string;
                                    /** Format: date-time */
                                    updatedAt?: string;
                                    createdBy?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    updatedBy?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                  };
                                })[];
                            };
                            custom_design_orders?: {
                              data?: ({
                                  id?: number;
                                  attributes?: {
                                    design?: {
                                      data?: {
                                        id?: number;
                                        attributes?: {
                                          name?: string;
                                          alternativeText?: string;
                                          caption?: string;
                                          width?: number;
                                          height?: number;
                                          formats?: unknown;
                                          hash?: string;
                                          ext?: string;
                                          mime?: string;
                                          /** Format: float */
                                          size?: number;
                                          url?: string;
                                          previewUrl?: string;
                                          provider?: string;
                                          provider_metadata?: unknown;
                                          related?: {
                                            data?: {
                                                id?: number;
                                                attributes?: Record<string, never>;
                                              }[];
                                          };
                                          folder?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          folderPath?: string;
                                          /** Format: date-time */
                                          createdAt?: string;
                                          /** Format: date-time */
                                          updatedAt?: string;
                                          createdBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          updatedBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                        };
                                      };
                                    };
                                    color?: string;
                                    fabric?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    tailor?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    /** Format: float */
                                    price?: number;
                                    /** Format: float */
                                    tax?: number;
                                    /** Format: float */
                                    delivery_charge?: number;
                                    /** Format: float */
                                    tailor_fee?: number;
                                    /** @enum {string} */
                                    status?: "PENDING" | "APPROVED" | "PROCESSING" | "REJECTED" | "CANCELLED" | "ON THE WAY" | "DELIVERED";
                                    style?: unknown;
                                    size_profile?: {
                                      id?: number;
                                      /** Format: float */
                                      shoulder?: number;
                                      /** Format: float */
                                      bust?: number;
                                      /** Format: float */
                                      arm_length?: number;
                                      /** Format: float */
                                      wrist?: number;
                                      /** Format: float */
                                      top_length?: number;
                                      /** Format: float */
                                      top_width?: number;
                                      cup?: string;
                                      /** Format: float */
                                      chest_point?: number;
                                      /** Format: float */
                                      neck?: number;
                                      /** Format: float */
                                      hips?: number;
                                      /** Format: float */
                                      height?: number;
                                      /** Format: float */
                                      sleeves_length?: number;
                                      wrist_style?: string;
                                      neck_style?: string;
                                      /** Format: float */
                                      arm_width?: number;
                                    };
                                    /** @enum {string} */
                                    size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL" | "CUSTOM";
                                    user?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    address?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    customer_instructions?: string;
                                    design2?: {
                                      data?: {
                                        id?: number;
                                        attributes?: {
                                          name?: string;
                                          alternativeText?: string;
                                          caption?: string;
                                          width?: number;
                                          height?: number;
                                          formats?: unknown;
                                          hash?: string;
                                          ext?: string;
                                          mime?: string;
                                          /** Format: float */
                                          size?: number;
                                          url?: string;
                                          previewUrl?: string;
                                          provider?: string;
                                          provider_metadata?: unknown;
                                          related?: {
                                            data?: {
                                                id?: number;
                                                attributes?: Record<string, never>;
                                              }[];
                                          };
                                          folder?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          folderPath?: string;
                                          /** Format: date-time */
                                          createdAt?: string;
                                          /** Format: date-time */
                                          updatedAt?: string;
                                          createdBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          updatedBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                        };
                                      };
                                    };
                                    design3?: {
                                      data?: {
                                        id?: number;
                                        attributes?: {
                                          name?: string;
                                          alternativeText?: string;
                                          caption?: string;
                                          width?: number;
                                          height?: number;
                                          formats?: unknown;
                                          hash?: string;
                                          ext?: string;
                                          mime?: string;
                                          /** Format: float */
                                          size?: number;
                                          url?: string;
                                          previewUrl?: string;
                                          provider?: string;
                                          provider_metadata?: unknown;
                                          related?: {
                                            data?: {
                                                id?: number;
                                                attributes?: Record<string, never>;
                                              }[];
                                          };
                                          folder?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          folderPath?: string;
                                          /** Format: date-time */
                                          createdAt?: string;
                                          /** Format: date-time */
                                          updatedAt?: string;
                                          createdBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          updatedBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                        };
                                      };
                                    };
                                    design4?: {
                                      data?: {
                                        id?: number;
                                        attributes?: {
                                          name?: string;
                                          alternativeText?: string;
                                          caption?: string;
                                          width?: number;
                                          height?: number;
                                          formats?: unknown;
                                          hash?: string;
                                          ext?: string;
                                          mime?: string;
                                          /** Format: float */
                                          size?: number;
                                          url?: string;
                                          previewUrl?: string;
                                          provider?: string;
                                          provider_metadata?: unknown;
                                          related?: {
                                            data?: {
                                                id?: number;
                                                attributes?: Record<string, never>;
                                              }[];
                                          };
                                          folder?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          folderPath?: string;
                                          /** Format: date-time */
                                          createdAt?: string;
                                          /** Format: date-time */
                                          updatedAt?: string;
                                          createdBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          updatedBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                        };
                                      };
                                    };
                                    /** Format: date-time */
                                    createdAt?: string;
                                    /** Format: date-time */
                                    updatedAt?: string;
                                    /** Format: date-time */
                                    publishedAt?: string;
                                    createdBy?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    updatedBy?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                  };
                                })[];
                            };
                            favourite_products?: {
                              data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                }[];
                            };
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                          };
                        };
                      };
                      /** Format: date-time */
                      createdAt?: string;
                      /** Format: date-time */
                      updatedAt?: string;
                      /** Format: date-time */
                      publishedAt?: string;
                      createdBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      updatedBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                    };
                  })[];
              };
              slug?: string;
              customizable?: boolean;
              fabrics?: {
                data?: {
                  id?: number;
                  attributes?: Record<string, never>;
                };
              };
              /** Format: date-time */
              createdAt?: string;
              /** Format: date-time */
              updatedAt?: string;
              /** Format: date-time */
              publishedAt?: string;
              createdBy?: {
                data?: {
                  id?: number;
                  attributes?: Record<string, never>;
                };
              };
              updatedBy?: {
                data?: {
                  id?: number;
                  attributes?: Record<string, never>;
                };
              };
              localizations?: {
                data?: unknown[];
              };
              locale?: string;
            };
          })[];
      };
      tailor?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      localizations?: {
        data?: components["schemas"]["Category"][];
      };
      locale?: string;
    };
    CategoryResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["Category"];
    };
    CategoryResponse: {
      data?: components["schemas"]["CategoryResponseDataObject"];
      meta?: Record<string, never>;
    };
    CouponRequest: {
      data: {
        name?: string;
        /** Format: date */
        valid_from?: string;
        /** Format: date */
        valid_till?: string;
        /** @enum {string} */
        type?: "Percentage" | "Flat";
        /** Format: float */
        amount?: number;
        code?: string;
        active?: boolean;
      };
    };
    CouponListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["Coupon"];
    };
    CouponListResponse: {
      data?: components["schemas"]["CouponListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    Coupon: {
      name?: string;
      /** Format: date */
      valid_from?: string;
      /** Format: date */
      valid_till?: string;
      /** @enum {string} */
      type?: "Percentage" | "Flat";
      /** Format: float */
      amount?: number;
      code?: string;
      active?: boolean;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: {
            firstname?: string;
            lastname?: string;
            username?: string;
            /** Format: email */
            email?: string;
            resetPasswordToken?: string;
            registrationToken?: string;
            isActive?: boolean;
            roles?: {
              data?: {
                  id?: number;
                  attributes?: {
                    name?: string;
                    code?: string;
                    description?: string;
                    users?: {
                      data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        }[];
                    };
                    permissions?: {
                      data?: {
                          id?: number;
                          attributes?: {
                            action?: string;
                            actionParameters?: unknown;
                            subject?: string;
                            properties?: unknown;
                            conditions?: unknown;
                            role?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                          };
                        }[];
                    };
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                  };
                }[];
            };
            blocked?: boolean;
            preferedLanguage?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
    };
    CouponResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["Coupon"];
    };
    CouponResponse: {
      data?: components["schemas"]["CouponResponseDataObject"];
      meta?: Record<string, never>;
    };
    CouponUsageRequest: {
      data: {
        /** @example string or id */
        users_permissions_user?: number | string;
        /** @example string or id */
        coupon?: number | string;
      };
    };
    CouponUsageListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["CouponUsage"];
    };
    CouponUsageListResponse: {
      data?: components["schemas"]["CouponUsageListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    CouponUsage: {
      users_permissions_user?: {
        data?: {
          id?: number;
          attributes?: {
            username?: string;
            /** Format: email */
            email?: string;
            provider?: string;
            resetPasswordToken?: string;
            confirmationToken?: string;
            confirmed?: boolean;
            blocked?: boolean;
            role?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  description?: string;
                  type?: string;
                  permissions?: {
                    data?: {
                        id?: number;
                        attributes?: {
                          action?: string;
                          role?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: {
                                firstname?: string;
                                lastname?: string;
                                username?: string;
                                /** Format: email */
                                email?: string;
                                resetPasswordToken?: string;
                                registrationToken?: string;
                                isActive?: boolean;
                                roles?: {
                                  data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        code?: string;
                                        description?: string;
                                        users?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        permissions?: {
                                          data?: {
                                              id?: number;
                                              attributes?: {
                                                action?: string;
                                                actionParameters?: unknown;
                                                subject?: string;
                                                properties?: unknown;
                                                conditions?: unknown;
                                                role?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                              };
                                            }[];
                                        };
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    }[];
                                };
                                blocked?: boolean;
                                preferedLanguage?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                createdBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                updatedBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                              };
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      }[];
                  };
                  users?: {
                    data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      }[];
                  };
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              };
            };
            phone?: string;
            name?: string;
            size_profiles?: {
              data?: {
                  id?: number;
                  attributes?: {
                    title?: string;
                    /** Format: float */
                    shoulder?: number;
                    /** Format: float */
                    bust?: number;
                    /** Format: float */
                    arm_length?: number;
                    /** Format: float */
                    wrist?: number;
                    /** Format: float */
                    top_length?: number;
                    /** Format: float */
                    top_width?: number;
                    users_permissions_user?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    cup?: string;
                    /** Format: float */
                    chest_point?: number;
                    /** Format: float */
                    neck?: number;
                    /** Format: float */
                    hips?: number;
                    /** Format: float */
                    height?: number;
                    /** Format: float */
                    arm_width?: number;
                    /** Format: float */
                    sleeves_length?: number;
                    wrist_style?: string;
                    neck_style?: string;
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    /** Format: date-time */
                    publishedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                  };
                }[];
            };
            cart?: {
              data?: {
                id?: number;
                attributes?: {
                  user?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  custom?: ({
                      id?: number;
                      size_profile?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      quantity?: number;
                      /** Format: float */
                      shoulder?: number;
                      /** Format: float */
                      bust?: number;
                      /** Format: float */
                      wrist?: number;
                      save_size_profile?: boolean;
                      /** @enum {string} */
                      size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";
                      customer_instructions?: string;
                      chest_point?: string;
                      cup?: string;
                      /** Format: float */
                      arm_width?: number;
                      /** Format: float */
                      height?: number;
                      /** Format: float */
                      sleeves_length?: number;
                      /** Format: float */
                      neck?: number;
                      /** Format: float */
                      hips?: number;
                      mekhwar?: {
                        data?: {
                          id?: number;
                          attributes?: {
                            title?: string;
                            description?: string;
                            main_image?: {
                              data?: {
                                id?: number;
                                attributes?: {
                                  name?: string;
                                  alternativeText?: string;
                                  caption?: string;
                                  width?: number;
                                  height?: number;
                                  formats?: unknown;
                                  hash?: string;
                                  ext?: string;
                                  mime?: string;
                                  /** Format: float */
                                  size?: number;
                                  url?: string;
                                  previewUrl?: string;
                                  provider?: string;
                                  provider_metadata?: unknown;
                                  related?: {
                                    data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      }[];
                                  };
                                  folder?: {
                                    data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        pathId?: number;
                                        parent?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        children?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        files?: {
                                          data?: {
                                              id?: number;
                                              attributes?: {
                                                name?: string;
                                                alternativeText?: string;
                                                caption?: string;
                                                width?: number;
                                                height?: number;
                                                formats?: unknown;
                                                hash?: string;
                                                ext?: string;
                                                mime?: string;
                                                /** Format: float */
                                                size?: number;
                                                url?: string;
                                                previewUrl?: string;
                                                provider?: string;
                                                provider_metadata?: unknown;
                                                related?: {
                                                  data?: {
                                                      id?: number;
                                                      attributes?: Record<string, never>;
                                                    }[];
                                                };
                                                folder?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                folderPath?: string;
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                              };
                                            }[];
                                        };
                                        path?: string;
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    };
                                  };
                                  folderPath?: string;
                                  /** Format: date-time */
                                  createdAt?: string;
                                  /** Format: date-time */
                                  updatedAt?: string;
                                  createdBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  updatedBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                };
                              };
                            };
                            images?: {
                              data?: {
                                  id?: number;
                                  attributes?: {
                                    name?: string;
                                    alternativeText?: string;
                                    caption?: string;
                                    width?: number;
                                    height?: number;
                                    formats?: unknown;
                                    hash?: string;
                                    ext?: string;
                                    mime?: string;
                                    /** Format: float */
                                    size?: number;
                                    url?: string;
                                    previewUrl?: string;
                                    provider?: string;
                                    provider_metadata?: unknown;
                                    related?: {
                                      data?: {
                                          id?: number;
                                          attributes?: Record<string, never>;
                                        }[];
                                    };
                                    folder?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    folderPath?: string;
                                    /** Format: date-time */
                                    createdAt?: string;
                                    /** Format: date-time */
                                    updatedAt?: string;
                                    createdBy?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    updatedBy?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                  };
                                }[];
                            };
                            category?: {
                              data?: {
                                id?: number;
                                attributes?: {
                                  Name?: string;
                                  Image?: {
                                    data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        alternativeText?: string;
                                        caption?: string;
                                        width?: number;
                                        height?: number;
                                        formats?: unknown;
                                        hash?: string;
                                        ext?: string;
                                        mime?: string;
                                        /** Format: float */
                                        size?: number;
                                        url?: string;
                                        previewUrl?: string;
                                        provider?: string;
                                        provider_metadata?: unknown;
                                        related?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        folder?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        folderPath?: string;
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    };
                                  };
                                  mekhwars?: {
                                    data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      }[];
                                  };
                                  tailor?: {
                                    data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        location?: string;
                                        description?: string;
                                        image?: {
                                          data?: {
                                            id?: number;
                                            attributes?: {
                                              name?: string;
                                              alternativeText?: string;
                                              caption?: string;
                                              width?: number;
                                              height?: number;
                                              formats?: unknown;
                                              hash?: string;
                                              ext?: string;
                                              mime?: string;
                                              /** Format: float */
                                              size?: number;
                                              url?: string;
                                              previewUrl?: string;
                                              provider?: string;
                                              provider_metadata?: unknown;
                                              related?: {
                                                data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  }[];
                                              };
                                              folder?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                              folderPath?: string;
                                              /** Format: date-time */
                                              createdAt?: string;
                                              /** Format: date-time */
                                              updatedAt?: string;
                                              createdBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                              updatedBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                            };
                                          };
                                        };
                                        background?: {
                                          data?: {
                                            id?: number;
                                            attributes?: {
                                              name?: string;
                                              alternativeText?: string;
                                              caption?: string;
                                              width?: number;
                                              height?: number;
                                              formats?: unknown;
                                              hash?: string;
                                              ext?: string;
                                              mime?: string;
                                              /** Format: float */
                                              size?: number;
                                              url?: string;
                                              previewUrl?: string;
                                              provider?: string;
                                              provider_metadata?: unknown;
                                              related?: {
                                                data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  }[];
                                              };
                                              folder?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                              folderPath?: string;
                                              /** Format: date-time */
                                              createdAt?: string;
                                              /** Format: date-time */
                                              updatedAt?: string;
                                              createdBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                              updatedBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                            };
                                          };
                                        };
                                        /** Format: date */
                                        date_joined?: string;
                                        designs?: {
                                          data?: {
                                              id?: number;
                                              attributes?: {
                                                name?: string;
                                                tailor?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                image?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: {
                                                      name?: string;
                                                      alternativeText?: string;
                                                      caption?: string;
                                                      width?: number;
                                                      height?: number;
                                                      formats?: unknown;
                                                      hash?: string;
                                                      ext?: string;
                                                      mime?: string;
                                                      /** Format: float */
                                                      size?: number;
                                                      url?: string;
                                                      previewUrl?: string;
                                                      provider?: string;
                                                      provider_metadata?: unknown;
                                                      related?: {
                                                        data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          }[];
                                                      };
                                                      folder?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                      folderPath?: string;
                                                      /** Format: date-time */
                                                      createdAt?: string;
                                                      /** Format: date-time */
                                                      updatedAt?: string;
                                                      createdBy?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                      updatedBy?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                    };
                                                  };
                                                };
                                                /** Format: float */
                                                price?: number;
                                                /** Format: float */
                                                rating?: number;
                                                description?: string;
                                                sizes?: {
                                                    id?: number;
                                                    __component?: string;
                                                    name?: string;
                                                    shoulder?: number;
                                                    writst?: number;
                                                    top_width?: number;
                                                    bust?: number;
                                                    top_length?: number;
                                                    arm_length?: number;
                                                  }[];
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                /** Format: date-time */
                                                publishedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                              };
                                            }[];
                                        };
                                        experience?: string;
                                        style?: string;
                                        philosophy?: string;
                                        mekhwars?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        category?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        fabrics?: {
                                          data?: {
                                              id?: number;
                                              attributes?: {
                                                name?: string;
                                                /** Format: float */
                                                price?: number;
                                                description?: string;
                                                main_image?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: {
                                                      name?: string;
                                                      alternativeText?: string;
                                                      caption?: string;
                                                      width?: number;
                                                      height?: number;
                                                      formats?: unknown;
                                                      hash?: string;
                                                      ext?: string;
                                                      mime?: string;
                                                      /** Format: float */
                                                      size?: number;
                                                      url?: string;
                                                      previewUrl?: string;
                                                      provider?: string;
                                                      provider_metadata?: unknown;
                                                      related?: {
                                                        data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          }[];
                                                      };
                                                      folder?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                      folderPath?: string;
                                                      /** Format: date-time */
                                                      createdAt?: string;
                                                      /** Format: date-time */
                                                      updatedAt?: string;
                                                      createdBy?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                      updatedBy?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                    };
                                                  };
                                                };
                                                images?: {
                                                  data?: {
                                                      id?: number;
                                                      attributes?: {
                                                        name?: string;
                                                        alternativeText?: string;
                                                        caption?: string;
                                                        width?: number;
                                                        height?: number;
                                                        formats?: unknown;
                                                        hash?: string;
                                                        ext?: string;
                                                        mime?: string;
                                                        /** Format: float */
                                                        size?: number;
                                                        url?: string;
                                                        previewUrl?: string;
                                                        provider?: string;
                                                        provider_metadata?: unknown;
                                                        related?: {
                                                          data?: {
                                                              id?: number;
                                                              attributes?: Record<string, never>;
                                                            }[];
                                                        };
                                                        folder?: {
                                                          data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          };
                                                        };
                                                        folderPath?: string;
                                                        /** Format: date-time */
                                                        createdAt?: string;
                                                        /** Format: date-time */
                                                        updatedAt?: string;
                                                        createdBy?: {
                                                          data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          };
                                                        };
                                                        updatedBy?: {
                                                          data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          };
                                                        };
                                                      };
                                                    }[];
                                                };
                                                category?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: {
                                                      name?: string;
                                                      Thumbnail?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: {
                                                            name?: string;
                                                            alternativeText?: string;
                                                            caption?: string;
                                                            width?: number;
                                                            height?: number;
                                                            formats?: unknown;
                                                            hash?: string;
                                                            ext?: string;
                                                            mime?: string;
                                                            /** Format: float */
                                                            size?: number;
                                                            url?: string;
                                                            previewUrl?: string;
                                                            provider?: string;
                                                            provider_metadata?: unknown;
                                                            related?: {
                                                              data?: {
                                                                  id?: number;
                                                                  attributes?: Record<string, never>;
                                                                }[];
                                                            };
                                                            folder?: {
                                                              data?: {
                                                                id?: number;
                                                                attributes?: Record<string, never>;
                                                              };
                                                            };
                                                            folderPath?: string;
                                                            /** Format: date-time */
                                                            createdAt?: string;
                                                            /** Format: date-time */
                                                            updatedAt?: string;
                                                            createdBy?: {
                                                              data?: {
                                                                id?: number;
                                                                attributes?: Record<string, never>;
                                                              };
                                                            };
                                                            updatedBy?: {
                                                              data?: {
                                                                id?: number;
                                                                attributes?: Record<string, never>;
                                                              };
                                                            };
                                                          };
                                                        };
                                                      };
                                                      fabrics?: {
                                                        data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          }[];
                                                      };
                                                      /** Format: date-time */
                                                      createdAt?: string;
                                                      /** Format: date-time */
                                                      updatedAt?: string;
                                                      /** Format: date-time */
                                                      publishedAt?: string;
                                                      createdBy?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                      updatedBy?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                      localizations?: {
                                                        data?: unknown[];
                                                      };
                                                      locale?: string;
                                                    };
                                                  };
                                                };
                                                detail_list_item?: {
                                                    id?: number;
                                                    title?: string;
                                                  }[];
                                                fabric_pattern?: {
                                                    id?: number;
                                                    title?: string;
                                                    /** Format: float */
                                                    price?: number;
                                                    image?: {
                                                      data?: {
                                                        id?: number;
                                                        attributes?: {
                                                          name?: string;
                                                          alternativeText?: string;
                                                          caption?: string;
                                                          width?: number;
                                                          height?: number;
                                                          formats?: unknown;
                                                          hash?: string;
                                                          ext?: string;
                                                          mime?: string;
                                                          /** Format: float */
                                                          size?: number;
                                                          url?: string;
                                                          previewUrl?: string;
                                                          provider?: string;
                                                          provider_metadata?: unknown;
                                                          related?: {
                                                            data?: {
                                                                id?: number;
                                                                attributes?: Record<string, never>;
                                                              }[];
                                                          };
                                                          folder?: {
                                                            data?: {
                                                              id?: number;
                                                              attributes?: Record<string, never>;
                                                            };
                                                          };
                                                          folderPath?: string;
                                                          /** Format: date-time */
                                                          createdAt?: string;
                                                          /** Format: date-time */
                                                          updatedAt?: string;
                                                          createdBy?: {
                                                            data?: {
                                                              id?: number;
                                                              attributes?: Record<string, never>;
                                                            };
                                                          };
                                                          updatedBy?: {
                                                            data?: {
                                                              id?: number;
                                                              attributes?: Record<string, never>;
                                                            };
                                                          };
                                                        };
                                                      };
                                                    };
                                                  }[];
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                /** Format: date-time */
                                                publishedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                localizations?: {
                                                  data?: unknown[];
                                                };
                                                locale?: string;
                                              };
                                            }[];
                                        };
                                        /** Format: float */
                                        rating?: number;
                                        tags?: string;
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        /** Format: date-time */
                                        publishedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        localizations?: {
                                          data?: unknown[];
                                        };
                                        locale?: string;
                                      };
                                    };
                                  };
                                  /** Format: date-time */
                                  createdAt?: string;
                                  /** Format: date-time */
                                  updatedAt?: string;
                                  /** Format: date-time */
                                  publishedAt?: string;
                                  createdBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  updatedBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  localizations?: {
                                    data?: unknown[];
                                  };
                                  locale?: string;
                                };
                              };
                            };
                            /** Format: float */
                            price?: number;
                            tailor?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            detail_list_item?: {
                                id?: number;
                                __component?: string;
                                title?: string;
                              }[];
                            /** Format: float */
                            rating?: number;
                            favourite_products?: {
                              data?: {
                                  id?: number;
                                  attributes?: {
                                    mekhwar?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    user?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    /** Format: date-time */
                                    createdAt?: string;
                                    /** Format: date-time */
                                    updatedAt?: string;
                                    /** Format: date-time */
                                    publishedAt?: string;
                                    createdBy?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    updatedBy?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                  };
                                }[];
                            };
                            slug?: string;
                            customizable?: boolean;
                            fabrics?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            /** Format: date-time */
                            publishedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            localizations?: {
                              data?: unknown[];
                            };
                            locale?: string;
                          };
                        };
                      };
                    })[];
                  /** @enum {string} */
                  status?: "PENDING" | "PLACED" | "ON THE WAY" | "DELIVERED" | "CANCELLED" | "REFUNDED";
                  cancel_reason?: string;
                  /** Format: date */
                  cancel_date?: string;
                  /** @enum {string} */
                  size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  /** Format: date-time */
                  publishedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              };
            };
            addresses?: {
              data?: ({
                  id?: number;
                  attributes?: {
                    name?: string;
                    country?: string;
                    city?: string;
                    street?: string;
                    building?: string;
                    address?: string;
                    flat?: string;
                    mobile?: string;
                    user?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    /** @enum {string} */
                    type?: "home" | "office" | "gym" | "work";
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    /** Format: date-time */
                    publishedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                  };
                })[];
            };
            orders?: {
              data?: ({
                  id?: number;
                  attributes?: {
                    ref?: string;
                    customer_address?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    users_permissions_user?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    paid?: boolean;
                    /** Format: float */
                    tax?: number;
                    /** Format: float */
                    discount?: number;
                    /** Format: float */
                    total?: number;
                    /** Format: float */
                    delivery_charge?: number;
                    custom?: {
                        id?: number;
                        quantity?: number;
                        /** Format: float */
                        bust?: number;
                        /** Format: float */
                        wrist?: number;
                        /** Format: float */
                        shoulder?: number;
                        cup?: string;
                        /** Format: float */
                        chest_point?: number;
                        /** Format: float */
                        neck?: number;
                        /** Format: float */
                        hips?: number;
                        /** Format: float */
                        height?: number;
                        /** Format: float */
                        arm_width?: number;
                        /** Format: float */
                        sleeves_length?: number;
                        wrist_style?: string;
                        neck_style?: string;
                        customer_instructions?: string;
                        color?: string;
                        mekhwar?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                      }[];
                    delivery_note?: string;
                    /** @enum {string} */
                    status?: "PLACED" | "SEWING" | "ON THE WAY" | "DELIVERED" | "CANCELLED";
                    /** @enum {string} */
                    size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                  };
                })[];
            };
            custom_design_orders?: {
              data?: ({
                  id?: number;
                  attributes?: {
                    design?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                    color?: string;
                    fabric?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    tailor?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    /** Format: float */
                    price?: number;
                    /** Format: float */
                    tax?: number;
                    /** Format: float */
                    delivery_charge?: number;
                    /** Format: float */
                    tailor_fee?: number;
                    /** @enum {string} */
                    status?: "PENDING" | "APPROVED" | "PROCESSING" | "REJECTED" | "CANCELLED" | "ON THE WAY" | "DELIVERED";
                    style?: unknown;
                    size_profile?: {
                      id?: number;
                      /** Format: float */
                      shoulder?: number;
                      /** Format: float */
                      bust?: number;
                      /** Format: float */
                      arm_length?: number;
                      /** Format: float */
                      wrist?: number;
                      /** Format: float */
                      top_length?: number;
                      /** Format: float */
                      top_width?: number;
                      cup?: string;
                      /** Format: float */
                      chest_point?: number;
                      /** Format: float */
                      neck?: number;
                      /** Format: float */
                      hips?: number;
                      /** Format: float */
                      height?: number;
                      /** Format: float */
                      sleeves_length?: number;
                      wrist_style?: string;
                      neck_style?: string;
                      /** Format: float */
                      arm_width?: number;
                    };
                    /** @enum {string} */
                    size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL" | "CUSTOM";
                    user?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    address?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    customer_instructions?: string;
                    design2?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                    design3?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                    design4?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    /** Format: date-time */
                    publishedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                  };
                })[];
            };
            favourite_products?: {
              data?: {
                  id?: number;
                  attributes?: Record<string, never>;
                }[];
            };
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      coupon?: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            /** Format: date */
            valid_from?: string;
            /** Format: date */
            valid_till?: string;
            /** @enum {string} */
            type?: "Percentage" | "Flat";
            /** Format: float */
            amount?: number;
            code?: string;
            active?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
    };
    CouponUsageResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["CouponUsage"];
    };
    CouponUsageResponse: {
      data?: components["schemas"]["CouponUsageResponseDataObject"];
      meta?: Record<string, never>;
    };
    CustomOrderRequest: {
      data: {
        /** @example string or id */
        design?: number | string;
        color?: string;
        /** @example string or id */
        fabric?: number | string;
        /** @example string or id */
        tailor?: number | string;
        /** Format: float */
        price?: number;
        /** Format: float */
        tax?: number;
        /** Format: float */
        delivery_charge?: number;
        /** Format: float */
        tailor_fee?: number;
        /** @enum {string} */
        status?: "PENDING" | "APPROVED" | "PROCESSING" | "REJECTED" | "CANCELLED" | "ON THE WAY" | "DELIVERED";
        style?: unknown;
        size_profile?: components["schemas"]["OrdeSizeProfileComponent"];
        /** @enum {string} */
        size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL" | "CUSTOM";
        /** @example string or id */
        user?: number | string;
        /** @example string or id */
        address?: number | string;
        customer_instructions?: string;
        /** @example string or id */
        design2?: number | string;
        /** @example string or id */
        design3?: number | string;
        /** @example string or id */
        design4?: number | string;
      };
    };
    CustomOrderListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["CustomOrder"];
    };
    CustomOrderListResponse: {
      data?: components["schemas"]["CustomOrderListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    CustomOrder: {
      design?: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            alternativeText?: string;
            caption?: string;
            width?: number;
            height?: number;
            formats?: unknown;
            hash?: string;
            ext?: string;
            mime?: string;
            /** Format: float */
            size?: number;
            url?: string;
            previewUrl?: string;
            provider?: string;
            provider_metadata?: unknown;
            related?: {
              data?: {
                  id?: number;
                  attributes?: Record<string, never>;
                }[];
            };
            folder?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  pathId?: number;
                  parent?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  children?: {
                    data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      }[];
                  };
                  files?: {
                    data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: {
                                firstname?: string;
                                lastname?: string;
                                username?: string;
                                /** Format: email */
                                email?: string;
                                resetPasswordToken?: string;
                                registrationToken?: string;
                                isActive?: boolean;
                                roles?: {
                                  data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        code?: string;
                                        description?: string;
                                        users?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        permissions?: {
                                          data?: {
                                              id?: number;
                                              attributes?: {
                                                action?: string;
                                                actionParameters?: unknown;
                                                subject?: string;
                                                properties?: unknown;
                                                conditions?: unknown;
                                                role?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                              };
                                            }[];
                                        };
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    }[];
                                };
                                blocked?: boolean;
                                preferedLanguage?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                createdBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                updatedBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                              };
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      }[];
                  };
                  path?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              };
            };
            folderPath?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      color?: string;
      fabric?: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            /** Format: float */
            price?: number;
            description?: string;
            main_image?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  alternativeText?: string;
                  caption?: string;
                  width?: number;
                  height?: number;
                  formats?: unknown;
                  hash?: string;
                  ext?: string;
                  mime?: string;
                  /** Format: float */
                  size?: number;
                  url?: string;
                  previewUrl?: string;
                  provider?: string;
                  provider_metadata?: unknown;
                  related?: {
                    data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      }[];
                  };
                  folder?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  folderPath?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              };
            };
            images?: {
              data?: {
                  id?: number;
                  attributes?: {
                    name?: string;
                    alternativeText?: string;
                    caption?: string;
                    width?: number;
                    height?: number;
                    formats?: unknown;
                    hash?: string;
                    ext?: string;
                    mime?: string;
                    /** Format: float */
                    size?: number;
                    url?: string;
                    previewUrl?: string;
                    provider?: string;
                    provider_metadata?: unknown;
                    related?: {
                      data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        }[];
                    };
                    folder?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    folderPath?: string;
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                  };
                }[];
            };
            category?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  Thumbnail?: {
                    data?: {
                      id?: number;
                      attributes?: {
                        name?: string;
                        alternativeText?: string;
                        caption?: string;
                        width?: number;
                        height?: number;
                        formats?: unknown;
                        hash?: string;
                        ext?: string;
                        mime?: string;
                        /** Format: float */
                        size?: number;
                        url?: string;
                        previewUrl?: string;
                        provider?: string;
                        provider_metadata?: unknown;
                        related?: {
                          data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            }[];
                        };
                        folder?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        folderPath?: string;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        createdBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        updatedBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                      };
                    };
                  };
                  fabrics?: {
                    data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      }[];
                  };
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  /** Format: date-time */
                  publishedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  localizations?: {
                    data?: unknown[];
                  };
                  locale?: string;
                };
              };
            };
            detail_list_item?: {
                id?: number;
                title?: string;
              }[];
            fabric_pattern?: {
                id?: number;
                title?: string;
                /** Format: float */
                price?: number;
                image?: {
                  data?: {
                    id?: number;
                    attributes?: {
                      name?: string;
                      alternativeText?: string;
                      caption?: string;
                      width?: number;
                      height?: number;
                      formats?: unknown;
                      hash?: string;
                      ext?: string;
                      mime?: string;
                      /** Format: float */
                      size?: number;
                      url?: string;
                      previewUrl?: string;
                      provider?: string;
                      provider_metadata?: unknown;
                      related?: {
                        data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          }[];
                      };
                      folder?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      folderPath?: string;
                      /** Format: date-time */
                      createdAt?: string;
                      /** Format: date-time */
                      updatedAt?: string;
                      createdBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      updatedBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                    };
                  };
                };
              }[];
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            localizations?: {
              data?: unknown[];
            };
            locale?: string;
          };
        };
      };
      tailor?: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            location?: string;
            description?: string;
            image?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  alternativeText?: string;
                  caption?: string;
                  width?: number;
                  height?: number;
                  formats?: unknown;
                  hash?: string;
                  ext?: string;
                  mime?: string;
                  /** Format: float */
                  size?: number;
                  url?: string;
                  previewUrl?: string;
                  provider?: string;
                  provider_metadata?: unknown;
                  related?: {
                    data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      }[];
                  };
                  folder?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  folderPath?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              };
            };
            background?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  alternativeText?: string;
                  caption?: string;
                  width?: number;
                  height?: number;
                  formats?: unknown;
                  hash?: string;
                  ext?: string;
                  mime?: string;
                  /** Format: float */
                  size?: number;
                  url?: string;
                  previewUrl?: string;
                  provider?: string;
                  provider_metadata?: unknown;
                  related?: {
                    data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      }[];
                  };
                  folder?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  folderPath?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              };
            };
            /** Format: date */
            date_joined?: string;
            designs?: {
              data?: {
                  id?: number;
                  attributes?: {
                    name?: string;
                    tailor?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    image?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                    /** Format: float */
                    price?: number;
                    /** Format: float */
                    rating?: number;
                    description?: string;
                    sizes?: {
                        id?: number;
                        __component?: string;
                        name?: string;
                        shoulder?: number;
                        writst?: number;
                        top_width?: number;
                        bust?: number;
                        top_length?: number;
                        arm_length?: number;
                      }[];
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    /** Format: date-time */
                    publishedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                  };
                }[];
            };
            experience?: string;
            style?: string;
            philosophy?: string;
            mekhwars?: {
              data?: ({
                  id?: number;
                  attributes?: {
                    title?: string;
                    description?: string;
                    main_image?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                    images?: {
                      data?: {
                          id?: number;
                          attributes?: {
                            name?: string;
                            alternativeText?: string;
                            caption?: string;
                            width?: number;
                            height?: number;
                            formats?: unknown;
                            hash?: string;
                            ext?: string;
                            mime?: string;
                            /** Format: float */
                            size?: number;
                            url?: string;
                            previewUrl?: string;
                            provider?: string;
                            provider_metadata?: unknown;
                            related?: {
                              data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                }[];
                            };
                            folder?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            folderPath?: string;
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                          };
                        }[];
                    };
                    category?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          Name?: string;
                          Image?: {
                            data?: {
                              id?: number;
                              attributes?: {
                                name?: string;
                                alternativeText?: string;
                                caption?: string;
                                width?: number;
                                height?: number;
                                formats?: unknown;
                                hash?: string;
                                ext?: string;
                                mime?: string;
                                /** Format: float */
                                size?: number;
                                url?: string;
                                previewUrl?: string;
                                provider?: string;
                                provider_metadata?: unknown;
                                related?: {
                                  data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    }[];
                                };
                                folder?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                folderPath?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                createdBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                updatedBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                              };
                            };
                          };
                          mekhwars?: {
                            data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                          };
                          tailor?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          /** Format: date-time */
                          publishedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          localizations?: {
                            data?: unknown[];
                          };
                          locale?: string;
                        };
                      };
                    };
                    /** Format: float */
                    price?: number;
                    tailor?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    detail_list_item?: {
                        id?: number;
                        __component?: string;
                        title?: string;
                      }[];
                    /** Format: float */
                    rating?: number;
                    favourite_products?: {
                      data?: ({
                          id?: number;
                          attributes?: {
                            mekhwar?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            user?: {
                              data?: {
                                id?: number;
                                attributes?: {
                                  username?: string;
                                  /** Format: email */
                                  email?: string;
                                  provider?: string;
                                  resetPasswordToken?: string;
                                  confirmationToken?: string;
                                  confirmed?: boolean;
                                  blocked?: boolean;
                                  role?: {
                                    data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        description?: string;
                                        type?: string;
                                        permissions?: {
                                          data?: {
                                              id?: number;
                                              attributes?: {
                                                action?: string;
                                                role?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                              };
                                            }[];
                                        };
                                        users?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    };
                                  };
                                  phone?: string;
                                  name?: string;
                                  size_profiles?: {
                                    data?: {
                                        id?: number;
                                        attributes?: {
                                          title?: string;
                                          /** Format: float */
                                          shoulder?: number;
                                          /** Format: float */
                                          bust?: number;
                                          /** Format: float */
                                          arm_length?: number;
                                          /** Format: float */
                                          wrist?: number;
                                          /** Format: float */
                                          top_length?: number;
                                          /** Format: float */
                                          top_width?: number;
                                          users_permissions_user?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          cup?: string;
                                          /** Format: float */
                                          chest_point?: number;
                                          /** Format: float */
                                          neck?: number;
                                          /** Format: float */
                                          hips?: number;
                                          /** Format: float */
                                          height?: number;
                                          /** Format: float */
                                          arm_width?: number;
                                          /** Format: float */
                                          sleeves_length?: number;
                                          wrist_style?: string;
                                          neck_style?: string;
                                          /** Format: date-time */
                                          createdAt?: string;
                                          /** Format: date-time */
                                          updatedAt?: string;
                                          /** Format: date-time */
                                          publishedAt?: string;
                                          createdBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          updatedBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                        };
                                      }[];
                                  };
                                  cart?: {
                                    data?: {
                                      id?: number;
                                      attributes?: {
                                        user?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        custom?: ({
                                            id?: number;
                                            size_profile?: {
                                              data?: {
                                                id?: number;
                                                attributes?: Record<string, never>;
                                              };
                                            };
                                            quantity?: number;
                                            /** Format: float */
                                            shoulder?: number;
                                            /** Format: float */
                                            bust?: number;
                                            /** Format: float */
                                            wrist?: number;
                                            save_size_profile?: boolean;
                                            /** @enum {string} */
                                            size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";
                                            customer_instructions?: string;
                                            chest_point?: string;
                                            cup?: string;
                                            /** Format: float */
                                            arm_width?: number;
                                            /** Format: float */
                                            height?: number;
                                            /** Format: float */
                                            sleeves_length?: number;
                                            /** Format: float */
                                            neck?: number;
                                            /** Format: float */
                                            hips?: number;
                                            mekhwar?: {
                                              data?: {
                                                id?: number;
                                                attributes?: Record<string, never>;
                                              };
                                            };
                                          })[];
                                        /** @enum {string} */
                                        status?: "PENDING" | "PLACED" | "ON THE WAY" | "DELIVERED" | "CANCELLED" | "REFUNDED";
                                        cancel_reason?: string;
                                        /** Format: date */
                                        cancel_date?: string;
                                        /** @enum {string} */
                                        size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        /** Format: date-time */
                                        publishedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    };
                                  };
                                  addresses?: {
                                    data?: ({
                                        id?: number;
                                        attributes?: {
                                          name?: string;
                                          country?: string;
                                          city?: string;
                                          street?: string;
                                          building?: string;
                                          address?: string;
                                          flat?: string;
                                          mobile?: string;
                                          user?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          /** @enum {string} */
                                          type?: "home" | "office" | "gym" | "work";
                                          /** Format: date-time */
                                          createdAt?: string;
                                          /** Format: date-time */
                                          updatedAt?: string;
                                          /** Format: date-time */
                                          publishedAt?: string;
                                          createdBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          updatedBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                        };
                                      })[];
                                  };
                                  orders?: {
                                    data?: ({
                                        id?: number;
                                        attributes?: {
                                          ref?: string;
                                          customer_address?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          users_permissions_user?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          paid?: boolean;
                                          /** Format: float */
                                          tax?: number;
                                          /** Format: float */
                                          discount?: number;
                                          /** Format: float */
                                          total?: number;
                                          /** Format: float */
                                          delivery_charge?: number;
                                          custom?: {
                                              id?: number;
                                              quantity?: number;
                                              /** Format: float */
                                              bust?: number;
                                              /** Format: float */
                                              wrist?: number;
                                              /** Format: float */
                                              shoulder?: number;
                                              cup?: string;
                                              /** Format: float */
                                              chest_point?: number;
                                              /** Format: float */
                                              neck?: number;
                                              /** Format: float */
                                              hips?: number;
                                              /** Format: float */
                                              height?: number;
                                              /** Format: float */
                                              arm_width?: number;
                                              /** Format: float */
                                              sleeves_length?: number;
                                              wrist_style?: string;
                                              neck_style?: string;
                                              customer_instructions?: string;
                                              color?: string;
                                              mekhwar?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                            }[];
                                          delivery_note?: string;
                                          /** @enum {string} */
                                          status?: "PLACED" | "SEWING" | "ON THE WAY" | "DELIVERED" | "CANCELLED";
                                          /** @enum {string} */
                                          size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";
                                          /** Format: date-time */
                                          createdAt?: string;
                                          /** Format: date-time */
                                          updatedAt?: string;
                                          createdBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          updatedBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                        };
                                      })[];
                                  };
                                  custom_design_orders?: {
                                    data?: ({
                                        id?: number;
                                        attributes?: {
                                          design?: {
                                            data?: {
                                              id?: number;
                                              attributes?: {
                                                name?: string;
                                                alternativeText?: string;
                                                caption?: string;
                                                width?: number;
                                                height?: number;
                                                formats?: unknown;
                                                hash?: string;
                                                ext?: string;
                                                mime?: string;
                                                /** Format: float */
                                                size?: number;
                                                url?: string;
                                                previewUrl?: string;
                                                provider?: string;
                                                provider_metadata?: unknown;
                                                related?: {
                                                  data?: {
                                                      id?: number;
                                                      attributes?: Record<string, never>;
                                                    }[];
                                                };
                                                folder?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                folderPath?: string;
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                              };
                                            };
                                          };
                                          color?: string;
                                          fabric?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          tailor?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          /** Format: float */
                                          price?: number;
                                          /** Format: float */
                                          tax?: number;
                                          /** Format: float */
                                          delivery_charge?: number;
                                          /** Format: float */
                                          tailor_fee?: number;
                                          /** @enum {string} */
                                          status?: "PENDING" | "APPROVED" | "PROCESSING" | "REJECTED" | "CANCELLED" | "ON THE WAY" | "DELIVERED";
                                          style?: unknown;
                                          size_profile?: {
                                            id?: number;
                                            /** Format: float */
                                            shoulder?: number;
                                            /** Format: float */
                                            bust?: number;
                                            /** Format: float */
                                            arm_length?: number;
                                            /** Format: float */
                                            wrist?: number;
                                            /** Format: float */
                                            top_length?: number;
                                            /** Format: float */
                                            top_width?: number;
                                            cup?: string;
                                            /** Format: float */
                                            chest_point?: number;
                                            /** Format: float */
                                            neck?: number;
                                            /** Format: float */
                                            hips?: number;
                                            /** Format: float */
                                            height?: number;
                                            /** Format: float */
                                            sleeves_length?: number;
                                            wrist_style?: string;
                                            neck_style?: string;
                                            /** Format: float */
                                            arm_width?: number;
                                          };
                                          /** @enum {string} */
                                          size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL" | "CUSTOM";
                                          user?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          address?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          customer_instructions?: string;
                                          design2?: {
                                            data?: {
                                              id?: number;
                                              attributes?: {
                                                name?: string;
                                                alternativeText?: string;
                                                caption?: string;
                                                width?: number;
                                                height?: number;
                                                formats?: unknown;
                                                hash?: string;
                                                ext?: string;
                                                mime?: string;
                                                /** Format: float */
                                                size?: number;
                                                url?: string;
                                                previewUrl?: string;
                                                provider?: string;
                                                provider_metadata?: unknown;
                                                related?: {
                                                  data?: {
                                                      id?: number;
                                                      attributes?: Record<string, never>;
                                                    }[];
                                                };
                                                folder?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                folderPath?: string;
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                              };
                                            };
                                          };
                                          design3?: {
                                            data?: {
                                              id?: number;
                                              attributes?: {
                                                name?: string;
                                                alternativeText?: string;
                                                caption?: string;
                                                width?: number;
                                                height?: number;
                                                formats?: unknown;
                                                hash?: string;
                                                ext?: string;
                                                mime?: string;
                                                /** Format: float */
                                                size?: number;
                                                url?: string;
                                                previewUrl?: string;
                                                provider?: string;
                                                provider_metadata?: unknown;
                                                related?: {
                                                  data?: {
                                                      id?: number;
                                                      attributes?: Record<string, never>;
                                                    }[];
                                                };
                                                folder?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                folderPath?: string;
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                              };
                                            };
                                          };
                                          design4?: {
                                            data?: {
                                              id?: number;
                                              attributes?: {
                                                name?: string;
                                                alternativeText?: string;
                                                caption?: string;
                                                width?: number;
                                                height?: number;
                                                formats?: unknown;
                                                hash?: string;
                                                ext?: string;
                                                mime?: string;
                                                /** Format: float */
                                                size?: number;
                                                url?: string;
                                                previewUrl?: string;
                                                provider?: string;
                                                provider_metadata?: unknown;
                                                related?: {
                                                  data?: {
                                                      id?: number;
                                                      attributes?: Record<string, never>;
                                                    }[];
                                                };
                                                folder?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                folderPath?: string;
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                              };
                                            };
                                          };
                                          /** Format: date-time */
                                          createdAt?: string;
                                          /** Format: date-time */
                                          updatedAt?: string;
                                          /** Format: date-time */
                                          publishedAt?: string;
                                          createdBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          updatedBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                        };
                                      })[];
                                  };
                                  favourite_products?: {
                                    data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      }[];
                                  };
                                  /** Format: date-time */
                                  createdAt?: string;
                                  /** Format: date-time */
                                  updatedAt?: string;
                                  createdBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  updatedBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                };
                              };
                            };
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            /** Format: date-time */
                            publishedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                          };
                        })[];
                    };
                    slug?: string;
                    customizable?: boolean;
                    fabrics?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    /** Format: date-time */
                    publishedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    localizations?: {
                      data?: unknown[];
                    };
                    locale?: string;
                  };
                })[];
            };
            category?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            fabrics?: {
              data?: {
                  id?: number;
                  attributes?: Record<string, never>;
                }[];
            };
            /** Format: float */
            rating?: number;
            tags?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            localizations?: {
              data?: unknown[];
            };
            locale?: string;
          };
        };
      };
      /** Format: float */
      price?: number;
      /** Format: float */
      tax?: number;
      /** Format: float */
      delivery_charge?: number;
      /** Format: float */
      tailor_fee?: number;
      /** @enum {string} */
      status?: "PENDING" | "APPROVED" | "PROCESSING" | "REJECTED" | "CANCELLED" | "ON THE WAY" | "DELIVERED";
      style?: unknown;
      size_profile?: components["schemas"]["OrdeSizeProfileComponent"];
      /** @enum {string} */
      size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL" | "CUSTOM";
      user?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      address?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      customer_instructions?: string;
      design2?: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            alternativeText?: string;
            caption?: string;
            width?: number;
            height?: number;
            formats?: unknown;
            hash?: string;
            ext?: string;
            mime?: string;
            /** Format: float */
            size?: number;
            url?: string;
            previewUrl?: string;
            provider?: string;
            provider_metadata?: unknown;
            related?: {
              data?: {
                  id?: number;
                  attributes?: Record<string, never>;
                }[];
            };
            folder?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            folderPath?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      design3?: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            alternativeText?: string;
            caption?: string;
            width?: number;
            height?: number;
            formats?: unknown;
            hash?: string;
            ext?: string;
            mime?: string;
            /** Format: float */
            size?: number;
            url?: string;
            previewUrl?: string;
            provider?: string;
            provider_metadata?: unknown;
            related?: {
              data?: {
                  id?: number;
                  attributes?: Record<string, never>;
                }[];
            };
            folder?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            folderPath?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      design4?: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            alternativeText?: string;
            caption?: string;
            width?: number;
            height?: number;
            formats?: unknown;
            hash?: string;
            ext?: string;
            mime?: string;
            /** Format: float */
            size?: number;
            url?: string;
            previewUrl?: string;
            provider?: string;
            provider_metadata?: unknown;
            related?: {
              data?: {
                  id?: number;
                  attributes?: Record<string, never>;
                }[];
            };
            folder?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            folderPath?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
    };
    CustomOrderResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["CustomOrder"];
    };
    CustomOrderResponse: {
      data?: components["schemas"]["CustomOrderResponseDataObject"];
      meta?: Record<string, never>;
    };
    OrdeSizeProfileComponent: {
      id?: number;
      /** Format: float */
      shoulder?: number;
      /** Format: float */
      bust?: number;
      /** Format: float */
      arm_length?: number;
      /** Format: float */
      wrist?: number;
      /** Format: float */
      top_length?: number;
      /** Format: float */
      top_width?: number;
      cup?: string;
      /** Format: float */
      chest_point?: number;
      /** Format: float */
      neck?: number;
      /** Format: float */
      hips?: number;
      /** Format: float */
      height?: number;
      /** Format: float */
      sleeves_length?: number;
      wrist_style?: string;
      neck_style?: string;
      /** Format: float */
      arm_width?: number;
    };
    CustomerAddressRequest: {
      data: {
        name?: string;
        country?: string;
        city?: string;
        street?: string;
        building?: string;
        address?: string;
        flat?: string;
        mobile?: string;
        /** @example string or id */
        user?: number | string;
        /** @enum {string} */
        type?: "home" | "office" | "gym" | "work";
      };
    };
    CustomerAddressListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["CustomerAddress"];
    };
    CustomerAddressListResponse: {
      data?: components["schemas"]["CustomerAddressListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    CustomerAddress: {
      name?: string;
      country?: string;
      city?: string;
      street?: string;
      building?: string;
      address?: string;
      flat?: string;
      mobile?: string;
      user?: {
        data?: {
          id?: number;
          attributes?: {
            username?: string;
            /** Format: email */
            email?: string;
            provider?: string;
            resetPasswordToken?: string;
            confirmationToken?: string;
            confirmed?: boolean;
            blocked?: boolean;
            role?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  description?: string;
                  type?: string;
                  permissions?: {
                    data?: {
                        id?: number;
                        attributes?: {
                          action?: string;
                          role?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: {
                                firstname?: string;
                                lastname?: string;
                                username?: string;
                                /** Format: email */
                                email?: string;
                                resetPasswordToken?: string;
                                registrationToken?: string;
                                isActive?: boolean;
                                roles?: {
                                  data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        code?: string;
                                        description?: string;
                                        users?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        permissions?: {
                                          data?: {
                                              id?: number;
                                              attributes?: {
                                                action?: string;
                                                actionParameters?: unknown;
                                                subject?: string;
                                                properties?: unknown;
                                                conditions?: unknown;
                                                role?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                              };
                                            }[];
                                        };
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    }[];
                                };
                                blocked?: boolean;
                                preferedLanguage?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                createdBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                updatedBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                              };
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      }[];
                  };
                  users?: {
                    data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      }[];
                  };
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              };
            };
            phone?: string;
            name?: string;
            size_profiles?: {
              data?: {
                  id?: number;
                  attributes?: {
                    title?: string;
                    /** Format: float */
                    shoulder?: number;
                    /** Format: float */
                    bust?: number;
                    /** Format: float */
                    arm_length?: number;
                    /** Format: float */
                    wrist?: number;
                    /** Format: float */
                    top_length?: number;
                    /** Format: float */
                    top_width?: number;
                    users_permissions_user?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    cup?: string;
                    /** Format: float */
                    chest_point?: number;
                    /** Format: float */
                    neck?: number;
                    /** Format: float */
                    hips?: number;
                    /** Format: float */
                    height?: number;
                    /** Format: float */
                    arm_width?: number;
                    /** Format: float */
                    sleeves_length?: number;
                    wrist_style?: string;
                    neck_style?: string;
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    /** Format: date-time */
                    publishedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                  };
                }[];
            };
            cart?: {
              data?: {
                id?: number;
                attributes?: {
                  user?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  custom?: ({
                      id?: number;
                      size_profile?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      quantity?: number;
                      /** Format: float */
                      shoulder?: number;
                      /** Format: float */
                      bust?: number;
                      /** Format: float */
                      wrist?: number;
                      save_size_profile?: boolean;
                      /** @enum {string} */
                      size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";
                      customer_instructions?: string;
                      chest_point?: string;
                      cup?: string;
                      /** Format: float */
                      arm_width?: number;
                      /** Format: float */
                      height?: number;
                      /** Format: float */
                      sleeves_length?: number;
                      /** Format: float */
                      neck?: number;
                      /** Format: float */
                      hips?: number;
                      mekhwar?: {
                        data?: {
                          id?: number;
                          attributes?: {
                            title?: string;
                            description?: string;
                            main_image?: {
                              data?: {
                                id?: number;
                                attributes?: {
                                  name?: string;
                                  alternativeText?: string;
                                  caption?: string;
                                  width?: number;
                                  height?: number;
                                  formats?: unknown;
                                  hash?: string;
                                  ext?: string;
                                  mime?: string;
                                  /** Format: float */
                                  size?: number;
                                  url?: string;
                                  previewUrl?: string;
                                  provider?: string;
                                  provider_metadata?: unknown;
                                  related?: {
                                    data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      }[];
                                  };
                                  folder?: {
                                    data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        pathId?: number;
                                        parent?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        children?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        files?: {
                                          data?: {
                                              id?: number;
                                              attributes?: {
                                                name?: string;
                                                alternativeText?: string;
                                                caption?: string;
                                                width?: number;
                                                height?: number;
                                                formats?: unknown;
                                                hash?: string;
                                                ext?: string;
                                                mime?: string;
                                                /** Format: float */
                                                size?: number;
                                                url?: string;
                                                previewUrl?: string;
                                                provider?: string;
                                                provider_metadata?: unknown;
                                                related?: {
                                                  data?: {
                                                      id?: number;
                                                      attributes?: Record<string, never>;
                                                    }[];
                                                };
                                                folder?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                folderPath?: string;
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                              };
                                            }[];
                                        };
                                        path?: string;
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    };
                                  };
                                  folderPath?: string;
                                  /** Format: date-time */
                                  createdAt?: string;
                                  /** Format: date-time */
                                  updatedAt?: string;
                                  createdBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  updatedBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                };
                              };
                            };
                            images?: {
                              data?: {
                                  id?: number;
                                  attributes?: {
                                    name?: string;
                                    alternativeText?: string;
                                    caption?: string;
                                    width?: number;
                                    height?: number;
                                    formats?: unknown;
                                    hash?: string;
                                    ext?: string;
                                    mime?: string;
                                    /** Format: float */
                                    size?: number;
                                    url?: string;
                                    previewUrl?: string;
                                    provider?: string;
                                    provider_metadata?: unknown;
                                    related?: {
                                      data?: {
                                          id?: number;
                                          attributes?: Record<string, never>;
                                        }[];
                                    };
                                    folder?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    folderPath?: string;
                                    /** Format: date-time */
                                    createdAt?: string;
                                    /** Format: date-time */
                                    updatedAt?: string;
                                    createdBy?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    updatedBy?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                  };
                                }[];
                            };
                            category?: {
                              data?: {
                                id?: number;
                                attributes?: {
                                  Name?: string;
                                  Image?: {
                                    data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        alternativeText?: string;
                                        caption?: string;
                                        width?: number;
                                        height?: number;
                                        formats?: unknown;
                                        hash?: string;
                                        ext?: string;
                                        mime?: string;
                                        /** Format: float */
                                        size?: number;
                                        url?: string;
                                        previewUrl?: string;
                                        provider?: string;
                                        provider_metadata?: unknown;
                                        related?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        folder?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        folderPath?: string;
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    };
                                  };
                                  mekhwars?: {
                                    data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      }[];
                                  };
                                  tailor?: {
                                    data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        location?: string;
                                        description?: string;
                                        image?: {
                                          data?: {
                                            id?: number;
                                            attributes?: {
                                              name?: string;
                                              alternativeText?: string;
                                              caption?: string;
                                              width?: number;
                                              height?: number;
                                              formats?: unknown;
                                              hash?: string;
                                              ext?: string;
                                              mime?: string;
                                              /** Format: float */
                                              size?: number;
                                              url?: string;
                                              previewUrl?: string;
                                              provider?: string;
                                              provider_metadata?: unknown;
                                              related?: {
                                                data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  }[];
                                              };
                                              folder?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                              folderPath?: string;
                                              /** Format: date-time */
                                              createdAt?: string;
                                              /** Format: date-time */
                                              updatedAt?: string;
                                              createdBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                              updatedBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                            };
                                          };
                                        };
                                        background?: {
                                          data?: {
                                            id?: number;
                                            attributes?: {
                                              name?: string;
                                              alternativeText?: string;
                                              caption?: string;
                                              width?: number;
                                              height?: number;
                                              formats?: unknown;
                                              hash?: string;
                                              ext?: string;
                                              mime?: string;
                                              /** Format: float */
                                              size?: number;
                                              url?: string;
                                              previewUrl?: string;
                                              provider?: string;
                                              provider_metadata?: unknown;
                                              related?: {
                                                data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  }[];
                                              };
                                              folder?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                              folderPath?: string;
                                              /** Format: date-time */
                                              createdAt?: string;
                                              /** Format: date-time */
                                              updatedAt?: string;
                                              createdBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                              updatedBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                            };
                                          };
                                        };
                                        /** Format: date */
                                        date_joined?: string;
                                        designs?: {
                                          data?: {
                                              id?: number;
                                              attributes?: {
                                                name?: string;
                                                tailor?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                image?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: {
                                                      name?: string;
                                                      alternativeText?: string;
                                                      caption?: string;
                                                      width?: number;
                                                      height?: number;
                                                      formats?: unknown;
                                                      hash?: string;
                                                      ext?: string;
                                                      mime?: string;
                                                      /** Format: float */
                                                      size?: number;
                                                      url?: string;
                                                      previewUrl?: string;
                                                      provider?: string;
                                                      provider_metadata?: unknown;
                                                      related?: {
                                                        data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          }[];
                                                      };
                                                      folder?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                      folderPath?: string;
                                                      /** Format: date-time */
                                                      createdAt?: string;
                                                      /** Format: date-time */
                                                      updatedAt?: string;
                                                      createdBy?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                      updatedBy?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                    };
                                                  };
                                                };
                                                /** Format: float */
                                                price?: number;
                                                /** Format: float */
                                                rating?: number;
                                                description?: string;
                                                sizes?: {
                                                    id?: number;
                                                    __component?: string;
                                                    name?: string;
                                                    shoulder?: number;
                                                    writst?: number;
                                                    top_width?: number;
                                                    bust?: number;
                                                    top_length?: number;
                                                    arm_length?: number;
                                                  }[];
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                /** Format: date-time */
                                                publishedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                              };
                                            }[];
                                        };
                                        experience?: string;
                                        style?: string;
                                        philosophy?: string;
                                        mekhwars?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        category?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        fabrics?: {
                                          data?: {
                                              id?: number;
                                              attributes?: {
                                                name?: string;
                                                /** Format: float */
                                                price?: number;
                                                description?: string;
                                                main_image?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: {
                                                      name?: string;
                                                      alternativeText?: string;
                                                      caption?: string;
                                                      width?: number;
                                                      height?: number;
                                                      formats?: unknown;
                                                      hash?: string;
                                                      ext?: string;
                                                      mime?: string;
                                                      /** Format: float */
                                                      size?: number;
                                                      url?: string;
                                                      previewUrl?: string;
                                                      provider?: string;
                                                      provider_metadata?: unknown;
                                                      related?: {
                                                        data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          }[];
                                                      };
                                                      folder?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                      folderPath?: string;
                                                      /** Format: date-time */
                                                      createdAt?: string;
                                                      /** Format: date-time */
                                                      updatedAt?: string;
                                                      createdBy?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                      updatedBy?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                    };
                                                  };
                                                };
                                                images?: {
                                                  data?: {
                                                      id?: number;
                                                      attributes?: {
                                                        name?: string;
                                                        alternativeText?: string;
                                                        caption?: string;
                                                        width?: number;
                                                        height?: number;
                                                        formats?: unknown;
                                                        hash?: string;
                                                        ext?: string;
                                                        mime?: string;
                                                        /** Format: float */
                                                        size?: number;
                                                        url?: string;
                                                        previewUrl?: string;
                                                        provider?: string;
                                                        provider_metadata?: unknown;
                                                        related?: {
                                                          data?: {
                                                              id?: number;
                                                              attributes?: Record<string, never>;
                                                            }[];
                                                        };
                                                        folder?: {
                                                          data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          };
                                                        };
                                                        folderPath?: string;
                                                        /** Format: date-time */
                                                        createdAt?: string;
                                                        /** Format: date-time */
                                                        updatedAt?: string;
                                                        createdBy?: {
                                                          data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          };
                                                        };
                                                        updatedBy?: {
                                                          data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          };
                                                        };
                                                      };
                                                    }[];
                                                };
                                                category?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: {
                                                      name?: string;
                                                      Thumbnail?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: {
                                                            name?: string;
                                                            alternativeText?: string;
                                                            caption?: string;
                                                            width?: number;
                                                            height?: number;
                                                            formats?: unknown;
                                                            hash?: string;
                                                            ext?: string;
                                                            mime?: string;
                                                            /** Format: float */
                                                            size?: number;
                                                            url?: string;
                                                            previewUrl?: string;
                                                            provider?: string;
                                                            provider_metadata?: unknown;
                                                            related?: {
                                                              data?: {
                                                                  id?: number;
                                                                  attributes?: Record<string, never>;
                                                                }[];
                                                            };
                                                            folder?: {
                                                              data?: {
                                                                id?: number;
                                                                attributes?: Record<string, never>;
                                                              };
                                                            };
                                                            folderPath?: string;
                                                            /** Format: date-time */
                                                            createdAt?: string;
                                                            /** Format: date-time */
                                                            updatedAt?: string;
                                                            createdBy?: {
                                                              data?: {
                                                                id?: number;
                                                                attributes?: Record<string, never>;
                                                              };
                                                            };
                                                            updatedBy?: {
                                                              data?: {
                                                                id?: number;
                                                                attributes?: Record<string, never>;
                                                              };
                                                            };
                                                          };
                                                        };
                                                      };
                                                      fabrics?: {
                                                        data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          }[];
                                                      };
                                                      /** Format: date-time */
                                                      createdAt?: string;
                                                      /** Format: date-time */
                                                      updatedAt?: string;
                                                      /** Format: date-time */
                                                      publishedAt?: string;
                                                      createdBy?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                      updatedBy?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                      localizations?: {
                                                        data?: unknown[];
                                                      };
                                                      locale?: string;
                                                    };
                                                  };
                                                };
                                                detail_list_item?: {
                                                    id?: number;
                                                    title?: string;
                                                  }[];
                                                fabric_pattern?: {
                                                    id?: number;
                                                    title?: string;
                                                    /** Format: float */
                                                    price?: number;
                                                    image?: {
                                                      data?: {
                                                        id?: number;
                                                        attributes?: {
                                                          name?: string;
                                                          alternativeText?: string;
                                                          caption?: string;
                                                          width?: number;
                                                          height?: number;
                                                          formats?: unknown;
                                                          hash?: string;
                                                          ext?: string;
                                                          mime?: string;
                                                          /** Format: float */
                                                          size?: number;
                                                          url?: string;
                                                          previewUrl?: string;
                                                          provider?: string;
                                                          provider_metadata?: unknown;
                                                          related?: {
                                                            data?: {
                                                                id?: number;
                                                                attributes?: Record<string, never>;
                                                              }[];
                                                          };
                                                          folder?: {
                                                            data?: {
                                                              id?: number;
                                                              attributes?: Record<string, never>;
                                                            };
                                                          };
                                                          folderPath?: string;
                                                          /** Format: date-time */
                                                          createdAt?: string;
                                                          /** Format: date-time */
                                                          updatedAt?: string;
                                                          createdBy?: {
                                                            data?: {
                                                              id?: number;
                                                              attributes?: Record<string, never>;
                                                            };
                                                          };
                                                          updatedBy?: {
                                                            data?: {
                                                              id?: number;
                                                              attributes?: Record<string, never>;
                                                            };
                                                          };
                                                        };
                                                      };
                                                    };
                                                  }[];
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                /** Format: date-time */
                                                publishedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                localizations?: {
                                                  data?: unknown[];
                                                };
                                                locale?: string;
                                              };
                                            }[];
                                        };
                                        /** Format: float */
                                        rating?: number;
                                        tags?: string;
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        /** Format: date-time */
                                        publishedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        localizations?: {
                                          data?: unknown[];
                                        };
                                        locale?: string;
                                      };
                                    };
                                  };
                                  /** Format: date-time */
                                  createdAt?: string;
                                  /** Format: date-time */
                                  updatedAt?: string;
                                  /** Format: date-time */
                                  publishedAt?: string;
                                  createdBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  updatedBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  localizations?: {
                                    data?: unknown[];
                                  };
                                  locale?: string;
                                };
                              };
                            };
                            /** Format: float */
                            price?: number;
                            tailor?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            detail_list_item?: {
                                id?: number;
                                __component?: string;
                                title?: string;
                              }[];
                            /** Format: float */
                            rating?: number;
                            favourite_products?: {
                              data?: {
                                  id?: number;
                                  attributes?: {
                                    mekhwar?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    user?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    /** Format: date-time */
                                    createdAt?: string;
                                    /** Format: date-time */
                                    updatedAt?: string;
                                    /** Format: date-time */
                                    publishedAt?: string;
                                    createdBy?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    updatedBy?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                  };
                                }[];
                            };
                            slug?: string;
                            customizable?: boolean;
                            fabrics?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            /** Format: date-time */
                            publishedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            localizations?: {
                              data?: unknown[];
                            };
                            locale?: string;
                          };
                        };
                      };
                    })[];
                  /** @enum {string} */
                  status?: "PENDING" | "PLACED" | "ON THE WAY" | "DELIVERED" | "CANCELLED" | "REFUNDED";
                  cancel_reason?: string;
                  /** Format: date */
                  cancel_date?: string;
                  /** @enum {string} */
                  size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  /** Format: date-time */
                  publishedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              };
            };
            addresses?: {
              data?: ({
                  id?: number;
                  attributes?: {
                    name?: string;
                    country?: string;
                    city?: string;
                    street?: string;
                    building?: string;
                    address?: string;
                    flat?: string;
                    mobile?: string;
                    user?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    /** @enum {string} */
                    type?: "home" | "office" | "gym" | "work";
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    /** Format: date-time */
                    publishedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                  };
                })[];
            };
            orders?: {
              data?: ({
                  id?: number;
                  attributes?: {
                    ref?: string;
                    customer_address?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    users_permissions_user?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    paid?: boolean;
                    /** Format: float */
                    tax?: number;
                    /** Format: float */
                    discount?: number;
                    /** Format: float */
                    total?: number;
                    /** Format: float */
                    delivery_charge?: number;
                    custom?: {
                        id?: number;
                        quantity?: number;
                        /** Format: float */
                        bust?: number;
                        /** Format: float */
                        wrist?: number;
                        /** Format: float */
                        shoulder?: number;
                        cup?: string;
                        /** Format: float */
                        chest_point?: number;
                        /** Format: float */
                        neck?: number;
                        /** Format: float */
                        hips?: number;
                        /** Format: float */
                        height?: number;
                        /** Format: float */
                        arm_width?: number;
                        /** Format: float */
                        sleeves_length?: number;
                        wrist_style?: string;
                        neck_style?: string;
                        customer_instructions?: string;
                        color?: string;
                        mekhwar?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                      }[];
                    delivery_note?: string;
                    /** @enum {string} */
                    status?: "PLACED" | "SEWING" | "ON THE WAY" | "DELIVERED" | "CANCELLED";
                    /** @enum {string} */
                    size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                  };
                })[];
            };
            custom_design_orders?: {
              data?: ({
                  id?: number;
                  attributes?: {
                    design?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                    color?: string;
                    fabric?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    tailor?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    /** Format: float */
                    price?: number;
                    /** Format: float */
                    tax?: number;
                    /** Format: float */
                    delivery_charge?: number;
                    /** Format: float */
                    tailor_fee?: number;
                    /** @enum {string} */
                    status?: "PENDING" | "APPROVED" | "PROCESSING" | "REJECTED" | "CANCELLED" | "ON THE WAY" | "DELIVERED";
                    style?: unknown;
                    size_profile?: {
                      id?: number;
                      /** Format: float */
                      shoulder?: number;
                      /** Format: float */
                      bust?: number;
                      /** Format: float */
                      arm_length?: number;
                      /** Format: float */
                      wrist?: number;
                      /** Format: float */
                      top_length?: number;
                      /** Format: float */
                      top_width?: number;
                      cup?: string;
                      /** Format: float */
                      chest_point?: number;
                      /** Format: float */
                      neck?: number;
                      /** Format: float */
                      hips?: number;
                      /** Format: float */
                      height?: number;
                      /** Format: float */
                      sleeves_length?: number;
                      wrist_style?: string;
                      neck_style?: string;
                      /** Format: float */
                      arm_width?: number;
                    };
                    /** @enum {string} */
                    size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL" | "CUSTOM";
                    user?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    address?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    customer_instructions?: string;
                    design2?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                    design3?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                    design4?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    /** Format: date-time */
                    publishedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                  };
                })[];
            };
            favourite_products?: {
              data?: {
                  id?: number;
                  attributes?: Record<string, never>;
                }[];
            };
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      /** @enum {string} */
      type?: "home" | "office" | "gym" | "work";
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
    };
    CustomerAddressResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["CustomerAddress"];
    };
    CustomerAddressResponse: {
      data?: components["schemas"]["CustomerAddressResponseDataObject"];
      meta?: Record<string, never>;
    };
    DesignRequest: {
      data: {
        name: string;
        /** @example string or id */
        tailor?: number | string;
        /** @example string or id */
        image: number | string;
        /** Format: float */
        price: number;
        /** Format: float */
        rating?: number;
        description?: string;
        sizes?: components["schemas"]["GeneralSizeComponent"][];
      };
    };
    DesignListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["Design"];
    };
    DesignListResponse: {
      data?: components["schemas"]["DesignListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    Design: {
      name: string;
      tailor?: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            location?: string;
            description?: string;
            image?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  alternativeText?: string;
                  caption?: string;
                  width?: number;
                  height?: number;
                  formats?: unknown;
                  hash?: string;
                  ext?: string;
                  mime?: string;
                  /** Format: float */
                  size?: number;
                  url?: string;
                  previewUrl?: string;
                  provider?: string;
                  provider_metadata?: unknown;
                  related?: {
                    data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      }[];
                  };
                  folder?: {
                    data?: {
                      id?: number;
                      attributes?: {
                        name?: string;
                        pathId?: number;
                        parent?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        children?: {
                          data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            }[];
                        };
                        files?: {
                          data?: {
                              id?: number;
                              attributes?: {
                                name?: string;
                                alternativeText?: string;
                                caption?: string;
                                width?: number;
                                height?: number;
                                formats?: unknown;
                                hash?: string;
                                ext?: string;
                                mime?: string;
                                /** Format: float */
                                size?: number;
                                url?: string;
                                previewUrl?: string;
                                provider?: string;
                                provider_metadata?: unknown;
                                related?: {
                                  data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    }[];
                                };
                                folder?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                folderPath?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                createdBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: {
                                      firstname?: string;
                                      lastname?: string;
                                      username?: string;
                                      /** Format: email */
                                      email?: string;
                                      resetPasswordToken?: string;
                                      registrationToken?: string;
                                      isActive?: boolean;
                                      roles?: {
                                        data?: {
                                            id?: number;
                                            attributes?: {
                                              name?: string;
                                              code?: string;
                                              description?: string;
                                              users?: {
                                                data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  }[];
                                              };
                                              permissions?: {
                                                data?: {
                                                    id?: number;
                                                    attributes?: {
                                                      action?: string;
                                                      actionParameters?: unknown;
                                                      subject?: string;
                                                      properties?: unknown;
                                                      conditions?: unknown;
                                                      role?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                      /** Format: date-time */
                                                      createdAt?: string;
                                                      /** Format: date-time */
                                                      updatedAt?: string;
                                                      createdBy?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                      updatedBy?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                    };
                                                  }[];
                                              };
                                              /** Format: date-time */
                                              createdAt?: string;
                                              /** Format: date-time */
                                              updatedAt?: string;
                                              createdBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                              updatedBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                            };
                                          }[];
                                      };
                                      blocked?: boolean;
                                      preferedLanguage?: string;
                                      /** Format: date-time */
                                      createdAt?: string;
                                      /** Format: date-time */
                                      updatedAt?: string;
                                      createdBy?: {
                                        data?: {
                                          id?: number;
                                          attributes?: Record<string, never>;
                                        };
                                      };
                                      updatedBy?: {
                                        data?: {
                                          id?: number;
                                          attributes?: Record<string, never>;
                                        };
                                      };
                                    };
                                  };
                                };
                                updatedBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                              };
                            }[];
                        };
                        path?: string;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        createdBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        updatedBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                      };
                    };
                  };
                  folderPath?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              };
            };
            background?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  alternativeText?: string;
                  caption?: string;
                  width?: number;
                  height?: number;
                  formats?: unknown;
                  hash?: string;
                  ext?: string;
                  mime?: string;
                  /** Format: float */
                  size?: number;
                  url?: string;
                  previewUrl?: string;
                  provider?: string;
                  provider_metadata?: unknown;
                  related?: {
                    data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      }[];
                  };
                  folder?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  folderPath?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              };
            };
            /** Format: date */
            date_joined?: string;
            designs?: {
              data?: {
                  id?: number;
                  attributes?: {
                    name?: string;
                    tailor?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    image?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                    /** Format: float */
                    price?: number;
                    /** Format: float */
                    rating?: number;
                    description?: string;
                    sizes?: {
                        id?: number;
                        __component?: string;
                        name?: string;
                        shoulder?: number;
                        writst?: number;
                        top_width?: number;
                        bust?: number;
                        top_length?: number;
                        arm_length?: number;
                      }[];
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    /** Format: date-time */
                    publishedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                  };
                }[];
            };
            experience?: string;
            style?: string;
            philosophy?: string;
            mekhwars?: {
              data?: ({
                  id?: number;
                  attributes?: {
                    title?: string;
                    description?: string;
                    main_image?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                    images?: {
                      data?: {
                          id?: number;
                          attributes?: {
                            name?: string;
                            alternativeText?: string;
                            caption?: string;
                            width?: number;
                            height?: number;
                            formats?: unknown;
                            hash?: string;
                            ext?: string;
                            mime?: string;
                            /** Format: float */
                            size?: number;
                            url?: string;
                            previewUrl?: string;
                            provider?: string;
                            provider_metadata?: unknown;
                            related?: {
                              data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                }[];
                            };
                            folder?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            folderPath?: string;
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                          };
                        }[];
                    };
                    category?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          Name?: string;
                          Image?: {
                            data?: {
                              id?: number;
                              attributes?: {
                                name?: string;
                                alternativeText?: string;
                                caption?: string;
                                width?: number;
                                height?: number;
                                formats?: unknown;
                                hash?: string;
                                ext?: string;
                                mime?: string;
                                /** Format: float */
                                size?: number;
                                url?: string;
                                previewUrl?: string;
                                provider?: string;
                                provider_metadata?: unknown;
                                related?: {
                                  data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    }[];
                                };
                                folder?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                folderPath?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                createdBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                updatedBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                              };
                            };
                          };
                          mekhwars?: {
                            data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                          };
                          tailor?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          /** Format: date-time */
                          publishedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          localizations?: {
                            data?: unknown[];
                          };
                          locale?: string;
                        };
                      };
                    };
                    /** Format: float */
                    price?: number;
                    tailor?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    detail_list_item?: {
                        id?: number;
                        __component?: string;
                        title?: string;
                      }[];
                    /** Format: float */
                    rating?: number;
                    favourite_products?: {
                      data?: ({
                          id?: number;
                          attributes?: {
                            mekhwar?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            user?: {
                              data?: {
                                id?: number;
                                attributes?: {
                                  username?: string;
                                  /** Format: email */
                                  email?: string;
                                  provider?: string;
                                  resetPasswordToken?: string;
                                  confirmationToken?: string;
                                  confirmed?: boolean;
                                  blocked?: boolean;
                                  role?: {
                                    data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        description?: string;
                                        type?: string;
                                        permissions?: {
                                          data?: {
                                              id?: number;
                                              attributes?: {
                                                action?: string;
                                                role?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                              };
                                            }[];
                                        };
                                        users?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    };
                                  };
                                  phone?: string;
                                  name?: string;
                                  size_profiles?: {
                                    data?: {
                                        id?: number;
                                        attributes?: {
                                          title?: string;
                                          /** Format: float */
                                          shoulder?: number;
                                          /** Format: float */
                                          bust?: number;
                                          /** Format: float */
                                          arm_length?: number;
                                          /** Format: float */
                                          wrist?: number;
                                          /** Format: float */
                                          top_length?: number;
                                          /** Format: float */
                                          top_width?: number;
                                          users_permissions_user?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          cup?: string;
                                          /** Format: float */
                                          chest_point?: number;
                                          /** Format: float */
                                          neck?: number;
                                          /** Format: float */
                                          hips?: number;
                                          /** Format: float */
                                          height?: number;
                                          /** Format: float */
                                          arm_width?: number;
                                          /** Format: float */
                                          sleeves_length?: number;
                                          wrist_style?: string;
                                          neck_style?: string;
                                          /** Format: date-time */
                                          createdAt?: string;
                                          /** Format: date-time */
                                          updatedAt?: string;
                                          /** Format: date-time */
                                          publishedAt?: string;
                                          createdBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          updatedBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                        };
                                      }[];
                                  };
                                  cart?: {
                                    data?: {
                                      id?: number;
                                      attributes?: {
                                        user?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        custom?: ({
                                            id?: number;
                                            size_profile?: {
                                              data?: {
                                                id?: number;
                                                attributes?: Record<string, never>;
                                              };
                                            };
                                            quantity?: number;
                                            /** Format: float */
                                            shoulder?: number;
                                            /** Format: float */
                                            bust?: number;
                                            /** Format: float */
                                            wrist?: number;
                                            save_size_profile?: boolean;
                                            /** @enum {string} */
                                            size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";
                                            customer_instructions?: string;
                                            chest_point?: string;
                                            cup?: string;
                                            /** Format: float */
                                            arm_width?: number;
                                            /** Format: float */
                                            height?: number;
                                            /** Format: float */
                                            sleeves_length?: number;
                                            /** Format: float */
                                            neck?: number;
                                            /** Format: float */
                                            hips?: number;
                                            mekhwar?: {
                                              data?: {
                                                id?: number;
                                                attributes?: Record<string, never>;
                                              };
                                            };
                                          })[];
                                        /** @enum {string} */
                                        status?: "PENDING" | "PLACED" | "ON THE WAY" | "DELIVERED" | "CANCELLED" | "REFUNDED";
                                        cancel_reason?: string;
                                        /** Format: date */
                                        cancel_date?: string;
                                        /** @enum {string} */
                                        size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        /** Format: date-time */
                                        publishedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    };
                                  };
                                  addresses?: {
                                    data?: ({
                                        id?: number;
                                        attributes?: {
                                          name?: string;
                                          country?: string;
                                          city?: string;
                                          street?: string;
                                          building?: string;
                                          address?: string;
                                          flat?: string;
                                          mobile?: string;
                                          user?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          /** @enum {string} */
                                          type?: "home" | "office" | "gym" | "work";
                                          /** Format: date-time */
                                          createdAt?: string;
                                          /** Format: date-time */
                                          updatedAt?: string;
                                          /** Format: date-time */
                                          publishedAt?: string;
                                          createdBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          updatedBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                        };
                                      })[];
                                  };
                                  orders?: {
                                    data?: ({
                                        id?: number;
                                        attributes?: {
                                          ref?: string;
                                          customer_address?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          users_permissions_user?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          paid?: boolean;
                                          /** Format: float */
                                          tax?: number;
                                          /** Format: float */
                                          discount?: number;
                                          /** Format: float */
                                          total?: number;
                                          /** Format: float */
                                          delivery_charge?: number;
                                          custom?: {
                                              id?: number;
                                              quantity?: number;
                                              /** Format: float */
                                              bust?: number;
                                              /** Format: float */
                                              wrist?: number;
                                              /** Format: float */
                                              shoulder?: number;
                                              cup?: string;
                                              /** Format: float */
                                              chest_point?: number;
                                              /** Format: float */
                                              neck?: number;
                                              /** Format: float */
                                              hips?: number;
                                              /** Format: float */
                                              height?: number;
                                              /** Format: float */
                                              arm_width?: number;
                                              /** Format: float */
                                              sleeves_length?: number;
                                              wrist_style?: string;
                                              neck_style?: string;
                                              customer_instructions?: string;
                                              color?: string;
                                              mekhwar?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                            }[];
                                          delivery_note?: string;
                                          /** @enum {string} */
                                          status?: "PLACED" | "SEWING" | "ON THE WAY" | "DELIVERED" | "CANCELLED";
                                          /** @enum {string} */
                                          size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";
                                          /** Format: date-time */
                                          createdAt?: string;
                                          /** Format: date-time */
                                          updatedAt?: string;
                                          createdBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          updatedBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                        };
                                      })[];
                                  };
                                  custom_design_orders?: {
                                    data?: ({
                                        id?: number;
                                        attributes?: {
                                          design?: {
                                            data?: {
                                              id?: number;
                                              attributes?: {
                                                name?: string;
                                                alternativeText?: string;
                                                caption?: string;
                                                width?: number;
                                                height?: number;
                                                formats?: unknown;
                                                hash?: string;
                                                ext?: string;
                                                mime?: string;
                                                /** Format: float */
                                                size?: number;
                                                url?: string;
                                                previewUrl?: string;
                                                provider?: string;
                                                provider_metadata?: unknown;
                                                related?: {
                                                  data?: {
                                                      id?: number;
                                                      attributes?: Record<string, never>;
                                                    }[];
                                                };
                                                folder?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                folderPath?: string;
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                              };
                                            };
                                          };
                                          color?: string;
                                          fabric?: {
                                            data?: {
                                              id?: number;
                                              attributes?: {
                                                name?: string;
                                                /** Format: float */
                                                price?: number;
                                                description?: string;
                                                main_image?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: {
                                                      name?: string;
                                                      alternativeText?: string;
                                                      caption?: string;
                                                      width?: number;
                                                      height?: number;
                                                      formats?: unknown;
                                                      hash?: string;
                                                      ext?: string;
                                                      mime?: string;
                                                      /** Format: float */
                                                      size?: number;
                                                      url?: string;
                                                      previewUrl?: string;
                                                      provider?: string;
                                                      provider_metadata?: unknown;
                                                      related?: {
                                                        data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          }[];
                                                      };
                                                      folder?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                      folderPath?: string;
                                                      /** Format: date-time */
                                                      createdAt?: string;
                                                      /** Format: date-time */
                                                      updatedAt?: string;
                                                      createdBy?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                      updatedBy?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                    };
                                                  };
                                                };
                                                images?: {
                                                  data?: {
                                                      id?: number;
                                                      attributes?: {
                                                        name?: string;
                                                        alternativeText?: string;
                                                        caption?: string;
                                                        width?: number;
                                                        height?: number;
                                                        formats?: unknown;
                                                        hash?: string;
                                                        ext?: string;
                                                        mime?: string;
                                                        /** Format: float */
                                                        size?: number;
                                                        url?: string;
                                                        previewUrl?: string;
                                                        provider?: string;
                                                        provider_metadata?: unknown;
                                                        related?: {
                                                          data?: {
                                                              id?: number;
                                                              attributes?: Record<string, never>;
                                                            }[];
                                                        };
                                                        folder?: {
                                                          data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          };
                                                        };
                                                        folderPath?: string;
                                                        /** Format: date-time */
                                                        createdAt?: string;
                                                        /** Format: date-time */
                                                        updatedAt?: string;
                                                        createdBy?: {
                                                          data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          };
                                                        };
                                                        updatedBy?: {
                                                          data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          };
                                                        };
                                                      };
                                                    }[];
                                                };
                                                category?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: {
                                                      name?: string;
                                                      Thumbnail?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: {
                                                            name?: string;
                                                            alternativeText?: string;
                                                            caption?: string;
                                                            width?: number;
                                                            height?: number;
                                                            formats?: unknown;
                                                            hash?: string;
                                                            ext?: string;
                                                            mime?: string;
                                                            /** Format: float */
                                                            size?: number;
                                                            url?: string;
                                                            previewUrl?: string;
                                                            provider?: string;
                                                            provider_metadata?: unknown;
                                                            related?: {
                                                              data?: {
                                                                  id?: number;
                                                                  attributes?: Record<string, never>;
                                                                }[];
                                                            };
                                                            folder?: {
                                                              data?: {
                                                                id?: number;
                                                                attributes?: Record<string, never>;
                                                              };
                                                            };
                                                            folderPath?: string;
                                                            /** Format: date-time */
                                                            createdAt?: string;
                                                            /** Format: date-time */
                                                            updatedAt?: string;
                                                            createdBy?: {
                                                              data?: {
                                                                id?: number;
                                                                attributes?: Record<string, never>;
                                                              };
                                                            };
                                                            updatedBy?: {
                                                              data?: {
                                                                id?: number;
                                                                attributes?: Record<string, never>;
                                                              };
                                                            };
                                                          };
                                                        };
                                                      };
                                                      fabrics?: {
                                                        data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          }[];
                                                      };
                                                      /** Format: date-time */
                                                      createdAt?: string;
                                                      /** Format: date-time */
                                                      updatedAt?: string;
                                                      /** Format: date-time */
                                                      publishedAt?: string;
                                                      createdBy?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                      updatedBy?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                      localizations?: {
                                                        data?: unknown[];
                                                      };
                                                      locale?: string;
                                                    };
                                                  };
                                                };
                                                detail_list_item?: {
                                                    id?: number;
                                                    title?: string;
                                                  }[];
                                                fabric_pattern?: {
                                                    id?: number;
                                                    title?: string;
                                                    /** Format: float */
                                                    price?: number;
                                                    image?: {
                                                      data?: {
                                                        id?: number;
                                                        attributes?: {
                                                          name?: string;
                                                          alternativeText?: string;
                                                          caption?: string;
                                                          width?: number;
                                                          height?: number;
                                                          formats?: unknown;
                                                          hash?: string;
                                                          ext?: string;
                                                          mime?: string;
                                                          /** Format: float */
                                                          size?: number;
                                                          url?: string;
                                                          previewUrl?: string;
                                                          provider?: string;
                                                          provider_metadata?: unknown;
                                                          related?: {
                                                            data?: {
                                                                id?: number;
                                                                attributes?: Record<string, never>;
                                                              }[];
                                                          };
                                                          folder?: {
                                                            data?: {
                                                              id?: number;
                                                              attributes?: Record<string, never>;
                                                            };
                                                          };
                                                          folderPath?: string;
                                                          /** Format: date-time */
                                                          createdAt?: string;
                                                          /** Format: date-time */
                                                          updatedAt?: string;
                                                          createdBy?: {
                                                            data?: {
                                                              id?: number;
                                                              attributes?: Record<string, never>;
                                                            };
                                                          };
                                                          updatedBy?: {
                                                            data?: {
                                                              id?: number;
                                                              attributes?: Record<string, never>;
                                                            };
                                                          };
                                                        };
                                                      };
                                                    };
                                                  }[];
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                /** Format: date-time */
                                                publishedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                localizations?: {
                                                  data?: unknown[];
                                                };
                                                locale?: string;
                                              };
                                            };
                                          };
                                          tailor?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          /** Format: float */
                                          price?: number;
                                          /** Format: float */
                                          tax?: number;
                                          /** Format: float */
                                          delivery_charge?: number;
                                          /** Format: float */
                                          tailor_fee?: number;
                                          /** @enum {string} */
                                          status?: "PENDING" | "APPROVED" | "PROCESSING" | "REJECTED" | "CANCELLED" | "ON THE WAY" | "DELIVERED";
                                          style?: unknown;
                                          size_profile?: {
                                            id?: number;
                                            /** Format: float */
                                            shoulder?: number;
                                            /** Format: float */
                                            bust?: number;
                                            /** Format: float */
                                            arm_length?: number;
                                            /** Format: float */
                                            wrist?: number;
                                            /** Format: float */
                                            top_length?: number;
                                            /** Format: float */
                                            top_width?: number;
                                            cup?: string;
                                            /** Format: float */
                                            chest_point?: number;
                                            /** Format: float */
                                            neck?: number;
                                            /** Format: float */
                                            hips?: number;
                                            /** Format: float */
                                            height?: number;
                                            /** Format: float */
                                            sleeves_length?: number;
                                            wrist_style?: string;
                                            neck_style?: string;
                                            /** Format: float */
                                            arm_width?: number;
                                          };
                                          /** @enum {string} */
                                          size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL" | "CUSTOM";
                                          user?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          address?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          customer_instructions?: string;
                                          design2?: {
                                            data?: {
                                              id?: number;
                                              attributes?: {
                                                name?: string;
                                                alternativeText?: string;
                                                caption?: string;
                                                width?: number;
                                                height?: number;
                                                formats?: unknown;
                                                hash?: string;
                                                ext?: string;
                                                mime?: string;
                                                /** Format: float */
                                                size?: number;
                                                url?: string;
                                                previewUrl?: string;
                                                provider?: string;
                                                provider_metadata?: unknown;
                                                related?: {
                                                  data?: {
                                                      id?: number;
                                                      attributes?: Record<string, never>;
                                                    }[];
                                                };
                                                folder?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                folderPath?: string;
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                              };
                                            };
                                          };
                                          design3?: {
                                            data?: {
                                              id?: number;
                                              attributes?: {
                                                name?: string;
                                                alternativeText?: string;
                                                caption?: string;
                                                width?: number;
                                                height?: number;
                                                formats?: unknown;
                                                hash?: string;
                                                ext?: string;
                                                mime?: string;
                                                /** Format: float */
                                                size?: number;
                                                url?: string;
                                                previewUrl?: string;
                                                provider?: string;
                                                provider_metadata?: unknown;
                                                related?: {
                                                  data?: {
                                                      id?: number;
                                                      attributes?: Record<string, never>;
                                                    }[];
                                                };
                                                folder?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                folderPath?: string;
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                              };
                                            };
                                          };
                                          design4?: {
                                            data?: {
                                              id?: number;
                                              attributes?: {
                                                name?: string;
                                                alternativeText?: string;
                                                caption?: string;
                                                width?: number;
                                                height?: number;
                                                formats?: unknown;
                                                hash?: string;
                                                ext?: string;
                                                mime?: string;
                                                /** Format: float */
                                                size?: number;
                                                url?: string;
                                                previewUrl?: string;
                                                provider?: string;
                                                provider_metadata?: unknown;
                                                related?: {
                                                  data?: {
                                                      id?: number;
                                                      attributes?: Record<string, never>;
                                                    }[];
                                                };
                                                folder?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                folderPath?: string;
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                              };
                                            };
                                          };
                                          /** Format: date-time */
                                          createdAt?: string;
                                          /** Format: date-time */
                                          updatedAt?: string;
                                          /** Format: date-time */
                                          publishedAt?: string;
                                          createdBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          updatedBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                        };
                                      })[];
                                  };
                                  favourite_products?: {
                                    data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      }[];
                                  };
                                  /** Format: date-time */
                                  createdAt?: string;
                                  /** Format: date-time */
                                  updatedAt?: string;
                                  createdBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  updatedBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                };
                              };
                            };
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            /** Format: date-time */
                            publishedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                          };
                        })[];
                    };
                    slug?: string;
                    customizable?: boolean;
                    fabrics?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    /** Format: date-time */
                    publishedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    localizations?: {
                      data?: unknown[];
                    };
                    locale?: string;
                  };
                })[];
            };
            category?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            fabrics?: {
              data?: {
                  id?: number;
                  attributes?: Record<string, never>;
                }[];
            };
            /** Format: float */
            rating?: number;
            tags?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            localizations?: {
              data?: unknown[];
            };
            locale?: string;
          };
        };
      };
      image: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            alternativeText?: string;
            caption?: string;
            width?: number;
            height?: number;
            formats?: unknown;
            hash?: string;
            ext?: string;
            mime?: string;
            /** Format: float */
            size?: number;
            url?: string;
            previewUrl?: string;
            provider?: string;
            provider_metadata?: unknown;
            related?: {
              data?: {
                  id?: number;
                  attributes?: Record<string, never>;
                }[];
            };
            folder?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            folderPath?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      /** Format: float */
      price: number;
      /** Format: float */
      rating?: number;
      description?: string;
      sizes?: components["schemas"]["GeneralSizeComponent"][];
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
    };
    DesignResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["Design"];
    };
    DesignResponse: {
      data?: components["schemas"]["DesignResponseDataObject"];
      meta?: Record<string, never>;
    };
    GeneralSizeComponent: {
      id?: number;
      __component?: string;
      name?: string;
      shoulder?: number;
      writst?: number;
      top_width?: number;
      bust?: number;
      top_length?: number;
      arm_length?: number;
    };
    EmailTemplateRequest: {
      data: {
        title?: string;
        template?: string;
        /** @enum {string} */
        action: "ORDER_PLACED" | "ORDER_SEWING" | "ORDER_ON_THE_WAY" | "ORDER_DELIVERED" | "ORDER_CANCELLED" | "CUSTOM_ORDER_PENDING" | "CUSTOM_ORDER_APPROVED" | "CUSTOM_ORDER_PROCESSING" | "CUSTOM_ORDER_REJECTED" | "CUSTOM_ORDER_CANCELLED" | "CUSTOM_ORDER_ON_THE_WAY" | "CUSTOM_ORDER_DELIVERED" | "MANAGEMENT_ORDER_PLACED" | "MANAGEMENT_ORDER_SEWING" | "MANAGEMENT_ORDER_CANCELLED" | "MANAGEMENT_ORDER_ON_THE_WAY" | "MANAGEMENT_ORDER_DELIVERED" | "MANAGEMENT_CUSTOM_ORDER_PENDING" | "MANAGEMENT_CUSTOM_ORDER_APPROVED" | "MANAGEMENT_CUSTOM_ORDER_PROCESSING" | "MANAGEMENT_CUSTOM_ORDER_REJECTED" | "MANAGEMENT_CUSTOM_ORDER_CANCELLED" | "MANAGEMENT_CUSTOM_ORDER_ON_THE_WAY" | "MANAGEMENT_CUSTOM_ORDER_DELIVERED" | "CONTACT_US" | "MANAGEMENT_CONTACT_US";
        subject?: string;
      };
    };
    EmailTemplateListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["EmailTemplate"];
    };
    EmailTemplateListResponse: {
      data?: components["schemas"]["EmailTemplateListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    EmailTemplate: {
      title?: string;
      template?: string;
      /** @enum {string} */
      action: "ORDER_PLACED" | "ORDER_SEWING" | "ORDER_ON_THE_WAY" | "ORDER_DELIVERED" | "ORDER_CANCELLED" | "CUSTOM_ORDER_PENDING" | "CUSTOM_ORDER_APPROVED" | "CUSTOM_ORDER_PROCESSING" | "CUSTOM_ORDER_REJECTED" | "CUSTOM_ORDER_CANCELLED" | "CUSTOM_ORDER_ON_THE_WAY" | "CUSTOM_ORDER_DELIVERED" | "MANAGEMENT_ORDER_PLACED" | "MANAGEMENT_ORDER_SEWING" | "MANAGEMENT_ORDER_CANCELLED" | "MANAGEMENT_ORDER_ON_THE_WAY" | "MANAGEMENT_ORDER_DELIVERED" | "MANAGEMENT_CUSTOM_ORDER_PENDING" | "MANAGEMENT_CUSTOM_ORDER_APPROVED" | "MANAGEMENT_CUSTOM_ORDER_PROCESSING" | "MANAGEMENT_CUSTOM_ORDER_REJECTED" | "MANAGEMENT_CUSTOM_ORDER_CANCELLED" | "MANAGEMENT_CUSTOM_ORDER_ON_THE_WAY" | "MANAGEMENT_CUSTOM_ORDER_DELIVERED" | "CONTACT_US" | "MANAGEMENT_CONTACT_US";
      subject?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: {
            firstname?: string;
            lastname?: string;
            username?: string;
            /** Format: email */
            email?: string;
            resetPasswordToken?: string;
            registrationToken?: string;
            isActive?: boolean;
            roles?: {
              data?: {
                  id?: number;
                  attributes?: {
                    name?: string;
                    code?: string;
                    description?: string;
                    users?: {
                      data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        }[];
                    };
                    permissions?: {
                      data?: {
                          id?: number;
                          attributes?: {
                            action?: string;
                            actionParameters?: unknown;
                            subject?: string;
                            properties?: unknown;
                            conditions?: unknown;
                            role?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                          };
                        }[];
                    };
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                  };
                }[];
            };
            blocked?: boolean;
            preferedLanguage?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
    };
    EmailTemplateResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["EmailTemplate"];
    };
    EmailTemplateResponse: {
      data?: components["schemas"]["EmailTemplateResponseDataObject"];
      meta?: Record<string, never>;
    };
    FabricLocalizationRequest: {
      name: string;
      /** Format: float */
      price: number;
      description?: string;
      /** @example string or id */
      main_image: number | string;
      images?: (number | string)[];
      /** @example string or id */
      category?: number | string;
      detail_list_item?: components["schemas"]["FabricDetailListItemComponent"][];
      fabric_pattern?: components["schemas"]["FabricFabricPatternsComponent"][];
      locale: string;
    };
    FabricRequest: {
      data: {
        name: string;
        /** Format: float */
        price: number;
        description?: string;
        /** @example string or id */
        main_image: number | string;
        images?: (number | string)[];
        /** @example string or id */
        category?: number | string;
        detail_list_item?: components["schemas"]["FabricDetailListItemComponent"][];
        fabric_pattern?: components["schemas"]["FabricFabricPatternsComponent"][];
        locale?: string;
      };
    };
    FabricResponseDataObjectLocalized: {
      id?: number;
      attributes?: components["schemas"]["Fabric"];
    };
    FabricLocalizationResponse: {
      data?: components["schemas"]["FabricResponseDataObjectLocalized"];
      meta?: Record<string, never>;
    };
    FabricListResponseDataItemLocalized: {
      id?: number;
      attributes?: components["schemas"]["Fabric"];
    };
    FabricLocalizationListResponse: {
      data?: components["schemas"]["FabricListResponseDataItemLocalized"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    FabricListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["Fabric"];
    };
    FabricListResponse: {
      data?: components["schemas"]["FabricListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    Fabric: {
      name: string;
      /** Format: float */
      price: number;
      description?: string;
      main_image: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            alternativeText?: string;
            caption?: string;
            width?: number;
            height?: number;
            formats?: unknown;
            hash?: string;
            ext?: string;
            mime?: string;
            /** Format: float */
            size?: number;
            url?: string;
            previewUrl?: string;
            provider?: string;
            provider_metadata?: unknown;
            related?: {
              data?: {
                  id?: number;
                  attributes?: Record<string, never>;
                }[];
            };
            folder?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  pathId?: number;
                  parent?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  children?: {
                    data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      }[];
                  };
                  files?: {
                    data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: {
                                firstname?: string;
                                lastname?: string;
                                username?: string;
                                /** Format: email */
                                email?: string;
                                resetPasswordToken?: string;
                                registrationToken?: string;
                                isActive?: boolean;
                                roles?: {
                                  data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        code?: string;
                                        description?: string;
                                        users?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        permissions?: {
                                          data?: {
                                              id?: number;
                                              attributes?: {
                                                action?: string;
                                                actionParameters?: unknown;
                                                subject?: string;
                                                properties?: unknown;
                                                conditions?: unknown;
                                                role?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                              };
                                            }[];
                                        };
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    }[];
                                };
                                blocked?: boolean;
                                preferedLanguage?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                createdBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                updatedBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                              };
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      }[];
                  };
                  path?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              };
            };
            folderPath?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      images?: {
        data?: {
            id?: number;
            attributes?: {
              name?: string;
              alternativeText?: string;
              caption?: string;
              width?: number;
              height?: number;
              formats?: unknown;
              hash?: string;
              ext?: string;
              mime?: string;
              /** Format: float */
              size?: number;
              url?: string;
              previewUrl?: string;
              provider?: string;
              provider_metadata?: unknown;
              related?: {
                data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  }[];
              };
              folder?: {
                data?: {
                  id?: number;
                  attributes?: Record<string, never>;
                };
              };
              folderPath?: string;
              /** Format: date-time */
              createdAt?: string;
              /** Format: date-time */
              updatedAt?: string;
              createdBy?: {
                data?: {
                  id?: number;
                  attributes?: Record<string, never>;
                };
              };
              updatedBy?: {
                data?: {
                  id?: number;
                  attributes?: Record<string, never>;
                };
              };
            };
          }[];
      };
      category?: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            Thumbnail?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  alternativeText?: string;
                  caption?: string;
                  width?: number;
                  height?: number;
                  formats?: unknown;
                  hash?: string;
                  ext?: string;
                  mime?: string;
                  /** Format: float */
                  size?: number;
                  url?: string;
                  previewUrl?: string;
                  provider?: string;
                  provider_metadata?: unknown;
                  related?: {
                    data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      }[];
                  };
                  folder?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  folderPath?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              };
            };
            fabrics?: {
              data?: {
                  id?: number;
                  attributes?: {
                    name?: string;
                    /** Format: float */
                    price?: number;
                    description?: string;
                    main_image?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                    images?: {
                      data?: {
                          id?: number;
                          attributes?: {
                            name?: string;
                            alternativeText?: string;
                            caption?: string;
                            width?: number;
                            height?: number;
                            formats?: unknown;
                            hash?: string;
                            ext?: string;
                            mime?: string;
                            /** Format: float */
                            size?: number;
                            url?: string;
                            previewUrl?: string;
                            provider?: string;
                            provider_metadata?: unknown;
                            related?: {
                              data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                }[];
                            };
                            folder?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            folderPath?: string;
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                          };
                        }[];
                    };
                    category?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    detail_list_item?: {
                        id?: number;
                        title?: string;
                      }[];
                    fabric_pattern?: {
                        id?: number;
                        title?: string;
                        /** Format: float */
                        price?: number;
                        image?: {
                          data?: {
                            id?: number;
                            attributes?: {
                              name?: string;
                              alternativeText?: string;
                              caption?: string;
                              width?: number;
                              height?: number;
                              formats?: unknown;
                              hash?: string;
                              ext?: string;
                              mime?: string;
                              /** Format: float */
                              size?: number;
                              url?: string;
                              previewUrl?: string;
                              provider?: string;
                              provider_metadata?: unknown;
                              related?: {
                                data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  }[];
                              };
                              folder?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                              folderPath?: string;
                              /** Format: date-time */
                              createdAt?: string;
                              /** Format: date-time */
                              updatedAt?: string;
                              createdBy?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                              updatedBy?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                            };
                          };
                        };
                      }[];
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    /** Format: date-time */
                    publishedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    localizations?: {
                      data?: unknown[];
                    };
                    locale?: string;
                  };
                }[];
            };
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            localizations?: {
              data?: unknown[];
            };
            locale?: string;
          };
        };
      };
      detail_list_item?: components["schemas"]["FabricDetailListItemComponent"][];
      fabric_pattern?: components["schemas"]["FabricFabricPatternsComponent"][];
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      localizations?: {
        data?: components["schemas"]["Fabric"][];
      };
      locale?: string;
    };
    FabricResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["Fabric"];
    };
    FabricResponse: {
      data?: components["schemas"]["FabricResponseDataObject"];
      meta?: Record<string, never>;
    };
    FabricDetailListItemComponent: {
      id?: number;
      title?: string;
    };
    FabricFabricPatternsComponent: {
      id?: number;
      title?: string;
      /** Format: float */
      price?: number;
      image?: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            alternativeText?: string;
            caption?: string;
            width?: number;
            height?: number;
            formats?: unknown;
            hash?: string;
            ext?: string;
            mime?: string;
            /** Format: float */
            size?: number;
            url?: string;
            previewUrl?: string;
            provider?: string;
            provider_metadata?: unknown;
            related?: {
              data?: {
                  id?: number;
                  attributes?: Record<string, never>;
                }[];
            };
            folder?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            folderPath?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
    };
    FabricCategoryLocalizationRequest: {
      name: string;
      /** @example string or id */
      Thumbnail: number | string;
      fabrics?: (number | string)[];
      locale: string;
    };
    FabricCategoryRequest: {
      data: {
        name: string;
        /** @example string or id */
        Thumbnail: number | string;
        fabrics?: (number | string)[];
        locale?: string;
      };
    };
    FabricCategoryResponseDataObjectLocalized: {
      id?: number;
      attributes?: components["schemas"]["FabricCategory"];
    };
    FabricCategoryLocalizationResponse: {
      data?: components["schemas"]["FabricCategoryResponseDataObjectLocalized"];
      meta?: Record<string, never>;
    };
    FabricCategoryListResponseDataItemLocalized: {
      id?: number;
      attributes?: components["schemas"]["FabricCategory"];
    };
    FabricCategoryLocalizationListResponse: {
      data?: components["schemas"]["FabricCategoryListResponseDataItemLocalized"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    FabricCategoryListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["FabricCategory"];
    };
    FabricCategoryListResponse: {
      data?: components["schemas"]["FabricCategoryListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    FabricCategory: {
      name: string;
      Thumbnail: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            alternativeText?: string;
            caption?: string;
            width?: number;
            height?: number;
            formats?: unknown;
            hash?: string;
            ext?: string;
            mime?: string;
            /** Format: float */
            size?: number;
            url?: string;
            previewUrl?: string;
            provider?: string;
            provider_metadata?: unknown;
            related?: {
              data?: {
                  id?: number;
                  attributes?: Record<string, never>;
                }[];
            };
            folder?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  pathId?: number;
                  parent?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  children?: {
                    data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      }[];
                  };
                  files?: {
                    data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: {
                                firstname?: string;
                                lastname?: string;
                                username?: string;
                                /** Format: email */
                                email?: string;
                                resetPasswordToken?: string;
                                registrationToken?: string;
                                isActive?: boolean;
                                roles?: {
                                  data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        code?: string;
                                        description?: string;
                                        users?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        permissions?: {
                                          data?: {
                                              id?: number;
                                              attributes?: {
                                                action?: string;
                                                actionParameters?: unknown;
                                                subject?: string;
                                                properties?: unknown;
                                                conditions?: unknown;
                                                role?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                              };
                                            }[];
                                        };
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    }[];
                                };
                                blocked?: boolean;
                                preferedLanguage?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                createdBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                updatedBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                              };
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      }[];
                  };
                  path?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              };
            };
            folderPath?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      fabrics?: {
        data?: {
            id?: number;
            attributes?: {
              name?: string;
              /** Format: float */
              price?: number;
              description?: string;
              main_image?: {
                data?: {
                  id?: number;
                  attributes?: {
                    name?: string;
                    alternativeText?: string;
                    caption?: string;
                    width?: number;
                    height?: number;
                    formats?: unknown;
                    hash?: string;
                    ext?: string;
                    mime?: string;
                    /** Format: float */
                    size?: number;
                    url?: string;
                    previewUrl?: string;
                    provider?: string;
                    provider_metadata?: unknown;
                    related?: {
                      data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        }[];
                    };
                    folder?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    folderPath?: string;
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                  };
                };
              };
              images?: {
                data?: {
                    id?: number;
                    attributes?: {
                      name?: string;
                      alternativeText?: string;
                      caption?: string;
                      width?: number;
                      height?: number;
                      formats?: unknown;
                      hash?: string;
                      ext?: string;
                      mime?: string;
                      /** Format: float */
                      size?: number;
                      url?: string;
                      previewUrl?: string;
                      provider?: string;
                      provider_metadata?: unknown;
                      related?: {
                        data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          }[];
                      };
                      folder?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      folderPath?: string;
                      /** Format: date-time */
                      createdAt?: string;
                      /** Format: date-time */
                      updatedAt?: string;
                      createdBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      updatedBy?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                    };
                  }[];
              };
              category?: {
                data?: {
                  id?: number;
                  attributes?: {
                    name?: string;
                    Thumbnail?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                    fabrics?: {
                      data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        }[];
                    };
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    /** Format: date-time */
                    publishedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    localizations?: {
                      data?: unknown[];
                    };
                    locale?: string;
                  };
                };
              };
              detail_list_item?: {
                  id?: number;
                  title?: string;
                }[];
              fabric_pattern?: {
                  id?: number;
                  title?: string;
                  /** Format: float */
                  price?: number;
                  image?: {
                    data?: {
                      id?: number;
                      attributes?: {
                        name?: string;
                        alternativeText?: string;
                        caption?: string;
                        width?: number;
                        height?: number;
                        formats?: unknown;
                        hash?: string;
                        ext?: string;
                        mime?: string;
                        /** Format: float */
                        size?: number;
                        url?: string;
                        previewUrl?: string;
                        provider?: string;
                        provider_metadata?: unknown;
                        related?: {
                          data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            }[];
                        };
                        folder?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        folderPath?: string;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        createdBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        updatedBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                      };
                    };
                  };
                }[];
              /** Format: date-time */
              createdAt?: string;
              /** Format: date-time */
              updatedAt?: string;
              /** Format: date-time */
              publishedAt?: string;
              createdBy?: {
                data?: {
                  id?: number;
                  attributes?: Record<string, never>;
                };
              };
              updatedBy?: {
                data?: {
                  id?: number;
                  attributes?: Record<string, never>;
                };
              };
              localizations?: {
                data?: unknown[];
              };
              locale?: string;
            };
          }[];
      };
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      localizations?: {
        data?: components["schemas"]["FabricCategory"][];
      };
      locale?: string;
    };
    FabricCategoryResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["FabricCategory"];
    };
    FabricCategoryResponse: {
      data?: components["schemas"]["FabricCategoryResponseDataObject"];
      meta?: Record<string, never>;
    };
    FavouriteProductRequest: {
      data: {
        /** @example string or id */
        mekhwar?: number | string;
        /** @example string or id */
        user?: number | string;
      };
    };
    FavouriteProductListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["FavouriteProduct"];
    };
    FavouriteProductListResponse: {
      data?: components["schemas"]["FavouriteProductListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    FavouriteProduct: {
      mekhwar?: {
        data?: {
          id?: number;
          attributes?: {
            title?: string;
            description?: string;
            main_image?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  alternativeText?: string;
                  caption?: string;
                  width?: number;
                  height?: number;
                  formats?: unknown;
                  hash?: string;
                  ext?: string;
                  mime?: string;
                  /** Format: float */
                  size?: number;
                  url?: string;
                  previewUrl?: string;
                  provider?: string;
                  provider_metadata?: unknown;
                  related?: {
                    data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      }[];
                  };
                  folder?: {
                    data?: {
                      id?: number;
                      attributes?: {
                        name?: string;
                        pathId?: number;
                        parent?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        children?: {
                          data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            }[];
                        };
                        files?: {
                          data?: {
                              id?: number;
                              attributes?: {
                                name?: string;
                                alternativeText?: string;
                                caption?: string;
                                width?: number;
                                height?: number;
                                formats?: unknown;
                                hash?: string;
                                ext?: string;
                                mime?: string;
                                /** Format: float */
                                size?: number;
                                url?: string;
                                previewUrl?: string;
                                provider?: string;
                                provider_metadata?: unknown;
                                related?: {
                                  data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    }[];
                                };
                                folder?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                folderPath?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                createdBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: {
                                      firstname?: string;
                                      lastname?: string;
                                      username?: string;
                                      /** Format: email */
                                      email?: string;
                                      resetPasswordToken?: string;
                                      registrationToken?: string;
                                      isActive?: boolean;
                                      roles?: {
                                        data?: {
                                            id?: number;
                                            attributes?: {
                                              name?: string;
                                              code?: string;
                                              description?: string;
                                              users?: {
                                                data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  }[];
                                              };
                                              permissions?: {
                                                data?: {
                                                    id?: number;
                                                    attributes?: {
                                                      action?: string;
                                                      actionParameters?: unknown;
                                                      subject?: string;
                                                      properties?: unknown;
                                                      conditions?: unknown;
                                                      role?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                      /** Format: date-time */
                                                      createdAt?: string;
                                                      /** Format: date-time */
                                                      updatedAt?: string;
                                                      createdBy?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                      updatedBy?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                    };
                                                  }[];
                                              };
                                              /** Format: date-time */
                                              createdAt?: string;
                                              /** Format: date-time */
                                              updatedAt?: string;
                                              createdBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                              updatedBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                            };
                                          }[];
                                      };
                                      blocked?: boolean;
                                      preferedLanguage?: string;
                                      /** Format: date-time */
                                      createdAt?: string;
                                      /** Format: date-time */
                                      updatedAt?: string;
                                      createdBy?: {
                                        data?: {
                                          id?: number;
                                          attributes?: Record<string, never>;
                                        };
                                      };
                                      updatedBy?: {
                                        data?: {
                                          id?: number;
                                          attributes?: Record<string, never>;
                                        };
                                      };
                                    };
                                  };
                                };
                                updatedBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                              };
                            }[];
                        };
                        path?: string;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        createdBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        updatedBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                      };
                    };
                  };
                  folderPath?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              };
            };
            images?: {
              data?: {
                  id?: number;
                  attributes?: {
                    name?: string;
                    alternativeText?: string;
                    caption?: string;
                    width?: number;
                    height?: number;
                    formats?: unknown;
                    hash?: string;
                    ext?: string;
                    mime?: string;
                    /** Format: float */
                    size?: number;
                    url?: string;
                    previewUrl?: string;
                    provider?: string;
                    provider_metadata?: unknown;
                    related?: {
                      data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        }[];
                    };
                    folder?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    folderPath?: string;
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                  };
                }[];
            };
            category?: {
              data?: {
                id?: number;
                attributes?: {
                  Name?: string;
                  Image?: {
                    data?: {
                      id?: number;
                      attributes?: {
                        name?: string;
                        alternativeText?: string;
                        caption?: string;
                        width?: number;
                        height?: number;
                        formats?: unknown;
                        hash?: string;
                        ext?: string;
                        mime?: string;
                        /** Format: float */
                        size?: number;
                        url?: string;
                        previewUrl?: string;
                        provider?: string;
                        provider_metadata?: unknown;
                        related?: {
                          data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            }[];
                        };
                        folder?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        folderPath?: string;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        createdBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        updatedBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                      };
                    };
                  };
                  mekhwars?: {
                    data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      }[];
                  };
                  tailor?: {
                    data?: {
                      id?: number;
                      attributes?: {
                        name?: string;
                        location?: string;
                        description?: string;
                        image?: {
                          data?: {
                            id?: number;
                            attributes?: {
                              name?: string;
                              alternativeText?: string;
                              caption?: string;
                              width?: number;
                              height?: number;
                              formats?: unknown;
                              hash?: string;
                              ext?: string;
                              mime?: string;
                              /** Format: float */
                              size?: number;
                              url?: string;
                              previewUrl?: string;
                              provider?: string;
                              provider_metadata?: unknown;
                              related?: {
                                data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  }[];
                              };
                              folder?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                              folderPath?: string;
                              /** Format: date-time */
                              createdAt?: string;
                              /** Format: date-time */
                              updatedAt?: string;
                              createdBy?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                              updatedBy?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                            };
                          };
                        };
                        background?: {
                          data?: {
                            id?: number;
                            attributes?: {
                              name?: string;
                              alternativeText?: string;
                              caption?: string;
                              width?: number;
                              height?: number;
                              formats?: unknown;
                              hash?: string;
                              ext?: string;
                              mime?: string;
                              /** Format: float */
                              size?: number;
                              url?: string;
                              previewUrl?: string;
                              provider?: string;
                              provider_metadata?: unknown;
                              related?: {
                                data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  }[];
                              };
                              folder?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                              folderPath?: string;
                              /** Format: date-time */
                              createdAt?: string;
                              /** Format: date-time */
                              updatedAt?: string;
                              createdBy?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                              updatedBy?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                            };
                          };
                        };
                        /** Format: date */
                        date_joined?: string;
                        designs?: {
                          data?: {
                              id?: number;
                              attributes?: {
                                name?: string;
                                tailor?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                image?: {
                                  data?: {
                                    id?: number;
                                    attributes?: {
                                      name?: string;
                                      alternativeText?: string;
                                      caption?: string;
                                      width?: number;
                                      height?: number;
                                      formats?: unknown;
                                      hash?: string;
                                      ext?: string;
                                      mime?: string;
                                      /** Format: float */
                                      size?: number;
                                      url?: string;
                                      previewUrl?: string;
                                      provider?: string;
                                      provider_metadata?: unknown;
                                      related?: {
                                        data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          }[];
                                      };
                                      folder?: {
                                        data?: {
                                          id?: number;
                                          attributes?: Record<string, never>;
                                        };
                                      };
                                      folderPath?: string;
                                      /** Format: date-time */
                                      createdAt?: string;
                                      /** Format: date-time */
                                      updatedAt?: string;
                                      createdBy?: {
                                        data?: {
                                          id?: number;
                                          attributes?: Record<string, never>;
                                        };
                                      };
                                      updatedBy?: {
                                        data?: {
                                          id?: number;
                                          attributes?: Record<string, never>;
                                        };
                                      };
                                    };
                                  };
                                };
                                /** Format: float */
                                price?: number;
                                /** Format: float */
                                rating?: number;
                                description?: string;
                                sizes?: {
                                    id?: number;
                                    __component?: string;
                                    name?: string;
                                    shoulder?: number;
                                    writst?: number;
                                    top_width?: number;
                                    bust?: number;
                                    top_length?: number;
                                    arm_length?: number;
                                  }[];
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                /** Format: date-time */
                                publishedAt?: string;
                                createdBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                updatedBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                              };
                            }[];
                        };
                        experience?: string;
                        style?: string;
                        philosophy?: string;
                        mekhwars?: {
                          data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            }[];
                        };
                        category?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        fabrics?: {
                          data?: {
                              id?: number;
                              attributes?: {
                                name?: string;
                                /** Format: float */
                                price?: number;
                                description?: string;
                                main_image?: {
                                  data?: {
                                    id?: number;
                                    attributes?: {
                                      name?: string;
                                      alternativeText?: string;
                                      caption?: string;
                                      width?: number;
                                      height?: number;
                                      formats?: unknown;
                                      hash?: string;
                                      ext?: string;
                                      mime?: string;
                                      /** Format: float */
                                      size?: number;
                                      url?: string;
                                      previewUrl?: string;
                                      provider?: string;
                                      provider_metadata?: unknown;
                                      related?: {
                                        data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          }[];
                                      };
                                      folder?: {
                                        data?: {
                                          id?: number;
                                          attributes?: Record<string, never>;
                                        };
                                      };
                                      folderPath?: string;
                                      /** Format: date-time */
                                      createdAt?: string;
                                      /** Format: date-time */
                                      updatedAt?: string;
                                      createdBy?: {
                                        data?: {
                                          id?: number;
                                          attributes?: Record<string, never>;
                                        };
                                      };
                                      updatedBy?: {
                                        data?: {
                                          id?: number;
                                          attributes?: Record<string, never>;
                                        };
                                      };
                                    };
                                  };
                                };
                                images?: {
                                  data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        alternativeText?: string;
                                        caption?: string;
                                        width?: number;
                                        height?: number;
                                        formats?: unknown;
                                        hash?: string;
                                        ext?: string;
                                        mime?: string;
                                        /** Format: float */
                                        size?: number;
                                        url?: string;
                                        previewUrl?: string;
                                        provider?: string;
                                        provider_metadata?: unknown;
                                        related?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        folder?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        folderPath?: string;
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    }[];
                                };
                                category?: {
                                  data?: {
                                    id?: number;
                                    attributes?: {
                                      name?: string;
                                      Thumbnail?: {
                                        data?: {
                                          id?: number;
                                          attributes?: {
                                            name?: string;
                                            alternativeText?: string;
                                            caption?: string;
                                            width?: number;
                                            height?: number;
                                            formats?: unknown;
                                            hash?: string;
                                            ext?: string;
                                            mime?: string;
                                            /** Format: float */
                                            size?: number;
                                            url?: string;
                                            previewUrl?: string;
                                            provider?: string;
                                            provider_metadata?: unknown;
                                            related?: {
                                              data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                }[];
                                            };
                                            folder?: {
                                              data?: {
                                                id?: number;
                                                attributes?: Record<string, never>;
                                              };
                                            };
                                            folderPath?: string;
                                            /** Format: date-time */
                                            createdAt?: string;
                                            /** Format: date-time */
                                            updatedAt?: string;
                                            createdBy?: {
                                              data?: {
                                                id?: number;
                                                attributes?: Record<string, never>;
                                              };
                                            };
                                            updatedBy?: {
                                              data?: {
                                                id?: number;
                                                attributes?: Record<string, never>;
                                              };
                                            };
                                          };
                                        };
                                      };
                                      fabrics?: {
                                        data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          }[];
                                      };
                                      /** Format: date-time */
                                      createdAt?: string;
                                      /** Format: date-time */
                                      updatedAt?: string;
                                      /** Format: date-time */
                                      publishedAt?: string;
                                      createdBy?: {
                                        data?: {
                                          id?: number;
                                          attributes?: Record<string, never>;
                                        };
                                      };
                                      updatedBy?: {
                                        data?: {
                                          id?: number;
                                          attributes?: Record<string, never>;
                                        };
                                      };
                                      localizations?: {
                                        data?: unknown[];
                                      };
                                      locale?: string;
                                    };
                                  };
                                };
                                detail_list_item?: {
                                    id?: number;
                                    title?: string;
                                  }[];
                                fabric_pattern?: {
                                    id?: number;
                                    title?: string;
                                    /** Format: float */
                                    price?: number;
                                    image?: {
                                      data?: {
                                        id?: number;
                                        attributes?: {
                                          name?: string;
                                          alternativeText?: string;
                                          caption?: string;
                                          width?: number;
                                          height?: number;
                                          formats?: unknown;
                                          hash?: string;
                                          ext?: string;
                                          mime?: string;
                                          /** Format: float */
                                          size?: number;
                                          url?: string;
                                          previewUrl?: string;
                                          provider?: string;
                                          provider_metadata?: unknown;
                                          related?: {
                                            data?: {
                                                id?: number;
                                                attributes?: Record<string, never>;
                                              }[];
                                          };
                                          folder?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          folderPath?: string;
                                          /** Format: date-time */
                                          createdAt?: string;
                                          /** Format: date-time */
                                          updatedAt?: string;
                                          createdBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          updatedBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                        };
                                      };
                                    };
                                  }[];
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                /** Format: date-time */
                                publishedAt?: string;
                                createdBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                updatedBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                localizations?: {
                                  data?: unknown[];
                                };
                                locale?: string;
                              };
                            }[];
                        };
                        /** Format: float */
                        rating?: number;
                        tags?: string;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        /** Format: date-time */
                        publishedAt?: string;
                        createdBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        updatedBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        localizations?: {
                          data?: unknown[];
                        };
                        locale?: string;
                      };
                    };
                  };
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  /** Format: date-time */
                  publishedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  localizations?: {
                    data?: unknown[];
                  };
                  locale?: string;
                };
              };
            };
            /** Format: float */
            price?: number;
            tailor?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            detail_list_item?: {
                id?: number;
                __component?: string;
                title?: string;
              }[];
            /** Format: float */
            rating?: number;
            favourite_products?: {
              data?: ({
                  id?: number;
                  attributes?: {
                    mekhwar?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    user?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          username?: string;
                          /** Format: email */
                          email?: string;
                          provider?: string;
                          resetPasswordToken?: string;
                          confirmationToken?: string;
                          confirmed?: boolean;
                          blocked?: boolean;
                          role?: {
                            data?: {
                              id?: number;
                              attributes?: {
                                name?: string;
                                description?: string;
                                type?: string;
                                permissions?: {
                                  data?: {
                                      id?: number;
                                      attributes?: {
                                        action?: string;
                                        role?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    }[];
                                };
                                users?: {
                                  data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    }[];
                                };
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                createdBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                updatedBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                              };
                            };
                          };
                          phone?: string;
                          name?: string;
                          size_profiles?: {
                            data?: {
                                id?: number;
                                attributes?: {
                                  title?: string;
                                  /** Format: float */
                                  shoulder?: number;
                                  /** Format: float */
                                  bust?: number;
                                  /** Format: float */
                                  arm_length?: number;
                                  /** Format: float */
                                  wrist?: number;
                                  /** Format: float */
                                  top_length?: number;
                                  /** Format: float */
                                  top_width?: number;
                                  users_permissions_user?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  cup?: string;
                                  /** Format: float */
                                  chest_point?: number;
                                  /** Format: float */
                                  neck?: number;
                                  /** Format: float */
                                  hips?: number;
                                  /** Format: float */
                                  height?: number;
                                  /** Format: float */
                                  arm_width?: number;
                                  /** Format: float */
                                  sleeves_length?: number;
                                  wrist_style?: string;
                                  neck_style?: string;
                                  /** Format: date-time */
                                  createdAt?: string;
                                  /** Format: date-time */
                                  updatedAt?: string;
                                  /** Format: date-time */
                                  publishedAt?: string;
                                  createdBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  updatedBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                };
                              }[];
                          };
                          cart?: {
                            data?: {
                              id?: number;
                              attributes?: {
                                user?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                custom?: ({
                                    id?: number;
                                    size_profile?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    quantity?: number;
                                    /** Format: float */
                                    shoulder?: number;
                                    /** Format: float */
                                    bust?: number;
                                    /** Format: float */
                                    wrist?: number;
                                    save_size_profile?: boolean;
                                    /** @enum {string} */
                                    size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";
                                    customer_instructions?: string;
                                    chest_point?: string;
                                    cup?: string;
                                    /** Format: float */
                                    arm_width?: number;
                                    /** Format: float */
                                    height?: number;
                                    /** Format: float */
                                    sleeves_length?: number;
                                    /** Format: float */
                                    neck?: number;
                                    /** Format: float */
                                    hips?: number;
                                    mekhwar?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                  })[];
                                /** @enum {string} */
                                status?: "PENDING" | "PLACED" | "ON THE WAY" | "DELIVERED" | "CANCELLED" | "REFUNDED";
                                cancel_reason?: string;
                                /** Format: date */
                                cancel_date?: string;
                                /** @enum {string} */
                                size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                /** Format: date-time */
                                publishedAt?: string;
                                createdBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                updatedBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                              };
                            };
                          };
                          addresses?: {
                            data?: ({
                                id?: number;
                                attributes?: {
                                  name?: string;
                                  country?: string;
                                  city?: string;
                                  street?: string;
                                  building?: string;
                                  address?: string;
                                  flat?: string;
                                  mobile?: string;
                                  user?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  /** @enum {string} */
                                  type?: "home" | "office" | "gym" | "work";
                                  /** Format: date-time */
                                  createdAt?: string;
                                  /** Format: date-time */
                                  updatedAt?: string;
                                  /** Format: date-time */
                                  publishedAt?: string;
                                  createdBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  updatedBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                };
                              })[];
                          };
                          orders?: {
                            data?: ({
                                id?: number;
                                attributes?: {
                                  ref?: string;
                                  customer_address?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  users_permissions_user?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  paid?: boolean;
                                  /** Format: float */
                                  tax?: number;
                                  /** Format: float */
                                  discount?: number;
                                  /** Format: float */
                                  total?: number;
                                  /** Format: float */
                                  delivery_charge?: number;
                                  custom?: {
                                      id?: number;
                                      quantity?: number;
                                      /** Format: float */
                                      bust?: number;
                                      /** Format: float */
                                      wrist?: number;
                                      /** Format: float */
                                      shoulder?: number;
                                      cup?: string;
                                      /** Format: float */
                                      chest_point?: number;
                                      /** Format: float */
                                      neck?: number;
                                      /** Format: float */
                                      hips?: number;
                                      /** Format: float */
                                      height?: number;
                                      /** Format: float */
                                      arm_width?: number;
                                      /** Format: float */
                                      sleeves_length?: number;
                                      wrist_style?: string;
                                      neck_style?: string;
                                      customer_instructions?: string;
                                      color?: string;
                                      mekhwar?: {
                                        data?: {
                                          id?: number;
                                          attributes?: Record<string, never>;
                                        };
                                      };
                                    }[];
                                  delivery_note?: string;
                                  /** @enum {string} */
                                  status?: "PLACED" | "SEWING" | "ON THE WAY" | "DELIVERED" | "CANCELLED";
                                  /** @enum {string} */
                                  size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";
                                  /** Format: date-time */
                                  createdAt?: string;
                                  /** Format: date-time */
                                  updatedAt?: string;
                                  createdBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  updatedBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                };
                              })[];
                          };
                          custom_design_orders?: {
                            data?: ({
                                id?: number;
                                attributes?: {
                                  design?: {
                                    data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        alternativeText?: string;
                                        caption?: string;
                                        width?: number;
                                        height?: number;
                                        formats?: unknown;
                                        hash?: string;
                                        ext?: string;
                                        mime?: string;
                                        /** Format: float */
                                        size?: number;
                                        url?: string;
                                        previewUrl?: string;
                                        provider?: string;
                                        provider_metadata?: unknown;
                                        related?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        folder?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        folderPath?: string;
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    };
                                  };
                                  color?: string;
                                  fabric?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  tailor?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  /** Format: float */
                                  price?: number;
                                  /** Format: float */
                                  tax?: number;
                                  /** Format: float */
                                  delivery_charge?: number;
                                  /** Format: float */
                                  tailor_fee?: number;
                                  /** @enum {string} */
                                  status?: "PENDING" | "APPROVED" | "PROCESSING" | "REJECTED" | "CANCELLED" | "ON THE WAY" | "DELIVERED";
                                  style?: unknown;
                                  size_profile?: {
                                    id?: number;
                                    /** Format: float */
                                    shoulder?: number;
                                    /** Format: float */
                                    bust?: number;
                                    /** Format: float */
                                    arm_length?: number;
                                    /** Format: float */
                                    wrist?: number;
                                    /** Format: float */
                                    top_length?: number;
                                    /** Format: float */
                                    top_width?: number;
                                    cup?: string;
                                    /** Format: float */
                                    chest_point?: number;
                                    /** Format: float */
                                    neck?: number;
                                    /** Format: float */
                                    hips?: number;
                                    /** Format: float */
                                    height?: number;
                                    /** Format: float */
                                    sleeves_length?: number;
                                    wrist_style?: string;
                                    neck_style?: string;
                                    /** Format: float */
                                    arm_width?: number;
                                  };
                                  /** @enum {string} */
                                  size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL" | "CUSTOM";
                                  user?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  address?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  customer_instructions?: string;
                                  design2?: {
                                    data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        alternativeText?: string;
                                        caption?: string;
                                        width?: number;
                                        height?: number;
                                        formats?: unknown;
                                        hash?: string;
                                        ext?: string;
                                        mime?: string;
                                        /** Format: float */
                                        size?: number;
                                        url?: string;
                                        previewUrl?: string;
                                        provider?: string;
                                        provider_metadata?: unknown;
                                        related?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        folder?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        folderPath?: string;
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    };
                                  };
                                  design3?: {
                                    data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        alternativeText?: string;
                                        caption?: string;
                                        width?: number;
                                        height?: number;
                                        formats?: unknown;
                                        hash?: string;
                                        ext?: string;
                                        mime?: string;
                                        /** Format: float */
                                        size?: number;
                                        url?: string;
                                        previewUrl?: string;
                                        provider?: string;
                                        provider_metadata?: unknown;
                                        related?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        folder?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        folderPath?: string;
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    };
                                  };
                                  design4?: {
                                    data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        alternativeText?: string;
                                        caption?: string;
                                        width?: number;
                                        height?: number;
                                        formats?: unknown;
                                        hash?: string;
                                        ext?: string;
                                        mime?: string;
                                        /** Format: float */
                                        size?: number;
                                        url?: string;
                                        previewUrl?: string;
                                        provider?: string;
                                        provider_metadata?: unknown;
                                        related?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        folder?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        folderPath?: string;
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    };
                                  };
                                  /** Format: date-time */
                                  createdAt?: string;
                                  /** Format: date-time */
                                  updatedAt?: string;
                                  /** Format: date-time */
                                  publishedAt?: string;
                                  createdBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  updatedBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                };
                              })[];
                          };
                          favourite_products?: {
                            data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                          };
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    /** Format: date-time */
                    publishedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                  };
                })[];
            };
            slug?: string;
            customizable?: boolean;
            fabrics?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            localizations?: {
              data?: unknown[];
            };
            locale?: string;
          };
        };
      };
      user?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
    };
    FavouriteProductResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["FavouriteProduct"];
    };
    FavouriteProductResponse: {
      data?: components["schemas"]["FavouriteProductResponseDataObject"];
      meta?: Record<string, never>;
    };
    FooterLocalizationRequest: {
      link_section?: components["schemas"]["GeneralFooterComponent"][];
      /** @example string or id */
      logo?: number | string;
      tag_line?: string;
      twitter?: string;
      facebook?: string;
      instagram?: string;
      tiktok?: string;
      locale: string;
    };
    FooterRequest: {
      data: {
        link_section?: components["schemas"]["GeneralFooterComponent"][];
        /** @example string or id */
        logo?: number | string;
        tag_line?: string;
        twitter?: string;
        facebook?: string;
        instagram?: string;
        tiktok?: string;
        locale?: string;
      };
    };
    FooterResponseDataObjectLocalized: {
      id?: number;
      attributes?: components["schemas"]["Footer"];
    };
    FooterLocalizationResponse: {
      data?: components["schemas"]["FooterResponseDataObjectLocalized"];
      meta?: Record<string, never>;
    };
    FooterListResponseDataItemLocalized: {
      id?: number;
      attributes?: components["schemas"]["Footer"];
    };
    FooterLocalizationListResponse: {
      data?: components["schemas"]["FooterListResponseDataItemLocalized"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    FooterListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["Footer"];
    };
    FooterListResponse: {
      data?: components["schemas"]["FooterListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    Footer: {
      link_section?: components["schemas"]["GeneralFooterComponent"][];
      logo?: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            alternativeText?: string;
            caption?: string;
            width?: number;
            height?: number;
            formats?: unknown;
            hash?: string;
            ext?: string;
            mime?: string;
            /** Format: float */
            size?: number;
            url?: string;
            previewUrl?: string;
            provider?: string;
            provider_metadata?: unknown;
            related?: {
              data?: {
                  id?: number;
                  attributes?: Record<string, never>;
                }[];
            };
            folder?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  pathId?: number;
                  parent?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  children?: {
                    data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      }[];
                  };
                  files?: {
                    data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: {
                                firstname?: string;
                                lastname?: string;
                                username?: string;
                                /** Format: email */
                                email?: string;
                                resetPasswordToken?: string;
                                registrationToken?: string;
                                isActive?: boolean;
                                roles?: {
                                  data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        code?: string;
                                        description?: string;
                                        users?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        permissions?: {
                                          data?: {
                                              id?: number;
                                              attributes?: {
                                                action?: string;
                                                actionParameters?: unknown;
                                                subject?: string;
                                                properties?: unknown;
                                                conditions?: unknown;
                                                role?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                              };
                                            }[];
                                        };
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    }[];
                                };
                                blocked?: boolean;
                                preferedLanguage?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                createdBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                updatedBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                              };
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      }[];
                  };
                  path?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              };
            };
            folderPath?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      tag_line?: string;
      twitter?: string;
      facebook?: string;
      instagram?: string;
      tiktok?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      localizations?: {
        data?: components["schemas"]["Footer"][];
      };
      locale?: string;
    };
    FooterResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["Footer"];
    };
    FooterResponse: {
      data?: components["schemas"]["FooterResponseDataObject"];
      meta?: Record<string, never>;
    };
    GeneralFooterComponent: {
      id?: number;
      title?: string;
      Links?: {
          id?: number;
          URL?: string;
          display_name?: string;
        }[];
    };
    HomePageLocalizationRequest: {
      home_banner?: components["schemas"]["HomeHomeBannerComponent"][];
      /** @example string or id */
      show_case_mekhwar?: number | string;
      show_case_fabrics?: (number | string)[];
      discount?: components["schemas"]["HomeDiscountComponent"];
      textbox?: components["schemas"]["HomeTextBoxComponent"];
      card_products?: components["schemas"]["HomeProductCardComponent"][];
      locale: string;
    };
    HomePageRequest: {
      data: {
        home_banner?: components["schemas"]["HomeHomeBannerComponent"][];
        /** @example string or id */
        show_case_mekhwar?: number | string;
        show_case_fabrics?: (number | string)[];
        discount?: components["schemas"]["HomeDiscountComponent"];
        textbox?: components["schemas"]["HomeTextBoxComponent"];
        card_products?: components["schemas"]["HomeProductCardComponent"][];
        locale?: string;
      };
    };
    HomePageResponseDataObjectLocalized: {
      id?: number;
      attributes?: components["schemas"]["HomePage"];
    };
    HomePageLocalizationResponse: {
      data?: components["schemas"]["HomePageResponseDataObjectLocalized"];
      meta?: Record<string, never>;
    };
    HomePageListResponseDataItemLocalized: {
      id?: number;
      attributes?: components["schemas"]["HomePage"];
    };
    HomePageLocalizationListResponse: {
      data?: components["schemas"]["HomePageListResponseDataItemLocalized"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    HomePageListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["HomePage"];
    };
    HomePageListResponse: {
      data?: components["schemas"]["HomePageListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    HomePage: {
      home_banner?: components["schemas"]["HomeHomeBannerComponent"][];
      show_case_mekhwar?: {
        data?: {
          id?: number;
          attributes?: {
            title?: string;
            description?: string;
            main_image?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  alternativeText?: string;
                  caption?: string;
                  width?: number;
                  height?: number;
                  formats?: unknown;
                  hash?: string;
                  ext?: string;
                  mime?: string;
                  /** Format: float */
                  size?: number;
                  url?: string;
                  previewUrl?: string;
                  provider?: string;
                  provider_metadata?: unknown;
                  related?: {
                    data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      }[];
                  };
                  folder?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  folderPath?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              };
            };
            images?: {
              data?: {
                  id?: number;
                  attributes?: {
                    name?: string;
                    alternativeText?: string;
                    caption?: string;
                    width?: number;
                    height?: number;
                    formats?: unknown;
                    hash?: string;
                    ext?: string;
                    mime?: string;
                    /** Format: float */
                    size?: number;
                    url?: string;
                    previewUrl?: string;
                    provider?: string;
                    provider_metadata?: unknown;
                    related?: {
                      data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        }[];
                    };
                    folder?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    folderPath?: string;
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                  };
                }[];
            };
            category?: {
              data?: {
                id?: number;
                attributes?: {
                  Name?: string;
                  Image?: {
                    data?: {
                      id?: number;
                      attributes?: {
                        name?: string;
                        alternativeText?: string;
                        caption?: string;
                        width?: number;
                        height?: number;
                        formats?: unknown;
                        hash?: string;
                        ext?: string;
                        mime?: string;
                        /** Format: float */
                        size?: number;
                        url?: string;
                        previewUrl?: string;
                        provider?: string;
                        provider_metadata?: unknown;
                        related?: {
                          data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            }[];
                        };
                        folder?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        folderPath?: string;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        createdBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        updatedBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                      };
                    };
                  };
                  mekhwars?: {
                    data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      }[];
                  };
                  tailor?: {
                    data?: {
                      id?: number;
                      attributes?: {
                        name?: string;
                        location?: string;
                        description?: string;
                        image?: {
                          data?: {
                            id?: number;
                            attributes?: {
                              name?: string;
                              alternativeText?: string;
                              caption?: string;
                              width?: number;
                              height?: number;
                              formats?: unknown;
                              hash?: string;
                              ext?: string;
                              mime?: string;
                              /** Format: float */
                              size?: number;
                              url?: string;
                              previewUrl?: string;
                              provider?: string;
                              provider_metadata?: unknown;
                              related?: {
                                data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  }[];
                              };
                              folder?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                              folderPath?: string;
                              /** Format: date-time */
                              createdAt?: string;
                              /** Format: date-time */
                              updatedAt?: string;
                              createdBy?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                              updatedBy?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                            };
                          };
                        };
                        background?: {
                          data?: {
                            id?: number;
                            attributes?: {
                              name?: string;
                              alternativeText?: string;
                              caption?: string;
                              width?: number;
                              height?: number;
                              formats?: unknown;
                              hash?: string;
                              ext?: string;
                              mime?: string;
                              /** Format: float */
                              size?: number;
                              url?: string;
                              previewUrl?: string;
                              provider?: string;
                              provider_metadata?: unknown;
                              related?: {
                                data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  }[];
                              };
                              folder?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                              folderPath?: string;
                              /** Format: date-time */
                              createdAt?: string;
                              /** Format: date-time */
                              updatedAt?: string;
                              createdBy?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                              updatedBy?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                            };
                          };
                        };
                        /** Format: date */
                        date_joined?: string;
                        designs?: {
                          data?: {
                              id?: number;
                              attributes?: {
                                name?: string;
                                tailor?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                image?: {
                                  data?: {
                                    id?: number;
                                    attributes?: {
                                      name?: string;
                                      alternativeText?: string;
                                      caption?: string;
                                      width?: number;
                                      height?: number;
                                      formats?: unknown;
                                      hash?: string;
                                      ext?: string;
                                      mime?: string;
                                      /** Format: float */
                                      size?: number;
                                      url?: string;
                                      previewUrl?: string;
                                      provider?: string;
                                      provider_metadata?: unknown;
                                      related?: {
                                        data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          }[];
                                      };
                                      folder?: {
                                        data?: {
                                          id?: number;
                                          attributes?: Record<string, never>;
                                        };
                                      };
                                      folderPath?: string;
                                      /** Format: date-time */
                                      createdAt?: string;
                                      /** Format: date-time */
                                      updatedAt?: string;
                                      createdBy?: {
                                        data?: {
                                          id?: number;
                                          attributes?: Record<string, never>;
                                        };
                                      };
                                      updatedBy?: {
                                        data?: {
                                          id?: number;
                                          attributes?: Record<string, never>;
                                        };
                                      };
                                    };
                                  };
                                };
                                /** Format: float */
                                price?: number;
                                /** Format: float */
                                rating?: number;
                                description?: string;
                                sizes?: {
                                    id?: number;
                                    __component?: string;
                                    name?: string;
                                    shoulder?: number;
                                    writst?: number;
                                    top_width?: number;
                                    bust?: number;
                                    top_length?: number;
                                    arm_length?: number;
                                  }[];
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                /** Format: date-time */
                                publishedAt?: string;
                                createdBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                updatedBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                              };
                            }[];
                        };
                        experience?: string;
                        style?: string;
                        philosophy?: string;
                        mekhwars?: {
                          data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            }[];
                        };
                        category?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        fabrics?: {
                          data?: {
                              id?: number;
                              attributes?: {
                                name?: string;
                                /** Format: float */
                                price?: number;
                                description?: string;
                                main_image?: {
                                  data?: {
                                    id?: number;
                                    attributes?: {
                                      name?: string;
                                      alternativeText?: string;
                                      caption?: string;
                                      width?: number;
                                      height?: number;
                                      formats?: unknown;
                                      hash?: string;
                                      ext?: string;
                                      mime?: string;
                                      /** Format: float */
                                      size?: number;
                                      url?: string;
                                      previewUrl?: string;
                                      provider?: string;
                                      provider_metadata?: unknown;
                                      related?: {
                                        data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          }[];
                                      };
                                      folder?: {
                                        data?: {
                                          id?: number;
                                          attributes?: Record<string, never>;
                                        };
                                      };
                                      folderPath?: string;
                                      /** Format: date-time */
                                      createdAt?: string;
                                      /** Format: date-time */
                                      updatedAt?: string;
                                      createdBy?: {
                                        data?: {
                                          id?: number;
                                          attributes?: Record<string, never>;
                                        };
                                      };
                                      updatedBy?: {
                                        data?: {
                                          id?: number;
                                          attributes?: Record<string, never>;
                                        };
                                      };
                                    };
                                  };
                                };
                                images?: {
                                  data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        alternativeText?: string;
                                        caption?: string;
                                        width?: number;
                                        height?: number;
                                        formats?: unknown;
                                        hash?: string;
                                        ext?: string;
                                        mime?: string;
                                        /** Format: float */
                                        size?: number;
                                        url?: string;
                                        previewUrl?: string;
                                        provider?: string;
                                        provider_metadata?: unknown;
                                        related?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        folder?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        folderPath?: string;
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    }[];
                                };
                                category?: {
                                  data?: {
                                    id?: number;
                                    attributes?: {
                                      name?: string;
                                      Thumbnail?: {
                                        data?: {
                                          id?: number;
                                          attributes?: {
                                            name?: string;
                                            alternativeText?: string;
                                            caption?: string;
                                            width?: number;
                                            height?: number;
                                            formats?: unknown;
                                            hash?: string;
                                            ext?: string;
                                            mime?: string;
                                            /** Format: float */
                                            size?: number;
                                            url?: string;
                                            previewUrl?: string;
                                            provider?: string;
                                            provider_metadata?: unknown;
                                            related?: {
                                              data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                }[];
                                            };
                                            folder?: {
                                              data?: {
                                                id?: number;
                                                attributes?: Record<string, never>;
                                              };
                                            };
                                            folderPath?: string;
                                            /** Format: date-time */
                                            createdAt?: string;
                                            /** Format: date-time */
                                            updatedAt?: string;
                                            createdBy?: {
                                              data?: {
                                                id?: number;
                                                attributes?: Record<string, never>;
                                              };
                                            };
                                            updatedBy?: {
                                              data?: {
                                                id?: number;
                                                attributes?: Record<string, never>;
                                              };
                                            };
                                          };
                                        };
                                      };
                                      fabrics?: {
                                        data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          }[];
                                      };
                                      /** Format: date-time */
                                      createdAt?: string;
                                      /** Format: date-time */
                                      updatedAt?: string;
                                      /** Format: date-time */
                                      publishedAt?: string;
                                      createdBy?: {
                                        data?: {
                                          id?: number;
                                          attributes?: Record<string, never>;
                                        };
                                      };
                                      updatedBy?: {
                                        data?: {
                                          id?: number;
                                          attributes?: Record<string, never>;
                                        };
                                      };
                                      localizations?: {
                                        data?: unknown[];
                                      };
                                      locale?: string;
                                    };
                                  };
                                };
                                detail_list_item?: {
                                    id?: number;
                                    title?: string;
                                  }[];
                                fabric_pattern?: {
                                    id?: number;
                                    title?: string;
                                    /** Format: float */
                                    price?: number;
                                    image?: {
                                      data?: {
                                        id?: number;
                                        attributes?: {
                                          name?: string;
                                          alternativeText?: string;
                                          caption?: string;
                                          width?: number;
                                          height?: number;
                                          formats?: unknown;
                                          hash?: string;
                                          ext?: string;
                                          mime?: string;
                                          /** Format: float */
                                          size?: number;
                                          url?: string;
                                          previewUrl?: string;
                                          provider?: string;
                                          provider_metadata?: unknown;
                                          related?: {
                                            data?: {
                                                id?: number;
                                                attributes?: Record<string, never>;
                                              }[];
                                          };
                                          folder?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          folderPath?: string;
                                          /** Format: date-time */
                                          createdAt?: string;
                                          /** Format: date-time */
                                          updatedAt?: string;
                                          createdBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          updatedBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                        };
                                      };
                                    };
                                  }[];
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                /** Format: date-time */
                                publishedAt?: string;
                                createdBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                updatedBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                localizations?: {
                                  data?: unknown[];
                                };
                                locale?: string;
                              };
                            }[];
                        };
                        /** Format: float */
                        rating?: number;
                        tags?: string;
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        /** Format: date-time */
                        publishedAt?: string;
                        createdBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        updatedBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        localizations?: {
                          data?: unknown[];
                        };
                        locale?: string;
                      };
                    };
                  };
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  /** Format: date-time */
                  publishedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  localizations?: {
                    data?: unknown[];
                  };
                  locale?: string;
                };
              };
            };
            /** Format: float */
            price?: number;
            tailor?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            detail_list_item?: {
                id?: number;
                __component?: string;
                title?: string;
              }[];
            /** Format: float */
            rating?: number;
            favourite_products?: {
              data?: ({
                  id?: number;
                  attributes?: {
                    mekhwar?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    user?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          username?: string;
                          /** Format: email */
                          email?: string;
                          provider?: string;
                          resetPasswordToken?: string;
                          confirmationToken?: string;
                          confirmed?: boolean;
                          blocked?: boolean;
                          role?: {
                            data?: {
                              id?: number;
                              attributes?: {
                                name?: string;
                                description?: string;
                                type?: string;
                                permissions?: {
                                  data?: {
                                      id?: number;
                                      attributes?: {
                                        action?: string;
                                        role?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    }[];
                                };
                                users?: {
                                  data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    }[];
                                };
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                createdBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                updatedBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                              };
                            };
                          };
                          phone?: string;
                          name?: string;
                          size_profiles?: {
                            data?: {
                                id?: number;
                                attributes?: {
                                  title?: string;
                                  /** Format: float */
                                  shoulder?: number;
                                  /** Format: float */
                                  bust?: number;
                                  /** Format: float */
                                  arm_length?: number;
                                  /** Format: float */
                                  wrist?: number;
                                  /** Format: float */
                                  top_length?: number;
                                  /** Format: float */
                                  top_width?: number;
                                  users_permissions_user?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  cup?: string;
                                  /** Format: float */
                                  chest_point?: number;
                                  /** Format: float */
                                  neck?: number;
                                  /** Format: float */
                                  hips?: number;
                                  /** Format: float */
                                  height?: number;
                                  /** Format: float */
                                  arm_width?: number;
                                  /** Format: float */
                                  sleeves_length?: number;
                                  wrist_style?: string;
                                  neck_style?: string;
                                  /** Format: date-time */
                                  createdAt?: string;
                                  /** Format: date-time */
                                  updatedAt?: string;
                                  /** Format: date-time */
                                  publishedAt?: string;
                                  createdBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  updatedBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                };
                              }[];
                          };
                          cart?: {
                            data?: {
                              id?: number;
                              attributes?: {
                                user?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                custom?: ({
                                    id?: number;
                                    size_profile?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    quantity?: number;
                                    /** Format: float */
                                    shoulder?: number;
                                    /** Format: float */
                                    bust?: number;
                                    /** Format: float */
                                    wrist?: number;
                                    save_size_profile?: boolean;
                                    /** @enum {string} */
                                    size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";
                                    customer_instructions?: string;
                                    chest_point?: string;
                                    cup?: string;
                                    /** Format: float */
                                    arm_width?: number;
                                    /** Format: float */
                                    height?: number;
                                    /** Format: float */
                                    sleeves_length?: number;
                                    /** Format: float */
                                    neck?: number;
                                    /** Format: float */
                                    hips?: number;
                                    mekhwar?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                  })[];
                                /** @enum {string} */
                                status?: "PENDING" | "PLACED" | "ON THE WAY" | "DELIVERED" | "CANCELLED" | "REFUNDED";
                                cancel_reason?: string;
                                /** Format: date */
                                cancel_date?: string;
                                /** @enum {string} */
                                size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                /** Format: date-time */
                                publishedAt?: string;
                                createdBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                updatedBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                              };
                            };
                          };
                          addresses?: {
                            data?: ({
                                id?: number;
                                attributes?: {
                                  name?: string;
                                  country?: string;
                                  city?: string;
                                  street?: string;
                                  building?: string;
                                  address?: string;
                                  flat?: string;
                                  mobile?: string;
                                  user?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  /** @enum {string} */
                                  type?: "home" | "office" | "gym" | "work";
                                  /** Format: date-time */
                                  createdAt?: string;
                                  /** Format: date-time */
                                  updatedAt?: string;
                                  /** Format: date-time */
                                  publishedAt?: string;
                                  createdBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  updatedBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                };
                              })[];
                          };
                          orders?: {
                            data?: ({
                                id?: number;
                                attributes?: {
                                  ref?: string;
                                  customer_address?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  users_permissions_user?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  paid?: boolean;
                                  /** Format: float */
                                  tax?: number;
                                  /** Format: float */
                                  discount?: number;
                                  /** Format: float */
                                  total?: number;
                                  /** Format: float */
                                  delivery_charge?: number;
                                  custom?: {
                                      id?: number;
                                      quantity?: number;
                                      /** Format: float */
                                      bust?: number;
                                      /** Format: float */
                                      wrist?: number;
                                      /** Format: float */
                                      shoulder?: number;
                                      cup?: string;
                                      /** Format: float */
                                      chest_point?: number;
                                      /** Format: float */
                                      neck?: number;
                                      /** Format: float */
                                      hips?: number;
                                      /** Format: float */
                                      height?: number;
                                      /** Format: float */
                                      arm_width?: number;
                                      /** Format: float */
                                      sleeves_length?: number;
                                      wrist_style?: string;
                                      neck_style?: string;
                                      customer_instructions?: string;
                                      color?: string;
                                      mekhwar?: {
                                        data?: {
                                          id?: number;
                                          attributes?: Record<string, never>;
                                        };
                                      };
                                    }[];
                                  delivery_note?: string;
                                  /** @enum {string} */
                                  status?: "PLACED" | "SEWING" | "ON THE WAY" | "DELIVERED" | "CANCELLED";
                                  /** @enum {string} */
                                  size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";
                                  /** Format: date-time */
                                  createdAt?: string;
                                  /** Format: date-time */
                                  updatedAt?: string;
                                  createdBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  updatedBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                };
                              })[];
                          };
                          custom_design_orders?: {
                            data?: ({
                                id?: number;
                                attributes?: {
                                  design?: {
                                    data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        alternativeText?: string;
                                        caption?: string;
                                        width?: number;
                                        height?: number;
                                        formats?: unknown;
                                        hash?: string;
                                        ext?: string;
                                        mime?: string;
                                        /** Format: float */
                                        size?: number;
                                        url?: string;
                                        previewUrl?: string;
                                        provider?: string;
                                        provider_metadata?: unknown;
                                        related?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        folder?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        folderPath?: string;
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    };
                                  };
                                  color?: string;
                                  fabric?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  tailor?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  /** Format: float */
                                  price?: number;
                                  /** Format: float */
                                  tax?: number;
                                  /** Format: float */
                                  delivery_charge?: number;
                                  /** Format: float */
                                  tailor_fee?: number;
                                  /** @enum {string} */
                                  status?: "PENDING" | "APPROVED" | "PROCESSING" | "REJECTED" | "CANCELLED" | "ON THE WAY" | "DELIVERED";
                                  style?: unknown;
                                  size_profile?: {
                                    id?: number;
                                    /** Format: float */
                                    shoulder?: number;
                                    /** Format: float */
                                    bust?: number;
                                    /** Format: float */
                                    arm_length?: number;
                                    /** Format: float */
                                    wrist?: number;
                                    /** Format: float */
                                    top_length?: number;
                                    /** Format: float */
                                    top_width?: number;
                                    cup?: string;
                                    /** Format: float */
                                    chest_point?: number;
                                    /** Format: float */
                                    neck?: number;
                                    /** Format: float */
                                    hips?: number;
                                    /** Format: float */
                                    height?: number;
                                    /** Format: float */
                                    sleeves_length?: number;
                                    wrist_style?: string;
                                    neck_style?: string;
                                    /** Format: float */
                                    arm_width?: number;
                                  };
                                  /** @enum {string} */
                                  size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL" | "CUSTOM";
                                  user?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  address?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  customer_instructions?: string;
                                  design2?: {
                                    data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        alternativeText?: string;
                                        caption?: string;
                                        width?: number;
                                        height?: number;
                                        formats?: unknown;
                                        hash?: string;
                                        ext?: string;
                                        mime?: string;
                                        /** Format: float */
                                        size?: number;
                                        url?: string;
                                        previewUrl?: string;
                                        provider?: string;
                                        provider_metadata?: unknown;
                                        related?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        folder?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        folderPath?: string;
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    };
                                  };
                                  design3?: {
                                    data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        alternativeText?: string;
                                        caption?: string;
                                        width?: number;
                                        height?: number;
                                        formats?: unknown;
                                        hash?: string;
                                        ext?: string;
                                        mime?: string;
                                        /** Format: float */
                                        size?: number;
                                        url?: string;
                                        previewUrl?: string;
                                        provider?: string;
                                        provider_metadata?: unknown;
                                        related?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        folder?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        folderPath?: string;
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    };
                                  };
                                  design4?: {
                                    data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        alternativeText?: string;
                                        caption?: string;
                                        width?: number;
                                        height?: number;
                                        formats?: unknown;
                                        hash?: string;
                                        ext?: string;
                                        mime?: string;
                                        /** Format: float */
                                        size?: number;
                                        url?: string;
                                        previewUrl?: string;
                                        provider?: string;
                                        provider_metadata?: unknown;
                                        related?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        folder?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        folderPath?: string;
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    };
                                  };
                                  /** Format: date-time */
                                  createdAt?: string;
                                  /** Format: date-time */
                                  updatedAt?: string;
                                  /** Format: date-time */
                                  publishedAt?: string;
                                  createdBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  updatedBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                };
                              })[];
                          };
                          favourite_products?: {
                            data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                          };
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    /** Format: date-time */
                    publishedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                  };
                })[];
            };
            slug?: string;
            customizable?: boolean;
            fabrics?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            localizations?: {
              data?: unknown[];
            };
            locale?: string;
          };
        };
      };
      show_case_fabrics?: {
        data?: {
            id?: number;
            attributes?: Record<string, never>;
          }[];
      };
      discount?: any | components["schemas"]["HomeDiscountComponent"];
      textbox?: components["schemas"]["HomeTextBoxComponent"];
      card_products?: components["schemas"]["HomeProductCardComponent"][];
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      localizations?: {
        data?: components["schemas"]["HomePage"][];
      };
      locale?: string;
    };
    HomePageResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["HomePage"];
    };
    HomePageResponse: {
      data?: components["schemas"]["HomePageResponseDataObject"];
      meta?: Record<string, never>;
    };
    HomeHomeBannerComponent: {
      id?: number;
      title?: string;
      description?: string;
      image?: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            alternativeText?: string;
            caption?: string;
            width?: number;
            height?: number;
            formats?: unknown;
            hash?: string;
            ext?: string;
            mime?: string;
            /** Format: float */
            size?: number;
            url?: string;
            previewUrl?: string;
            provider?: string;
            provider_metadata?: unknown;
            related?: {
              data?: {
                  id?: number;
                  attributes?: Record<string, never>;
                }[];
            };
            folder?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  pathId?: number;
                  parent?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  children?: {
                    data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      }[];
                  };
                  files?: {
                    data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: {
                                firstname?: string;
                                lastname?: string;
                                username?: string;
                                /** Format: email */
                                email?: string;
                                resetPasswordToken?: string;
                                registrationToken?: string;
                                isActive?: boolean;
                                roles?: {
                                  data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        code?: string;
                                        description?: string;
                                        users?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        permissions?: {
                                          data?: {
                                              id?: number;
                                              attributes?: {
                                                action?: string;
                                                actionParameters?: unknown;
                                                subject?: string;
                                                properties?: unknown;
                                                conditions?: unknown;
                                                role?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                              };
                                            }[];
                                        };
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    }[];
                                };
                                blocked?: boolean;
                                preferedLanguage?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                createdBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                updatedBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                              };
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      }[];
                  };
                  path?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              };
            };
            folderPath?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      link?: string;
      active?: boolean;
    };
    HomeDiscountComponent: {
      id?: number;
      description?: string;
      title?: string;
    };
    HomeTextBoxComponent: {
      id?: number;
      title?: string;
      description?: string;
      actions?: ({
          id?: number;
          title?: string;
          /** @enum {string} */
          type?: "primary" | "secondary" | "link";
          link?: string;
          requiresAuth?: boolean;
        })[];
      first_word?: string;
      background?: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            alternativeText?: string;
            caption?: string;
            width?: number;
            height?: number;
            formats?: unknown;
            hash?: string;
            ext?: string;
            mime?: string;
            /** Format: float */
            size?: number;
            url?: string;
            previewUrl?: string;
            provider?: string;
            provider_metadata?: unknown;
            related?: {
              data?: {
                  id?: number;
                  attributes?: Record<string, never>;
                }[];
            };
            folder?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            folderPath?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
    };
    HomeProductCardComponent: {
      id?: number;
      __component?: string;
      mekhwar?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
    };
    MekhwarLocalizationRequest: {
      title: string;
      description: string;
      /** @example string or id */
      main_image: number | string;
      images?: (number | string)[];
      /** @example string or id */
      category?: number | string;
      /** Format: float */
      price: number;
      /** @example string or id */
      tailor?: number | string;
      detail_list_item?: components["schemas"]["ProductDetailListItemComponent"][];
      /** Format: float */
      rating?: number;
      favourite_products?: (number | string)[];
      slug?: string;
      customizable?: boolean;
      /** @example string or id */
      fabrics?: number | string;
      locale: string;
    };
    MekhwarRequest: {
      data: {
        title: string;
        description: string;
        /** @example string or id */
        main_image: number | string;
        images?: (number | string)[];
        /** @example string or id */
        category?: number | string;
        /** Format: float */
        price: number;
        /** @example string or id */
        tailor?: number | string;
        detail_list_item?: components["schemas"]["ProductDetailListItemComponent"][];
        /** Format: float */
        rating?: number;
        favourite_products?: (number | string)[];
        slug?: string;
        customizable?: boolean;
        /** @example string or id */
        fabrics?: number | string;
        locale?: string;
      };
    };
    MekhwarResponseDataObjectLocalized: {
      id?: number;
      attributes?: components["schemas"]["Mekhwar"];
    };
    MekhwarLocalizationResponse: {
      data?: components["schemas"]["MekhwarResponseDataObjectLocalized"];
      meta?: Record<string, never>;
    };
    MekhwarListResponseDataItemLocalized: {
      id?: number;
      attributes?: components["schemas"]["Mekhwar"];
    };
    MekhwarLocalizationListResponse: {
      data?: components["schemas"]["MekhwarListResponseDataItemLocalized"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    MekhwarListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["Mekhwar"];
    };
    MekhwarListResponse: {
      data?: components["schemas"]["MekhwarListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    Mekhwar: {
      title: string;
      description: string;
      main_image: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            alternativeText?: string;
            caption?: string;
            width?: number;
            height?: number;
            formats?: unknown;
            hash?: string;
            ext?: string;
            mime?: string;
            /** Format: float */
            size?: number;
            url?: string;
            previewUrl?: string;
            provider?: string;
            provider_metadata?: unknown;
            related?: {
              data?: {
                  id?: number;
                  attributes?: Record<string, never>;
                }[];
            };
            folder?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  pathId?: number;
                  parent?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  children?: {
                    data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      }[];
                  };
                  files?: {
                    data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: {
                                firstname?: string;
                                lastname?: string;
                                username?: string;
                                /** Format: email */
                                email?: string;
                                resetPasswordToken?: string;
                                registrationToken?: string;
                                isActive?: boolean;
                                roles?: {
                                  data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        code?: string;
                                        description?: string;
                                        users?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        permissions?: {
                                          data?: {
                                              id?: number;
                                              attributes?: {
                                                action?: string;
                                                actionParameters?: unknown;
                                                subject?: string;
                                                properties?: unknown;
                                                conditions?: unknown;
                                                role?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                              };
                                            }[];
                                        };
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    }[];
                                };
                                blocked?: boolean;
                                preferedLanguage?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                createdBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                updatedBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                              };
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      }[];
                  };
                  path?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              };
            };
            folderPath?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      images?: {
        data?: {
            id?: number;
            attributes?: {
              name?: string;
              alternativeText?: string;
              caption?: string;
              width?: number;
              height?: number;
              formats?: unknown;
              hash?: string;
              ext?: string;
              mime?: string;
              /** Format: float */
              size?: number;
              url?: string;
              previewUrl?: string;
              provider?: string;
              provider_metadata?: unknown;
              related?: {
                data?: {
                    id?: number;
                    attributes?: Record<string, never>;
                  }[];
              };
              folder?: {
                data?: {
                  id?: number;
                  attributes?: Record<string, never>;
                };
              };
              folderPath?: string;
              /** Format: date-time */
              createdAt?: string;
              /** Format: date-time */
              updatedAt?: string;
              createdBy?: {
                data?: {
                  id?: number;
                  attributes?: Record<string, never>;
                };
              };
              updatedBy?: {
                data?: {
                  id?: number;
                  attributes?: Record<string, never>;
                };
              };
            };
          }[];
      };
      category?: {
        data?: {
          id?: number;
          attributes?: {
            Name?: string;
            Image?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  alternativeText?: string;
                  caption?: string;
                  width?: number;
                  height?: number;
                  formats?: unknown;
                  hash?: string;
                  ext?: string;
                  mime?: string;
                  /** Format: float */
                  size?: number;
                  url?: string;
                  previewUrl?: string;
                  provider?: string;
                  provider_metadata?: unknown;
                  related?: {
                    data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      }[];
                  };
                  folder?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  folderPath?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              };
            };
            mekhwars?: {
              data?: ({
                  id?: number;
                  attributes?: {
                    title?: string;
                    description?: string;
                    main_image?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                    images?: {
                      data?: {
                          id?: number;
                          attributes?: {
                            name?: string;
                            alternativeText?: string;
                            caption?: string;
                            width?: number;
                            height?: number;
                            formats?: unknown;
                            hash?: string;
                            ext?: string;
                            mime?: string;
                            /** Format: float */
                            size?: number;
                            url?: string;
                            previewUrl?: string;
                            provider?: string;
                            provider_metadata?: unknown;
                            related?: {
                              data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                }[];
                            };
                            folder?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            folderPath?: string;
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                          };
                        }[];
                    };
                    category?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    /** Format: float */
                    price?: number;
                    tailor?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          location?: string;
                          description?: string;
                          image?: {
                            data?: {
                              id?: number;
                              attributes?: {
                                name?: string;
                                alternativeText?: string;
                                caption?: string;
                                width?: number;
                                height?: number;
                                formats?: unknown;
                                hash?: string;
                                ext?: string;
                                mime?: string;
                                /** Format: float */
                                size?: number;
                                url?: string;
                                previewUrl?: string;
                                provider?: string;
                                provider_metadata?: unknown;
                                related?: {
                                  data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    }[];
                                };
                                folder?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                folderPath?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                createdBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                updatedBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                              };
                            };
                          };
                          background?: {
                            data?: {
                              id?: number;
                              attributes?: {
                                name?: string;
                                alternativeText?: string;
                                caption?: string;
                                width?: number;
                                height?: number;
                                formats?: unknown;
                                hash?: string;
                                ext?: string;
                                mime?: string;
                                /** Format: float */
                                size?: number;
                                url?: string;
                                previewUrl?: string;
                                provider?: string;
                                provider_metadata?: unknown;
                                related?: {
                                  data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    }[];
                                };
                                folder?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                folderPath?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                createdBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                updatedBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                              };
                            };
                          };
                          /** Format: date */
                          date_joined?: string;
                          designs?: {
                            data?: {
                                id?: number;
                                attributes?: {
                                  name?: string;
                                  tailor?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  image?: {
                                    data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        alternativeText?: string;
                                        caption?: string;
                                        width?: number;
                                        height?: number;
                                        formats?: unknown;
                                        hash?: string;
                                        ext?: string;
                                        mime?: string;
                                        /** Format: float */
                                        size?: number;
                                        url?: string;
                                        previewUrl?: string;
                                        provider?: string;
                                        provider_metadata?: unknown;
                                        related?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        folder?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        folderPath?: string;
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    };
                                  };
                                  /** Format: float */
                                  price?: number;
                                  /** Format: float */
                                  rating?: number;
                                  description?: string;
                                  sizes?: {
                                      id?: number;
                                      __component?: string;
                                      name?: string;
                                      shoulder?: number;
                                      writst?: number;
                                      top_width?: number;
                                      bust?: number;
                                      top_length?: number;
                                      arm_length?: number;
                                    }[];
                                  /** Format: date-time */
                                  createdAt?: string;
                                  /** Format: date-time */
                                  updatedAt?: string;
                                  /** Format: date-time */
                                  publishedAt?: string;
                                  createdBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  updatedBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                };
                              }[];
                          };
                          experience?: string;
                          style?: string;
                          philosophy?: string;
                          mekhwars?: {
                            data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                          };
                          category?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          fabrics?: {
                            data?: {
                                id?: number;
                                attributes?: {
                                  name?: string;
                                  /** Format: float */
                                  price?: number;
                                  description?: string;
                                  main_image?: {
                                    data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        alternativeText?: string;
                                        caption?: string;
                                        width?: number;
                                        height?: number;
                                        formats?: unknown;
                                        hash?: string;
                                        ext?: string;
                                        mime?: string;
                                        /** Format: float */
                                        size?: number;
                                        url?: string;
                                        previewUrl?: string;
                                        provider?: string;
                                        provider_metadata?: unknown;
                                        related?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        folder?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        folderPath?: string;
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    };
                                  };
                                  images?: {
                                    data?: {
                                        id?: number;
                                        attributes?: {
                                          name?: string;
                                          alternativeText?: string;
                                          caption?: string;
                                          width?: number;
                                          height?: number;
                                          formats?: unknown;
                                          hash?: string;
                                          ext?: string;
                                          mime?: string;
                                          /** Format: float */
                                          size?: number;
                                          url?: string;
                                          previewUrl?: string;
                                          provider?: string;
                                          provider_metadata?: unknown;
                                          related?: {
                                            data?: {
                                                id?: number;
                                                attributes?: Record<string, never>;
                                              }[];
                                          };
                                          folder?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          folderPath?: string;
                                          /** Format: date-time */
                                          createdAt?: string;
                                          /** Format: date-time */
                                          updatedAt?: string;
                                          createdBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          updatedBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                        };
                                      }[];
                                  };
                                  category?: {
                                    data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        Thumbnail?: {
                                          data?: {
                                            id?: number;
                                            attributes?: {
                                              name?: string;
                                              alternativeText?: string;
                                              caption?: string;
                                              width?: number;
                                              height?: number;
                                              formats?: unknown;
                                              hash?: string;
                                              ext?: string;
                                              mime?: string;
                                              /** Format: float */
                                              size?: number;
                                              url?: string;
                                              previewUrl?: string;
                                              provider?: string;
                                              provider_metadata?: unknown;
                                              related?: {
                                                data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  }[];
                                              };
                                              folder?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                              folderPath?: string;
                                              /** Format: date-time */
                                              createdAt?: string;
                                              /** Format: date-time */
                                              updatedAt?: string;
                                              createdBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                              updatedBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                            };
                                          };
                                        };
                                        fabrics?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        /** Format: date-time */
                                        publishedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        localizations?: {
                                          data?: unknown[];
                                        };
                                        locale?: string;
                                      };
                                    };
                                  };
                                  detail_list_item?: {
                                      id?: number;
                                      title?: string;
                                    }[];
                                  fabric_pattern?: {
                                      id?: number;
                                      title?: string;
                                      /** Format: float */
                                      price?: number;
                                      image?: {
                                        data?: {
                                          id?: number;
                                          attributes?: {
                                            name?: string;
                                            alternativeText?: string;
                                            caption?: string;
                                            width?: number;
                                            height?: number;
                                            formats?: unknown;
                                            hash?: string;
                                            ext?: string;
                                            mime?: string;
                                            /** Format: float */
                                            size?: number;
                                            url?: string;
                                            previewUrl?: string;
                                            provider?: string;
                                            provider_metadata?: unknown;
                                            related?: {
                                              data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                }[];
                                            };
                                            folder?: {
                                              data?: {
                                                id?: number;
                                                attributes?: Record<string, never>;
                                              };
                                            };
                                            folderPath?: string;
                                            /** Format: date-time */
                                            createdAt?: string;
                                            /** Format: date-time */
                                            updatedAt?: string;
                                            createdBy?: {
                                              data?: {
                                                id?: number;
                                                attributes?: Record<string, never>;
                                              };
                                            };
                                            updatedBy?: {
                                              data?: {
                                                id?: number;
                                                attributes?: Record<string, never>;
                                              };
                                            };
                                          };
                                        };
                                      };
                                    }[];
                                  /** Format: date-time */
                                  createdAt?: string;
                                  /** Format: date-time */
                                  updatedAt?: string;
                                  /** Format: date-time */
                                  publishedAt?: string;
                                  createdBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  updatedBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  localizations?: {
                                    data?: unknown[];
                                  };
                                  locale?: string;
                                };
                              }[];
                          };
                          /** Format: float */
                          rating?: number;
                          tags?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          /** Format: date-time */
                          publishedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          localizations?: {
                            data?: unknown[];
                          };
                          locale?: string;
                        };
                      };
                    };
                    detail_list_item?: {
                        id?: number;
                        __component?: string;
                        title?: string;
                      }[];
                    /** Format: float */
                    rating?: number;
                    favourite_products?: {
                      data?: ({
                          id?: number;
                          attributes?: {
                            mekhwar?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            user?: {
                              data?: {
                                id?: number;
                                attributes?: {
                                  username?: string;
                                  /** Format: email */
                                  email?: string;
                                  provider?: string;
                                  resetPasswordToken?: string;
                                  confirmationToken?: string;
                                  confirmed?: boolean;
                                  blocked?: boolean;
                                  role?: {
                                    data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        description?: string;
                                        type?: string;
                                        permissions?: {
                                          data?: {
                                              id?: number;
                                              attributes?: {
                                                action?: string;
                                                role?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                              };
                                            }[];
                                        };
                                        users?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    };
                                  };
                                  phone?: string;
                                  name?: string;
                                  size_profiles?: {
                                    data?: {
                                        id?: number;
                                        attributes?: {
                                          title?: string;
                                          /** Format: float */
                                          shoulder?: number;
                                          /** Format: float */
                                          bust?: number;
                                          /** Format: float */
                                          arm_length?: number;
                                          /** Format: float */
                                          wrist?: number;
                                          /** Format: float */
                                          top_length?: number;
                                          /** Format: float */
                                          top_width?: number;
                                          users_permissions_user?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          cup?: string;
                                          /** Format: float */
                                          chest_point?: number;
                                          /** Format: float */
                                          neck?: number;
                                          /** Format: float */
                                          hips?: number;
                                          /** Format: float */
                                          height?: number;
                                          /** Format: float */
                                          arm_width?: number;
                                          /** Format: float */
                                          sleeves_length?: number;
                                          wrist_style?: string;
                                          neck_style?: string;
                                          /** Format: date-time */
                                          createdAt?: string;
                                          /** Format: date-time */
                                          updatedAt?: string;
                                          /** Format: date-time */
                                          publishedAt?: string;
                                          createdBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          updatedBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                        };
                                      }[];
                                  };
                                  cart?: {
                                    data?: {
                                      id?: number;
                                      attributes?: {
                                        user?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        custom?: ({
                                            id?: number;
                                            size_profile?: {
                                              data?: {
                                                id?: number;
                                                attributes?: Record<string, never>;
                                              };
                                            };
                                            quantity?: number;
                                            /** Format: float */
                                            shoulder?: number;
                                            /** Format: float */
                                            bust?: number;
                                            /** Format: float */
                                            wrist?: number;
                                            save_size_profile?: boolean;
                                            /** @enum {string} */
                                            size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";
                                            customer_instructions?: string;
                                            chest_point?: string;
                                            cup?: string;
                                            /** Format: float */
                                            arm_width?: number;
                                            /** Format: float */
                                            height?: number;
                                            /** Format: float */
                                            sleeves_length?: number;
                                            /** Format: float */
                                            neck?: number;
                                            /** Format: float */
                                            hips?: number;
                                            mekhwar?: {
                                              data?: {
                                                id?: number;
                                                attributes?: Record<string, never>;
                                              };
                                            };
                                          })[];
                                        /** @enum {string} */
                                        status?: "PENDING" | "PLACED" | "ON THE WAY" | "DELIVERED" | "CANCELLED" | "REFUNDED";
                                        cancel_reason?: string;
                                        /** Format: date */
                                        cancel_date?: string;
                                        /** @enum {string} */
                                        size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        /** Format: date-time */
                                        publishedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    };
                                  };
                                  addresses?: {
                                    data?: ({
                                        id?: number;
                                        attributes?: {
                                          name?: string;
                                          country?: string;
                                          city?: string;
                                          street?: string;
                                          building?: string;
                                          address?: string;
                                          flat?: string;
                                          mobile?: string;
                                          user?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          /** @enum {string} */
                                          type?: "home" | "office" | "gym" | "work";
                                          /** Format: date-time */
                                          createdAt?: string;
                                          /** Format: date-time */
                                          updatedAt?: string;
                                          /** Format: date-time */
                                          publishedAt?: string;
                                          createdBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          updatedBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                        };
                                      })[];
                                  };
                                  orders?: {
                                    data?: ({
                                        id?: number;
                                        attributes?: {
                                          ref?: string;
                                          customer_address?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          users_permissions_user?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          paid?: boolean;
                                          /** Format: float */
                                          tax?: number;
                                          /** Format: float */
                                          discount?: number;
                                          /** Format: float */
                                          total?: number;
                                          /** Format: float */
                                          delivery_charge?: number;
                                          custom?: {
                                              id?: number;
                                              quantity?: number;
                                              /** Format: float */
                                              bust?: number;
                                              /** Format: float */
                                              wrist?: number;
                                              /** Format: float */
                                              shoulder?: number;
                                              cup?: string;
                                              /** Format: float */
                                              chest_point?: number;
                                              /** Format: float */
                                              neck?: number;
                                              /** Format: float */
                                              hips?: number;
                                              /** Format: float */
                                              height?: number;
                                              /** Format: float */
                                              arm_width?: number;
                                              /** Format: float */
                                              sleeves_length?: number;
                                              wrist_style?: string;
                                              neck_style?: string;
                                              customer_instructions?: string;
                                              color?: string;
                                              mekhwar?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                            }[];
                                          delivery_note?: string;
                                          /** @enum {string} */
                                          status?: "PLACED" | "SEWING" | "ON THE WAY" | "DELIVERED" | "CANCELLED";
                                          /** @enum {string} */
                                          size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";
                                          /** Format: date-time */
                                          createdAt?: string;
                                          /** Format: date-time */
                                          updatedAt?: string;
                                          createdBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          updatedBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                        };
                                      })[];
                                  };
                                  custom_design_orders?: {
                                    data?: ({
                                        id?: number;
                                        attributes?: {
                                          design?: {
                                            data?: {
                                              id?: number;
                                              attributes?: {
                                                name?: string;
                                                alternativeText?: string;
                                                caption?: string;
                                                width?: number;
                                                height?: number;
                                                formats?: unknown;
                                                hash?: string;
                                                ext?: string;
                                                mime?: string;
                                                /** Format: float */
                                                size?: number;
                                                url?: string;
                                                previewUrl?: string;
                                                provider?: string;
                                                provider_metadata?: unknown;
                                                related?: {
                                                  data?: {
                                                      id?: number;
                                                      attributes?: Record<string, never>;
                                                    }[];
                                                };
                                                folder?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                folderPath?: string;
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                              };
                                            };
                                          };
                                          color?: string;
                                          fabric?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          tailor?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          /** Format: float */
                                          price?: number;
                                          /** Format: float */
                                          tax?: number;
                                          /** Format: float */
                                          delivery_charge?: number;
                                          /** Format: float */
                                          tailor_fee?: number;
                                          /** @enum {string} */
                                          status?: "PENDING" | "APPROVED" | "PROCESSING" | "REJECTED" | "CANCELLED" | "ON THE WAY" | "DELIVERED";
                                          style?: unknown;
                                          size_profile?: {
                                            id?: number;
                                            /** Format: float */
                                            shoulder?: number;
                                            /** Format: float */
                                            bust?: number;
                                            /** Format: float */
                                            arm_length?: number;
                                            /** Format: float */
                                            wrist?: number;
                                            /** Format: float */
                                            top_length?: number;
                                            /** Format: float */
                                            top_width?: number;
                                            cup?: string;
                                            /** Format: float */
                                            chest_point?: number;
                                            /** Format: float */
                                            neck?: number;
                                            /** Format: float */
                                            hips?: number;
                                            /** Format: float */
                                            height?: number;
                                            /** Format: float */
                                            sleeves_length?: number;
                                            wrist_style?: string;
                                            neck_style?: string;
                                            /** Format: float */
                                            arm_width?: number;
                                          };
                                          /** @enum {string} */
                                          size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL" | "CUSTOM";
                                          user?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          address?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          customer_instructions?: string;
                                          design2?: {
                                            data?: {
                                              id?: number;
                                              attributes?: {
                                                name?: string;
                                                alternativeText?: string;
                                                caption?: string;
                                                width?: number;
                                                height?: number;
                                                formats?: unknown;
                                                hash?: string;
                                                ext?: string;
                                                mime?: string;
                                                /** Format: float */
                                                size?: number;
                                                url?: string;
                                                previewUrl?: string;
                                                provider?: string;
                                                provider_metadata?: unknown;
                                                related?: {
                                                  data?: {
                                                      id?: number;
                                                      attributes?: Record<string, never>;
                                                    }[];
                                                };
                                                folder?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                folderPath?: string;
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                              };
                                            };
                                          };
                                          design3?: {
                                            data?: {
                                              id?: number;
                                              attributes?: {
                                                name?: string;
                                                alternativeText?: string;
                                                caption?: string;
                                                width?: number;
                                                height?: number;
                                                formats?: unknown;
                                                hash?: string;
                                                ext?: string;
                                                mime?: string;
                                                /** Format: float */
                                                size?: number;
                                                url?: string;
                                                previewUrl?: string;
                                                provider?: string;
                                                provider_metadata?: unknown;
                                                related?: {
                                                  data?: {
                                                      id?: number;
                                                      attributes?: Record<string, never>;
                                                    }[];
                                                };
                                                folder?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                folderPath?: string;
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                              };
                                            };
                                          };
                                          design4?: {
                                            data?: {
                                              id?: number;
                                              attributes?: {
                                                name?: string;
                                                alternativeText?: string;
                                                caption?: string;
                                                width?: number;
                                                height?: number;
                                                formats?: unknown;
                                                hash?: string;
                                                ext?: string;
                                                mime?: string;
                                                /** Format: float */
                                                size?: number;
                                                url?: string;
                                                previewUrl?: string;
                                                provider?: string;
                                                provider_metadata?: unknown;
                                                related?: {
                                                  data?: {
                                                      id?: number;
                                                      attributes?: Record<string, never>;
                                                    }[];
                                                };
                                                folder?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                folderPath?: string;
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                              };
                                            };
                                          };
                                          /** Format: date-time */
                                          createdAt?: string;
                                          /** Format: date-time */
                                          updatedAt?: string;
                                          /** Format: date-time */
                                          publishedAt?: string;
                                          createdBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          updatedBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                        };
                                      })[];
                                  };
                                  favourite_products?: {
                                    data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      }[];
                                  };
                                  /** Format: date-time */
                                  createdAt?: string;
                                  /** Format: date-time */
                                  updatedAt?: string;
                                  createdBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  updatedBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                };
                              };
                            };
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            /** Format: date-time */
                            publishedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                          };
                        })[];
                    };
                    slug?: string;
                    customizable?: boolean;
                    fabrics?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    /** Format: date-time */
                    publishedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    localizations?: {
                      data?: unknown[];
                    };
                    locale?: string;
                  };
                })[];
            };
            tailor?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            localizations?: {
              data?: unknown[];
            };
            locale?: string;
          };
        };
      };
      /** Format: float */
      price: number;
      tailor?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      detail_list_item?: components["schemas"]["ProductDetailListItemComponent"][];
      /** Format: float */
      rating?: number;
      favourite_products?: {
        data?: {
            id?: number;
            attributes?: Record<string, never>;
          }[];
      };
      slug?: string;
      customizable?: boolean;
      fabrics?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      localizations?: {
        data?: components["schemas"]["Mekhwar"][];
      };
      locale?: string;
    };
    MekhwarResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["Mekhwar"];
    };
    MekhwarResponse: {
      data?: components["schemas"]["MekhwarResponseDataObject"];
      meta?: Record<string, never>;
    };
    ProductDetailListItemComponent: {
      id?: number;
      __component?: string;
      title?: string;
    };
    OrderRequest: {
      data: {
        ref?: string;
        /** @example string or id */
        customer_address?: number | string;
        /** @example string or id */
        users_permissions_user?: number | string;
        paid?: boolean;
        /** Format: float */
        tax?: number;
        /** Format: float */
        discount?: number;
        /** Format: float */
        total?: number;
        /** Format: float */
        delivery_charge?: number;
        custom?: components["schemas"]["OrdeCustomerComponent"][];
        delivery_note?: string;
        /** @enum {string} */
        status?: "PLACED" | "SEWING" | "ON THE WAY" | "DELIVERED" | "CANCELLED";
        /** @enum {string} */
        size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";
      };
    };
    OrderListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["Order"];
    };
    OrderListResponse: {
      data?: components["schemas"]["OrderListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    Order: {
      ref?: string;
      customer_address?: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            country?: string;
            city?: string;
            street?: string;
            building?: string;
            address?: string;
            flat?: string;
            mobile?: string;
            user?: {
              data?: {
                id?: number;
                attributes?: {
                  username?: string;
                  /** Format: email */
                  email?: string;
                  provider?: string;
                  resetPasswordToken?: string;
                  confirmationToken?: string;
                  confirmed?: boolean;
                  blocked?: boolean;
                  role?: {
                    data?: {
                      id?: number;
                      attributes?: {
                        name?: string;
                        description?: string;
                        type?: string;
                        permissions?: {
                          data?: {
                              id?: number;
                              attributes?: {
                                action?: string;
                                role?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                createdBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: {
                                      firstname?: string;
                                      lastname?: string;
                                      username?: string;
                                      /** Format: email */
                                      email?: string;
                                      resetPasswordToken?: string;
                                      registrationToken?: string;
                                      isActive?: boolean;
                                      roles?: {
                                        data?: {
                                            id?: number;
                                            attributes?: {
                                              name?: string;
                                              code?: string;
                                              description?: string;
                                              users?: {
                                                data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  }[];
                                              };
                                              permissions?: {
                                                data?: {
                                                    id?: number;
                                                    attributes?: {
                                                      action?: string;
                                                      actionParameters?: unknown;
                                                      subject?: string;
                                                      properties?: unknown;
                                                      conditions?: unknown;
                                                      role?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                      /** Format: date-time */
                                                      createdAt?: string;
                                                      /** Format: date-time */
                                                      updatedAt?: string;
                                                      createdBy?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                      updatedBy?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                    };
                                                  }[];
                                              };
                                              /** Format: date-time */
                                              createdAt?: string;
                                              /** Format: date-time */
                                              updatedAt?: string;
                                              createdBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                              updatedBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                            };
                                          }[];
                                      };
                                      blocked?: boolean;
                                      preferedLanguage?: string;
                                      /** Format: date-time */
                                      createdAt?: string;
                                      /** Format: date-time */
                                      updatedAt?: string;
                                      createdBy?: {
                                        data?: {
                                          id?: number;
                                          attributes?: Record<string, never>;
                                        };
                                      };
                                      updatedBy?: {
                                        data?: {
                                          id?: number;
                                          attributes?: Record<string, never>;
                                        };
                                      };
                                    };
                                  };
                                };
                                updatedBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                              };
                            }[];
                        };
                        users?: {
                          data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            }[];
                        };
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        createdBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        updatedBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                      };
                    };
                  };
                  phone?: string;
                  name?: string;
                  size_profiles?: {
                    data?: {
                        id?: number;
                        attributes?: {
                          title?: string;
                          /** Format: float */
                          shoulder?: number;
                          /** Format: float */
                          bust?: number;
                          /** Format: float */
                          arm_length?: number;
                          /** Format: float */
                          wrist?: number;
                          /** Format: float */
                          top_length?: number;
                          /** Format: float */
                          top_width?: number;
                          users_permissions_user?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          cup?: string;
                          /** Format: float */
                          chest_point?: number;
                          /** Format: float */
                          neck?: number;
                          /** Format: float */
                          hips?: number;
                          /** Format: float */
                          height?: number;
                          /** Format: float */
                          arm_width?: number;
                          /** Format: float */
                          sleeves_length?: number;
                          wrist_style?: string;
                          neck_style?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          /** Format: date-time */
                          publishedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      }[];
                  };
                  cart?: {
                    data?: {
                      id?: number;
                      attributes?: {
                        user?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        custom?: ({
                            id?: number;
                            size_profile?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            quantity?: number;
                            /** Format: float */
                            shoulder?: number;
                            /** Format: float */
                            bust?: number;
                            /** Format: float */
                            wrist?: number;
                            save_size_profile?: boolean;
                            /** @enum {string} */
                            size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";
                            customer_instructions?: string;
                            chest_point?: string;
                            cup?: string;
                            /** Format: float */
                            arm_width?: number;
                            /** Format: float */
                            height?: number;
                            /** Format: float */
                            sleeves_length?: number;
                            /** Format: float */
                            neck?: number;
                            /** Format: float */
                            hips?: number;
                            mekhwar?: {
                              data?: {
                                id?: number;
                                attributes?: {
                                  title?: string;
                                  description?: string;
                                  main_image?: {
                                    data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        alternativeText?: string;
                                        caption?: string;
                                        width?: number;
                                        height?: number;
                                        formats?: unknown;
                                        hash?: string;
                                        ext?: string;
                                        mime?: string;
                                        /** Format: float */
                                        size?: number;
                                        url?: string;
                                        previewUrl?: string;
                                        provider?: string;
                                        provider_metadata?: unknown;
                                        related?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        folder?: {
                                          data?: {
                                            id?: number;
                                            attributes?: {
                                              name?: string;
                                              pathId?: number;
                                              parent?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                              children?: {
                                                data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  }[];
                                              };
                                              files?: {
                                                data?: {
                                                    id?: number;
                                                    attributes?: {
                                                      name?: string;
                                                      alternativeText?: string;
                                                      caption?: string;
                                                      width?: number;
                                                      height?: number;
                                                      formats?: unknown;
                                                      hash?: string;
                                                      ext?: string;
                                                      mime?: string;
                                                      /** Format: float */
                                                      size?: number;
                                                      url?: string;
                                                      previewUrl?: string;
                                                      provider?: string;
                                                      provider_metadata?: unknown;
                                                      related?: {
                                                        data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          }[];
                                                      };
                                                      folder?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                      folderPath?: string;
                                                      /** Format: date-time */
                                                      createdAt?: string;
                                                      /** Format: date-time */
                                                      updatedAt?: string;
                                                      createdBy?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                      updatedBy?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                    };
                                                  }[];
                                              };
                                              path?: string;
                                              /** Format: date-time */
                                              createdAt?: string;
                                              /** Format: date-time */
                                              updatedAt?: string;
                                              createdBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                              updatedBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                            };
                                          };
                                        };
                                        folderPath?: string;
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    };
                                  };
                                  images?: {
                                    data?: {
                                        id?: number;
                                        attributes?: {
                                          name?: string;
                                          alternativeText?: string;
                                          caption?: string;
                                          width?: number;
                                          height?: number;
                                          formats?: unknown;
                                          hash?: string;
                                          ext?: string;
                                          mime?: string;
                                          /** Format: float */
                                          size?: number;
                                          url?: string;
                                          previewUrl?: string;
                                          provider?: string;
                                          provider_metadata?: unknown;
                                          related?: {
                                            data?: {
                                                id?: number;
                                                attributes?: Record<string, never>;
                                              }[];
                                          };
                                          folder?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          folderPath?: string;
                                          /** Format: date-time */
                                          createdAt?: string;
                                          /** Format: date-time */
                                          updatedAt?: string;
                                          createdBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          updatedBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                        };
                                      }[];
                                  };
                                  category?: {
                                    data?: {
                                      id?: number;
                                      attributes?: {
                                        Name?: string;
                                        Image?: {
                                          data?: {
                                            id?: number;
                                            attributes?: {
                                              name?: string;
                                              alternativeText?: string;
                                              caption?: string;
                                              width?: number;
                                              height?: number;
                                              formats?: unknown;
                                              hash?: string;
                                              ext?: string;
                                              mime?: string;
                                              /** Format: float */
                                              size?: number;
                                              url?: string;
                                              previewUrl?: string;
                                              provider?: string;
                                              provider_metadata?: unknown;
                                              related?: {
                                                data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  }[];
                                              };
                                              folder?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                              folderPath?: string;
                                              /** Format: date-time */
                                              createdAt?: string;
                                              /** Format: date-time */
                                              updatedAt?: string;
                                              createdBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                              updatedBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                            };
                                          };
                                        };
                                        mekhwars?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        tailor?: {
                                          data?: {
                                            id?: number;
                                            attributes?: {
                                              name?: string;
                                              location?: string;
                                              description?: string;
                                              image?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: {
                                                    name?: string;
                                                    alternativeText?: string;
                                                    caption?: string;
                                                    width?: number;
                                                    height?: number;
                                                    formats?: unknown;
                                                    hash?: string;
                                                    ext?: string;
                                                    mime?: string;
                                                    /** Format: float */
                                                    size?: number;
                                                    url?: string;
                                                    previewUrl?: string;
                                                    provider?: string;
                                                    provider_metadata?: unknown;
                                                    related?: {
                                                      data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        }[];
                                                    };
                                                    folder?: {
                                                      data?: {
                                                        id?: number;
                                                        attributes?: Record<string, never>;
                                                      };
                                                    };
                                                    folderPath?: string;
                                                    /** Format: date-time */
                                                    createdAt?: string;
                                                    /** Format: date-time */
                                                    updatedAt?: string;
                                                    createdBy?: {
                                                      data?: {
                                                        id?: number;
                                                        attributes?: Record<string, never>;
                                                      };
                                                    };
                                                    updatedBy?: {
                                                      data?: {
                                                        id?: number;
                                                        attributes?: Record<string, never>;
                                                      };
                                                    };
                                                  };
                                                };
                                              };
                                              background?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: {
                                                    name?: string;
                                                    alternativeText?: string;
                                                    caption?: string;
                                                    width?: number;
                                                    height?: number;
                                                    formats?: unknown;
                                                    hash?: string;
                                                    ext?: string;
                                                    mime?: string;
                                                    /** Format: float */
                                                    size?: number;
                                                    url?: string;
                                                    previewUrl?: string;
                                                    provider?: string;
                                                    provider_metadata?: unknown;
                                                    related?: {
                                                      data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        }[];
                                                    };
                                                    folder?: {
                                                      data?: {
                                                        id?: number;
                                                        attributes?: Record<string, never>;
                                                      };
                                                    };
                                                    folderPath?: string;
                                                    /** Format: date-time */
                                                    createdAt?: string;
                                                    /** Format: date-time */
                                                    updatedAt?: string;
                                                    createdBy?: {
                                                      data?: {
                                                        id?: number;
                                                        attributes?: Record<string, never>;
                                                      };
                                                    };
                                                    updatedBy?: {
                                                      data?: {
                                                        id?: number;
                                                        attributes?: Record<string, never>;
                                                      };
                                                    };
                                                  };
                                                };
                                              };
                                              /** Format: date */
                                              date_joined?: string;
                                              designs?: {
                                                data?: {
                                                    id?: number;
                                                    attributes?: {
                                                      name?: string;
                                                      tailor?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                      image?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: {
                                                            name?: string;
                                                            alternativeText?: string;
                                                            caption?: string;
                                                            width?: number;
                                                            height?: number;
                                                            formats?: unknown;
                                                            hash?: string;
                                                            ext?: string;
                                                            mime?: string;
                                                            /** Format: float */
                                                            size?: number;
                                                            url?: string;
                                                            previewUrl?: string;
                                                            provider?: string;
                                                            provider_metadata?: unknown;
                                                            related?: {
                                                              data?: {
                                                                  id?: number;
                                                                  attributes?: Record<string, never>;
                                                                }[];
                                                            };
                                                            folder?: {
                                                              data?: {
                                                                id?: number;
                                                                attributes?: Record<string, never>;
                                                              };
                                                            };
                                                            folderPath?: string;
                                                            /** Format: date-time */
                                                            createdAt?: string;
                                                            /** Format: date-time */
                                                            updatedAt?: string;
                                                            createdBy?: {
                                                              data?: {
                                                                id?: number;
                                                                attributes?: Record<string, never>;
                                                              };
                                                            };
                                                            updatedBy?: {
                                                              data?: {
                                                                id?: number;
                                                                attributes?: Record<string, never>;
                                                              };
                                                            };
                                                          };
                                                        };
                                                      };
                                                      /** Format: float */
                                                      price?: number;
                                                      /** Format: float */
                                                      rating?: number;
                                                      description?: string;
                                                      sizes?: {
                                                          id?: number;
                                                          __component?: string;
                                                          name?: string;
                                                          shoulder?: number;
                                                          writst?: number;
                                                          top_width?: number;
                                                          bust?: number;
                                                          top_length?: number;
                                                          arm_length?: number;
                                                        }[];
                                                      /** Format: date-time */
                                                      createdAt?: string;
                                                      /** Format: date-time */
                                                      updatedAt?: string;
                                                      /** Format: date-time */
                                                      publishedAt?: string;
                                                      createdBy?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                      updatedBy?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                    };
                                                  }[];
                                              };
                                              experience?: string;
                                              style?: string;
                                              philosophy?: string;
                                              mekhwars?: {
                                                data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  }[];
                                              };
                                              category?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                              fabrics?: {
                                                data?: {
                                                    id?: number;
                                                    attributes?: {
                                                      name?: string;
                                                      /** Format: float */
                                                      price?: number;
                                                      description?: string;
                                                      main_image?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: {
                                                            name?: string;
                                                            alternativeText?: string;
                                                            caption?: string;
                                                            width?: number;
                                                            height?: number;
                                                            formats?: unknown;
                                                            hash?: string;
                                                            ext?: string;
                                                            mime?: string;
                                                            /** Format: float */
                                                            size?: number;
                                                            url?: string;
                                                            previewUrl?: string;
                                                            provider?: string;
                                                            provider_metadata?: unknown;
                                                            related?: {
                                                              data?: {
                                                                  id?: number;
                                                                  attributes?: Record<string, never>;
                                                                }[];
                                                            };
                                                            folder?: {
                                                              data?: {
                                                                id?: number;
                                                                attributes?: Record<string, never>;
                                                              };
                                                            };
                                                            folderPath?: string;
                                                            /** Format: date-time */
                                                            createdAt?: string;
                                                            /** Format: date-time */
                                                            updatedAt?: string;
                                                            createdBy?: {
                                                              data?: {
                                                                id?: number;
                                                                attributes?: Record<string, never>;
                                                              };
                                                            };
                                                            updatedBy?: {
                                                              data?: {
                                                                id?: number;
                                                                attributes?: Record<string, never>;
                                                              };
                                                            };
                                                          };
                                                        };
                                                      };
                                                      images?: {
                                                        data?: {
                                                            id?: number;
                                                            attributes?: {
                                                              name?: string;
                                                              alternativeText?: string;
                                                              caption?: string;
                                                              width?: number;
                                                              height?: number;
                                                              formats?: unknown;
                                                              hash?: string;
                                                              ext?: string;
                                                              mime?: string;
                                                              /** Format: float */
                                                              size?: number;
                                                              url?: string;
                                                              previewUrl?: string;
                                                              provider?: string;
                                                              provider_metadata?: unknown;
                                                              related?: {
                                                                data?: {
                                                                    id?: number;
                                                                    attributes?: Record<string, never>;
                                                                  }[];
                                                              };
                                                              folder?: {
                                                                data?: {
                                                                  id?: number;
                                                                  attributes?: Record<string, never>;
                                                                };
                                                              };
                                                              folderPath?: string;
                                                              /** Format: date-time */
                                                              createdAt?: string;
                                                              /** Format: date-time */
                                                              updatedAt?: string;
                                                              createdBy?: {
                                                                data?: {
                                                                  id?: number;
                                                                  attributes?: Record<string, never>;
                                                                };
                                                              };
                                                              updatedBy?: {
                                                                data?: {
                                                                  id?: number;
                                                                  attributes?: Record<string, never>;
                                                                };
                                                              };
                                                            };
                                                          }[];
                                                      };
                                                      category?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: {
                                                            name?: string;
                                                            Thumbnail?: {
                                                              data?: {
                                                                id?: number;
                                                                attributes?: {
                                                                  name?: string;
                                                                  alternativeText?: string;
                                                                  caption?: string;
                                                                  width?: number;
                                                                  height?: number;
                                                                  formats?: unknown;
                                                                  hash?: string;
                                                                  ext?: string;
                                                                  mime?: string;
                                                                  /** Format: float */
                                                                  size?: number;
                                                                  url?: string;
                                                                  previewUrl?: string;
                                                                  provider?: string;
                                                                  provider_metadata?: unknown;
                                                                  related?: {
                                                                    data?: {
                                                                        id?: number;
                                                                        attributes?: Record<string, never>;
                                                                      }[];
                                                                  };
                                                                  folder?: {
                                                                    data?: {
                                                                      id?: number;
                                                                      attributes?: Record<string, never>;
                                                                    };
                                                                  };
                                                                  folderPath?: string;
                                                                  /** Format: date-time */
                                                                  createdAt?: string;
                                                                  /** Format: date-time */
                                                                  updatedAt?: string;
                                                                  createdBy?: {
                                                                    data?: {
                                                                      id?: number;
                                                                      attributes?: Record<string, never>;
                                                                    };
                                                                  };
                                                                  updatedBy?: {
                                                                    data?: {
                                                                      id?: number;
                                                                      attributes?: Record<string, never>;
                                                                    };
                                                                  };
                                                                };
                                                              };
                                                            };
                                                            fabrics?: {
                                                              data?: {
                                                                  id?: number;
                                                                  attributes?: Record<string, never>;
                                                                }[];
                                                            };
                                                            /** Format: date-time */
                                                            createdAt?: string;
                                                            /** Format: date-time */
                                                            updatedAt?: string;
                                                            /** Format: date-time */
                                                            publishedAt?: string;
                                                            createdBy?: {
                                                              data?: {
                                                                id?: number;
                                                                attributes?: Record<string, never>;
                                                              };
                                                            };
                                                            updatedBy?: {
                                                              data?: {
                                                                id?: number;
                                                                attributes?: Record<string, never>;
                                                              };
                                                            };
                                                            localizations?: {
                                                              data?: unknown[];
                                                            };
                                                            locale?: string;
                                                          };
                                                        };
                                                      };
                                                      detail_list_item?: {
                                                          id?: number;
                                                          title?: string;
                                                        }[];
                                                      fabric_pattern?: {
                                                          id?: number;
                                                          title?: string;
                                                          /** Format: float */
                                                          price?: number;
                                                          image?: {
                                                            data?: {
                                                              id?: number;
                                                              attributes?: {
                                                                name?: string;
                                                                alternativeText?: string;
                                                                caption?: string;
                                                                width?: number;
                                                                height?: number;
                                                                formats?: unknown;
                                                                hash?: string;
                                                                ext?: string;
                                                                mime?: string;
                                                                /** Format: float */
                                                                size?: number;
                                                                url?: string;
                                                                previewUrl?: string;
                                                                provider?: string;
                                                                provider_metadata?: unknown;
                                                                related?: {
                                                                  data?: {
                                                                      id?: number;
                                                                      attributes?: Record<string, never>;
                                                                    }[];
                                                                };
                                                                folder?: {
                                                                  data?: {
                                                                    id?: number;
                                                                    attributes?: Record<string, never>;
                                                                  };
                                                                };
                                                                folderPath?: string;
                                                                /** Format: date-time */
                                                                createdAt?: string;
                                                                /** Format: date-time */
                                                                updatedAt?: string;
                                                                createdBy?: {
                                                                  data?: {
                                                                    id?: number;
                                                                    attributes?: Record<string, never>;
                                                                  };
                                                                };
                                                                updatedBy?: {
                                                                  data?: {
                                                                    id?: number;
                                                                    attributes?: Record<string, never>;
                                                                  };
                                                                };
                                                              };
                                                            };
                                                          };
                                                        }[];
                                                      /** Format: date-time */
                                                      createdAt?: string;
                                                      /** Format: date-time */
                                                      updatedAt?: string;
                                                      /** Format: date-time */
                                                      publishedAt?: string;
                                                      createdBy?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                      updatedBy?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                      localizations?: {
                                                        data?: unknown[];
                                                      };
                                                      locale?: string;
                                                    };
                                                  }[];
                                              };
                                              /** Format: float */
                                              rating?: number;
                                              tags?: string;
                                              /** Format: date-time */
                                              createdAt?: string;
                                              /** Format: date-time */
                                              updatedAt?: string;
                                              /** Format: date-time */
                                              publishedAt?: string;
                                              createdBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                              updatedBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                              localizations?: {
                                                data?: unknown[];
                                              };
                                              locale?: string;
                                            };
                                          };
                                        };
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        /** Format: date-time */
                                        publishedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        localizations?: {
                                          data?: unknown[];
                                        };
                                        locale?: string;
                                      };
                                    };
                                  };
                                  /** Format: float */
                                  price?: number;
                                  tailor?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  detail_list_item?: {
                                      id?: number;
                                      __component?: string;
                                      title?: string;
                                    }[];
                                  /** Format: float */
                                  rating?: number;
                                  favourite_products?: {
                                    data?: {
                                        id?: number;
                                        attributes?: {
                                          mekhwar?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          user?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          /** Format: date-time */
                                          createdAt?: string;
                                          /** Format: date-time */
                                          updatedAt?: string;
                                          /** Format: date-time */
                                          publishedAt?: string;
                                          createdBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          updatedBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                        };
                                      }[];
                                  };
                                  slug?: string;
                                  customizable?: boolean;
                                  fabrics?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  /** Format: date-time */
                                  createdAt?: string;
                                  /** Format: date-time */
                                  updatedAt?: string;
                                  /** Format: date-time */
                                  publishedAt?: string;
                                  createdBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  updatedBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  localizations?: {
                                    data?: unknown[];
                                  };
                                  locale?: string;
                                };
                              };
                            };
                          })[];
                        /** @enum {string} */
                        status?: "PENDING" | "PLACED" | "ON THE WAY" | "DELIVERED" | "CANCELLED" | "REFUNDED";
                        cancel_reason?: string;
                        /** Format: date */
                        cancel_date?: string;
                        /** @enum {string} */
                        size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";
                        /** Format: date-time */
                        createdAt?: string;
                        /** Format: date-time */
                        updatedAt?: string;
                        /** Format: date-time */
                        publishedAt?: string;
                        createdBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                        updatedBy?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                      };
                    };
                  };
                  addresses?: {
                    data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      }[];
                  };
                  orders?: {
                    data?: ({
                        id?: number;
                        attributes?: {
                          ref?: string;
                          customer_address?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          users_permissions_user?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          paid?: boolean;
                          /** Format: float */
                          tax?: number;
                          /** Format: float */
                          discount?: number;
                          /** Format: float */
                          total?: number;
                          /** Format: float */
                          delivery_charge?: number;
                          custom?: {
                              id?: number;
                              quantity?: number;
                              /** Format: float */
                              bust?: number;
                              /** Format: float */
                              wrist?: number;
                              /** Format: float */
                              shoulder?: number;
                              cup?: string;
                              /** Format: float */
                              chest_point?: number;
                              /** Format: float */
                              neck?: number;
                              /** Format: float */
                              hips?: number;
                              /** Format: float */
                              height?: number;
                              /** Format: float */
                              arm_width?: number;
                              /** Format: float */
                              sleeves_length?: number;
                              wrist_style?: string;
                              neck_style?: string;
                              customer_instructions?: string;
                              color?: string;
                              mekhwar?: {
                                data?: {
                                  id?: number;
                                  attributes?: Record<string, never>;
                                };
                              };
                            }[];
                          delivery_note?: string;
                          /** @enum {string} */
                          status?: "PLACED" | "SEWING" | "ON THE WAY" | "DELIVERED" | "CANCELLED";
                          /** @enum {string} */
                          size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      })[];
                  };
                  custom_design_orders?: {
                    data?: ({
                        id?: number;
                        attributes?: {
                          design?: {
                            data?: {
                              id?: number;
                              attributes?: {
                                name?: string;
                                alternativeText?: string;
                                caption?: string;
                                width?: number;
                                height?: number;
                                formats?: unknown;
                                hash?: string;
                                ext?: string;
                                mime?: string;
                                /** Format: float */
                                size?: number;
                                url?: string;
                                previewUrl?: string;
                                provider?: string;
                                provider_metadata?: unknown;
                                related?: {
                                  data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    }[];
                                };
                                folder?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                folderPath?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                createdBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                updatedBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                              };
                            };
                          };
                          color?: string;
                          fabric?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          tailor?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          /** Format: float */
                          price?: number;
                          /** Format: float */
                          tax?: number;
                          /** Format: float */
                          delivery_charge?: number;
                          /** Format: float */
                          tailor_fee?: number;
                          /** @enum {string} */
                          status?: "PENDING" | "APPROVED" | "PROCESSING" | "REJECTED" | "CANCELLED" | "ON THE WAY" | "DELIVERED";
                          style?: unknown;
                          size_profile?: {
                            id?: number;
                            /** Format: float */
                            shoulder?: number;
                            /** Format: float */
                            bust?: number;
                            /** Format: float */
                            arm_length?: number;
                            /** Format: float */
                            wrist?: number;
                            /** Format: float */
                            top_length?: number;
                            /** Format: float */
                            top_width?: number;
                            cup?: string;
                            /** Format: float */
                            chest_point?: number;
                            /** Format: float */
                            neck?: number;
                            /** Format: float */
                            hips?: number;
                            /** Format: float */
                            height?: number;
                            /** Format: float */
                            sleeves_length?: number;
                            wrist_style?: string;
                            neck_style?: string;
                            /** Format: float */
                            arm_width?: number;
                          };
                          /** @enum {string} */
                          size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL" | "CUSTOM";
                          user?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          address?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          customer_instructions?: string;
                          design2?: {
                            data?: {
                              id?: number;
                              attributes?: {
                                name?: string;
                                alternativeText?: string;
                                caption?: string;
                                width?: number;
                                height?: number;
                                formats?: unknown;
                                hash?: string;
                                ext?: string;
                                mime?: string;
                                /** Format: float */
                                size?: number;
                                url?: string;
                                previewUrl?: string;
                                provider?: string;
                                provider_metadata?: unknown;
                                related?: {
                                  data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    }[];
                                };
                                folder?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                folderPath?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                createdBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                updatedBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                              };
                            };
                          };
                          design3?: {
                            data?: {
                              id?: number;
                              attributes?: {
                                name?: string;
                                alternativeText?: string;
                                caption?: string;
                                width?: number;
                                height?: number;
                                formats?: unknown;
                                hash?: string;
                                ext?: string;
                                mime?: string;
                                /** Format: float */
                                size?: number;
                                url?: string;
                                previewUrl?: string;
                                provider?: string;
                                provider_metadata?: unknown;
                                related?: {
                                  data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    }[];
                                };
                                folder?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                folderPath?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                createdBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                updatedBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                              };
                            };
                          };
                          design4?: {
                            data?: {
                              id?: number;
                              attributes?: {
                                name?: string;
                                alternativeText?: string;
                                caption?: string;
                                width?: number;
                                height?: number;
                                formats?: unknown;
                                hash?: string;
                                ext?: string;
                                mime?: string;
                                /** Format: float */
                                size?: number;
                                url?: string;
                                previewUrl?: string;
                                provider?: string;
                                provider_metadata?: unknown;
                                related?: {
                                  data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    }[];
                                };
                                folder?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                folderPath?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                createdBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                updatedBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                              };
                            };
                          };
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          /** Format: date-time */
                          publishedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      })[];
                  };
                  favourite_products?: {
                    data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      }[];
                  };
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              };
            };
            /** @enum {string} */
            type?: "home" | "office" | "gym" | "work";
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            publishedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      users_permissions_user?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      paid?: boolean;
      /** Format: float */
      tax?: number;
      /** Format: float */
      discount?: number;
      /** Format: float */
      total?: number;
      /** Format: float */
      delivery_charge?: number;
      custom?: components["schemas"]["OrdeCustomerComponent"][];
      delivery_note?: string;
      /** @enum {string} */
      status?: "PLACED" | "SEWING" | "ON THE WAY" | "DELIVERED" | "CANCELLED";
      /** @enum {string} */
      size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
    };
    OrderResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["Order"];
    };
    OrderResponse: {
      data?: components["schemas"]["OrderResponseDataObject"];
      meta?: Record<string, never>;
    };
    OrdeCustomerComponent: {
      id?: number;
      quantity?: number;
      /** Format: float */
      bust?: number;
      /** Format: float */
      wrist?: number;
      /** Format: float */
      shoulder?: number;
      cup?: string;
      /** Format: float */
      chest_point?: number;
      /** Format: float */
      neck?: number;
      /** Format: float */
      hips?: number;
      /** Format: float */
      height?: number;
      /** Format: float */
      arm_width?: number;
      /** Format: float */
      sleeves_length?: number;
      wrist_style?: string;
      neck_style?: string;
      customer_instructions?: string;
      color?: string;
      mekhwar?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
    };
    PrivacyPolicyLocalizationRequest: {
      /** Format: float */
      version?: number;
      value?: string;
      locale: string;
    };
    PrivacyPolicyRequest: {
      data: {
        /** Format: float */
        version?: number;
        value?: string;
        locale?: string;
      };
    };
    PrivacyPolicyResponseDataObjectLocalized: {
      id?: number;
      attributes?: components["schemas"]["PrivacyPolicy"];
    };
    PrivacyPolicyLocalizationResponse: {
      data?: components["schemas"]["PrivacyPolicyResponseDataObjectLocalized"];
      meta?: Record<string, never>;
    };
    PrivacyPolicyListResponseDataItemLocalized: {
      id?: number;
      attributes?: components["schemas"]["PrivacyPolicy"];
    };
    PrivacyPolicyLocalizationListResponse: {
      data?: components["schemas"]["PrivacyPolicyListResponseDataItemLocalized"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    PrivacyPolicyListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["PrivacyPolicy"];
    };
    PrivacyPolicyListResponse: {
      data?: components["schemas"]["PrivacyPolicyListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    PrivacyPolicy: {
      /** Format: float */
      version?: number;
      value?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: {
            firstname?: string;
            lastname?: string;
            username?: string;
            /** Format: email */
            email?: string;
            resetPasswordToken?: string;
            registrationToken?: string;
            isActive?: boolean;
            roles?: {
              data?: {
                  id?: number;
                  attributes?: {
                    name?: string;
                    code?: string;
                    description?: string;
                    users?: {
                      data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        }[];
                    };
                    permissions?: {
                      data?: {
                          id?: number;
                          attributes?: {
                            action?: string;
                            actionParameters?: unknown;
                            subject?: string;
                            properties?: unknown;
                            conditions?: unknown;
                            role?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                          };
                        }[];
                    };
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                  };
                }[];
            };
            blocked?: boolean;
            preferedLanguage?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      localizations?: {
        data?: components["schemas"]["PrivacyPolicy"][];
      };
      locale?: string;
    };
    PrivacyPolicyResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["PrivacyPolicy"];
    };
    PrivacyPolicyResponse: {
      data?: components["schemas"]["PrivacyPolicyResponseDataObject"];
      meta?: Record<string, never>;
    };
    PurchasePolicyLocalizationRequest: {
      /** Format: float */
      version?: number;
      value?: string;
      locale: string;
    };
    PurchasePolicyRequest: {
      data: {
        /** Format: float */
        version?: number;
        value?: string;
        locale?: string;
      };
    };
    PurchasePolicyResponseDataObjectLocalized: {
      id?: number;
      attributes?: components["schemas"]["PurchasePolicy"];
    };
    PurchasePolicyLocalizationResponse: {
      data?: components["schemas"]["PurchasePolicyResponseDataObjectLocalized"];
      meta?: Record<string, never>;
    };
    PurchasePolicyListResponseDataItemLocalized: {
      id?: number;
      attributes?: components["schemas"]["PurchasePolicy"];
    };
    PurchasePolicyLocalizationListResponse: {
      data?: components["schemas"]["PurchasePolicyListResponseDataItemLocalized"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    PurchasePolicyListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["PurchasePolicy"];
    };
    PurchasePolicyListResponse: {
      data?: components["schemas"]["PurchasePolicyListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    PurchasePolicy: {
      /** Format: float */
      version?: number;
      value?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: {
            firstname?: string;
            lastname?: string;
            username?: string;
            /** Format: email */
            email?: string;
            resetPasswordToken?: string;
            registrationToken?: string;
            isActive?: boolean;
            roles?: {
              data?: {
                  id?: number;
                  attributes?: {
                    name?: string;
                    code?: string;
                    description?: string;
                    users?: {
                      data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        }[];
                    };
                    permissions?: {
                      data?: {
                          id?: number;
                          attributes?: {
                            action?: string;
                            actionParameters?: unknown;
                            subject?: string;
                            properties?: unknown;
                            conditions?: unknown;
                            role?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                          };
                        }[];
                    };
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                  };
                }[];
            };
            blocked?: boolean;
            preferedLanguage?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      localizations?: {
        data?: components["schemas"]["PurchasePolicy"][];
      };
      locale?: string;
    };
    PurchasePolicyResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["PurchasePolicy"];
    };
    PurchasePolicyResponse: {
      data?: components["schemas"]["PurchasePolicyResponseDataObject"];
      meta?: Record<string, never>;
    };
    SiteConfigRequest: {
      data: {
        /** Format: float */
        tax?: number;
        /** Format: float */
        delivery_charge?: number;
        delivery_note?: string;
        /** Format: email */
        contact_email?: string;
        whatsapp_number_for_custom_design?: string;
      };
    };
    SiteConfigListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["SiteConfig"];
    };
    SiteConfigListResponse: {
      data?: components["schemas"]["SiteConfigListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    SiteConfig: {
      /** Format: float */
      tax?: number;
      /** Format: float */
      delivery_charge?: number;
      delivery_note?: string;
      /** Format: email */
      contact_email?: string;
      whatsapp_number_for_custom_design?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: {
            firstname?: string;
            lastname?: string;
            username?: string;
            /** Format: email */
            email?: string;
            resetPasswordToken?: string;
            registrationToken?: string;
            isActive?: boolean;
            roles?: {
              data?: {
                  id?: number;
                  attributes?: {
                    name?: string;
                    code?: string;
                    description?: string;
                    users?: {
                      data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        }[];
                    };
                    permissions?: {
                      data?: {
                          id?: number;
                          attributes?: {
                            action?: string;
                            actionParameters?: unknown;
                            subject?: string;
                            properties?: unknown;
                            conditions?: unknown;
                            role?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                          };
                        }[];
                    };
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                  };
                }[];
            };
            blocked?: boolean;
            preferedLanguage?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
    };
    SiteConfigResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["SiteConfig"];
    };
    SiteConfigResponse: {
      data?: components["schemas"]["SiteConfigResponseDataObject"];
      meta?: Record<string, never>;
    };
    SizeProfileRequest: {
      data: {
        title?: string;
        /** Format: float */
        shoulder?: number;
        /** Format: float */
        bust?: number;
        /** Format: float */
        arm_length?: number;
        /** Format: float */
        wrist?: number;
        /** Format: float */
        top_length?: number;
        /** Format: float */
        top_width?: number;
        /** @example string or id */
        users_permissions_user?: number | string;
        cup?: string;
        /** Format: float */
        chest_point?: number;
        /** Format: float */
        neck?: number;
        /** Format: float */
        hips?: number;
        /** Format: float */
        height?: number;
        /** Format: float */
        arm_width?: number;
        /** Format: float */
        sleeves_length?: number;
        wrist_style?: string;
        neck_style?: string;
      };
    };
    SizeProfileListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["SizeProfile"];
    };
    SizeProfileListResponse: {
      data?: components["schemas"]["SizeProfileListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    SizeProfile: {
      title?: string;
      /** Format: float */
      shoulder?: number;
      /** Format: float */
      bust?: number;
      /** Format: float */
      arm_length?: number;
      /** Format: float */
      wrist?: number;
      /** Format: float */
      top_length?: number;
      /** Format: float */
      top_width?: number;
      users_permissions_user?: {
        data?: {
          id?: number;
          attributes?: {
            username?: string;
            /** Format: email */
            email?: string;
            provider?: string;
            resetPasswordToken?: string;
            confirmationToken?: string;
            confirmed?: boolean;
            blocked?: boolean;
            role?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  description?: string;
                  type?: string;
                  permissions?: {
                    data?: {
                        id?: number;
                        attributes?: {
                          action?: string;
                          role?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: {
                                firstname?: string;
                                lastname?: string;
                                username?: string;
                                /** Format: email */
                                email?: string;
                                resetPasswordToken?: string;
                                registrationToken?: string;
                                isActive?: boolean;
                                roles?: {
                                  data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        code?: string;
                                        description?: string;
                                        users?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        permissions?: {
                                          data?: {
                                              id?: number;
                                              attributes?: {
                                                action?: string;
                                                actionParameters?: unknown;
                                                subject?: string;
                                                properties?: unknown;
                                                conditions?: unknown;
                                                role?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                              };
                                            }[];
                                        };
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    }[];
                                };
                                blocked?: boolean;
                                preferedLanguage?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                createdBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                updatedBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                              };
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      }[];
                  };
                  users?: {
                    data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      }[];
                  };
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              };
            };
            phone?: string;
            name?: string;
            size_profiles?: {
              data?: {
                  id?: number;
                  attributes?: {
                    title?: string;
                    /** Format: float */
                    shoulder?: number;
                    /** Format: float */
                    bust?: number;
                    /** Format: float */
                    arm_length?: number;
                    /** Format: float */
                    wrist?: number;
                    /** Format: float */
                    top_length?: number;
                    /** Format: float */
                    top_width?: number;
                    users_permissions_user?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    cup?: string;
                    /** Format: float */
                    chest_point?: number;
                    /** Format: float */
                    neck?: number;
                    /** Format: float */
                    hips?: number;
                    /** Format: float */
                    height?: number;
                    /** Format: float */
                    arm_width?: number;
                    /** Format: float */
                    sleeves_length?: number;
                    wrist_style?: string;
                    neck_style?: string;
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    /** Format: date-time */
                    publishedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                  };
                }[];
            };
            cart?: {
              data?: {
                id?: number;
                attributes?: {
                  user?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  custom?: ({
                      id?: number;
                      size_profile?: {
                        data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        };
                      };
                      quantity?: number;
                      /** Format: float */
                      shoulder?: number;
                      /** Format: float */
                      bust?: number;
                      /** Format: float */
                      wrist?: number;
                      save_size_profile?: boolean;
                      /** @enum {string} */
                      size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";
                      customer_instructions?: string;
                      chest_point?: string;
                      cup?: string;
                      /** Format: float */
                      arm_width?: number;
                      /** Format: float */
                      height?: number;
                      /** Format: float */
                      sleeves_length?: number;
                      /** Format: float */
                      neck?: number;
                      /** Format: float */
                      hips?: number;
                      mekhwar?: {
                        data?: {
                          id?: number;
                          attributes?: {
                            title?: string;
                            description?: string;
                            main_image?: {
                              data?: {
                                id?: number;
                                attributes?: {
                                  name?: string;
                                  alternativeText?: string;
                                  caption?: string;
                                  width?: number;
                                  height?: number;
                                  formats?: unknown;
                                  hash?: string;
                                  ext?: string;
                                  mime?: string;
                                  /** Format: float */
                                  size?: number;
                                  url?: string;
                                  previewUrl?: string;
                                  provider?: string;
                                  provider_metadata?: unknown;
                                  related?: {
                                    data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      }[];
                                  };
                                  folder?: {
                                    data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        pathId?: number;
                                        parent?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        children?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        files?: {
                                          data?: {
                                              id?: number;
                                              attributes?: {
                                                name?: string;
                                                alternativeText?: string;
                                                caption?: string;
                                                width?: number;
                                                height?: number;
                                                formats?: unknown;
                                                hash?: string;
                                                ext?: string;
                                                mime?: string;
                                                /** Format: float */
                                                size?: number;
                                                url?: string;
                                                previewUrl?: string;
                                                provider?: string;
                                                provider_metadata?: unknown;
                                                related?: {
                                                  data?: {
                                                      id?: number;
                                                      attributes?: Record<string, never>;
                                                    }[];
                                                };
                                                folder?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                folderPath?: string;
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                              };
                                            }[];
                                        };
                                        path?: string;
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    };
                                  };
                                  folderPath?: string;
                                  /** Format: date-time */
                                  createdAt?: string;
                                  /** Format: date-time */
                                  updatedAt?: string;
                                  createdBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  updatedBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                };
                              };
                            };
                            images?: {
                              data?: {
                                  id?: number;
                                  attributes?: {
                                    name?: string;
                                    alternativeText?: string;
                                    caption?: string;
                                    width?: number;
                                    height?: number;
                                    formats?: unknown;
                                    hash?: string;
                                    ext?: string;
                                    mime?: string;
                                    /** Format: float */
                                    size?: number;
                                    url?: string;
                                    previewUrl?: string;
                                    provider?: string;
                                    provider_metadata?: unknown;
                                    related?: {
                                      data?: {
                                          id?: number;
                                          attributes?: Record<string, never>;
                                        }[];
                                    };
                                    folder?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    folderPath?: string;
                                    /** Format: date-time */
                                    createdAt?: string;
                                    /** Format: date-time */
                                    updatedAt?: string;
                                    createdBy?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    updatedBy?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                  };
                                }[];
                            };
                            category?: {
                              data?: {
                                id?: number;
                                attributes?: {
                                  Name?: string;
                                  Image?: {
                                    data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        alternativeText?: string;
                                        caption?: string;
                                        width?: number;
                                        height?: number;
                                        formats?: unknown;
                                        hash?: string;
                                        ext?: string;
                                        mime?: string;
                                        /** Format: float */
                                        size?: number;
                                        url?: string;
                                        previewUrl?: string;
                                        provider?: string;
                                        provider_metadata?: unknown;
                                        related?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        folder?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        folderPath?: string;
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    };
                                  };
                                  mekhwars?: {
                                    data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      }[];
                                  };
                                  tailor?: {
                                    data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        location?: string;
                                        description?: string;
                                        image?: {
                                          data?: {
                                            id?: number;
                                            attributes?: {
                                              name?: string;
                                              alternativeText?: string;
                                              caption?: string;
                                              width?: number;
                                              height?: number;
                                              formats?: unknown;
                                              hash?: string;
                                              ext?: string;
                                              mime?: string;
                                              /** Format: float */
                                              size?: number;
                                              url?: string;
                                              previewUrl?: string;
                                              provider?: string;
                                              provider_metadata?: unknown;
                                              related?: {
                                                data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  }[];
                                              };
                                              folder?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                              folderPath?: string;
                                              /** Format: date-time */
                                              createdAt?: string;
                                              /** Format: date-time */
                                              updatedAt?: string;
                                              createdBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                              updatedBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                            };
                                          };
                                        };
                                        background?: {
                                          data?: {
                                            id?: number;
                                            attributes?: {
                                              name?: string;
                                              alternativeText?: string;
                                              caption?: string;
                                              width?: number;
                                              height?: number;
                                              formats?: unknown;
                                              hash?: string;
                                              ext?: string;
                                              mime?: string;
                                              /** Format: float */
                                              size?: number;
                                              url?: string;
                                              previewUrl?: string;
                                              provider?: string;
                                              provider_metadata?: unknown;
                                              related?: {
                                                data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  }[];
                                              };
                                              folder?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                              folderPath?: string;
                                              /** Format: date-time */
                                              createdAt?: string;
                                              /** Format: date-time */
                                              updatedAt?: string;
                                              createdBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                              updatedBy?: {
                                                data?: {
                                                  id?: number;
                                                  attributes?: Record<string, never>;
                                                };
                                              };
                                            };
                                          };
                                        };
                                        /** Format: date */
                                        date_joined?: string;
                                        designs?: {
                                          data?: {
                                              id?: number;
                                              attributes?: {
                                                name?: string;
                                                tailor?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                image?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: {
                                                      name?: string;
                                                      alternativeText?: string;
                                                      caption?: string;
                                                      width?: number;
                                                      height?: number;
                                                      formats?: unknown;
                                                      hash?: string;
                                                      ext?: string;
                                                      mime?: string;
                                                      /** Format: float */
                                                      size?: number;
                                                      url?: string;
                                                      previewUrl?: string;
                                                      provider?: string;
                                                      provider_metadata?: unknown;
                                                      related?: {
                                                        data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          }[];
                                                      };
                                                      folder?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                      folderPath?: string;
                                                      /** Format: date-time */
                                                      createdAt?: string;
                                                      /** Format: date-time */
                                                      updatedAt?: string;
                                                      createdBy?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                      updatedBy?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                    };
                                                  };
                                                };
                                                /** Format: float */
                                                price?: number;
                                                /** Format: float */
                                                rating?: number;
                                                description?: string;
                                                sizes?: {
                                                    id?: number;
                                                    __component?: string;
                                                    name?: string;
                                                    shoulder?: number;
                                                    writst?: number;
                                                    top_width?: number;
                                                    bust?: number;
                                                    top_length?: number;
                                                    arm_length?: number;
                                                  }[];
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                /** Format: date-time */
                                                publishedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                              };
                                            }[];
                                        };
                                        experience?: string;
                                        style?: string;
                                        philosophy?: string;
                                        mekhwars?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        category?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        fabrics?: {
                                          data?: {
                                              id?: number;
                                              attributes?: {
                                                name?: string;
                                                /** Format: float */
                                                price?: number;
                                                description?: string;
                                                main_image?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: {
                                                      name?: string;
                                                      alternativeText?: string;
                                                      caption?: string;
                                                      width?: number;
                                                      height?: number;
                                                      formats?: unknown;
                                                      hash?: string;
                                                      ext?: string;
                                                      mime?: string;
                                                      /** Format: float */
                                                      size?: number;
                                                      url?: string;
                                                      previewUrl?: string;
                                                      provider?: string;
                                                      provider_metadata?: unknown;
                                                      related?: {
                                                        data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          }[];
                                                      };
                                                      folder?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                      folderPath?: string;
                                                      /** Format: date-time */
                                                      createdAt?: string;
                                                      /** Format: date-time */
                                                      updatedAt?: string;
                                                      createdBy?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                      updatedBy?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                    };
                                                  };
                                                };
                                                images?: {
                                                  data?: {
                                                      id?: number;
                                                      attributes?: {
                                                        name?: string;
                                                        alternativeText?: string;
                                                        caption?: string;
                                                        width?: number;
                                                        height?: number;
                                                        formats?: unknown;
                                                        hash?: string;
                                                        ext?: string;
                                                        mime?: string;
                                                        /** Format: float */
                                                        size?: number;
                                                        url?: string;
                                                        previewUrl?: string;
                                                        provider?: string;
                                                        provider_metadata?: unknown;
                                                        related?: {
                                                          data?: {
                                                              id?: number;
                                                              attributes?: Record<string, never>;
                                                            }[];
                                                        };
                                                        folder?: {
                                                          data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          };
                                                        };
                                                        folderPath?: string;
                                                        /** Format: date-time */
                                                        createdAt?: string;
                                                        /** Format: date-time */
                                                        updatedAt?: string;
                                                        createdBy?: {
                                                          data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          };
                                                        };
                                                        updatedBy?: {
                                                          data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          };
                                                        };
                                                      };
                                                    }[];
                                                };
                                                category?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: {
                                                      name?: string;
                                                      Thumbnail?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: {
                                                            name?: string;
                                                            alternativeText?: string;
                                                            caption?: string;
                                                            width?: number;
                                                            height?: number;
                                                            formats?: unknown;
                                                            hash?: string;
                                                            ext?: string;
                                                            mime?: string;
                                                            /** Format: float */
                                                            size?: number;
                                                            url?: string;
                                                            previewUrl?: string;
                                                            provider?: string;
                                                            provider_metadata?: unknown;
                                                            related?: {
                                                              data?: {
                                                                  id?: number;
                                                                  attributes?: Record<string, never>;
                                                                }[];
                                                            };
                                                            folder?: {
                                                              data?: {
                                                                id?: number;
                                                                attributes?: Record<string, never>;
                                                              };
                                                            };
                                                            folderPath?: string;
                                                            /** Format: date-time */
                                                            createdAt?: string;
                                                            /** Format: date-time */
                                                            updatedAt?: string;
                                                            createdBy?: {
                                                              data?: {
                                                                id?: number;
                                                                attributes?: Record<string, never>;
                                                              };
                                                            };
                                                            updatedBy?: {
                                                              data?: {
                                                                id?: number;
                                                                attributes?: Record<string, never>;
                                                              };
                                                            };
                                                          };
                                                        };
                                                      };
                                                      fabrics?: {
                                                        data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          }[];
                                                      };
                                                      /** Format: date-time */
                                                      createdAt?: string;
                                                      /** Format: date-time */
                                                      updatedAt?: string;
                                                      /** Format: date-time */
                                                      publishedAt?: string;
                                                      createdBy?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                      updatedBy?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                      localizations?: {
                                                        data?: unknown[];
                                                      };
                                                      locale?: string;
                                                    };
                                                  };
                                                };
                                                detail_list_item?: {
                                                    id?: number;
                                                    title?: string;
                                                  }[];
                                                fabric_pattern?: {
                                                    id?: number;
                                                    title?: string;
                                                    /** Format: float */
                                                    price?: number;
                                                    image?: {
                                                      data?: {
                                                        id?: number;
                                                        attributes?: {
                                                          name?: string;
                                                          alternativeText?: string;
                                                          caption?: string;
                                                          width?: number;
                                                          height?: number;
                                                          formats?: unknown;
                                                          hash?: string;
                                                          ext?: string;
                                                          mime?: string;
                                                          /** Format: float */
                                                          size?: number;
                                                          url?: string;
                                                          previewUrl?: string;
                                                          provider?: string;
                                                          provider_metadata?: unknown;
                                                          related?: {
                                                            data?: {
                                                                id?: number;
                                                                attributes?: Record<string, never>;
                                                              }[];
                                                          };
                                                          folder?: {
                                                            data?: {
                                                              id?: number;
                                                              attributes?: Record<string, never>;
                                                            };
                                                          };
                                                          folderPath?: string;
                                                          /** Format: date-time */
                                                          createdAt?: string;
                                                          /** Format: date-time */
                                                          updatedAt?: string;
                                                          createdBy?: {
                                                            data?: {
                                                              id?: number;
                                                              attributes?: Record<string, never>;
                                                            };
                                                          };
                                                          updatedBy?: {
                                                            data?: {
                                                              id?: number;
                                                              attributes?: Record<string, never>;
                                                            };
                                                          };
                                                        };
                                                      };
                                                    };
                                                  }[];
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                /** Format: date-time */
                                                publishedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                localizations?: {
                                                  data?: unknown[];
                                                };
                                                locale?: string;
                                              };
                                            }[];
                                        };
                                        /** Format: float */
                                        rating?: number;
                                        tags?: string;
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        /** Format: date-time */
                                        publishedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        localizations?: {
                                          data?: unknown[];
                                        };
                                        locale?: string;
                                      };
                                    };
                                  };
                                  /** Format: date-time */
                                  createdAt?: string;
                                  /** Format: date-time */
                                  updatedAt?: string;
                                  /** Format: date-time */
                                  publishedAt?: string;
                                  createdBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  updatedBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  localizations?: {
                                    data?: unknown[];
                                  };
                                  locale?: string;
                                };
                              };
                            };
                            /** Format: float */
                            price?: number;
                            tailor?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            detail_list_item?: {
                                id?: number;
                                __component?: string;
                                title?: string;
                              }[];
                            /** Format: float */
                            rating?: number;
                            favourite_products?: {
                              data?: {
                                  id?: number;
                                  attributes?: {
                                    mekhwar?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    user?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    /** Format: date-time */
                                    createdAt?: string;
                                    /** Format: date-time */
                                    updatedAt?: string;
                                    /** Format: date-time */
                                    publishedAt?: string;
                                    createdBy?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    updatedBy?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                  };
                                }[];
                            };
                            slug?: string;
                            customizable?: boolean;
                            fabrics?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            /** Format: date-time */
                            publishedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            localizations?: {
                              data?: unknown[];
                            };
                            locale?: string;
                          };
                        };
                      };
                    })[];
                  /** @enum {string} */
                  status?: "PENDING" | "PLACED" | "ON THE WAY" | "DELIVERED" | "CANCELLED" | "REFUNDED";
                  cancel_reason?: string;
                  /** Format: date */
                  cancel_date?: string;
                  /** @enum {string} */
                  size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  /** Format: date-time */
                  publishedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              };
            };
            addresses?: {
              data?: ({
                  id?: number;
                  attributes?: {
                    name?: string;
                    country?: string;
                    city?: string;
                    street?: string;
                    building?: string;
                    address?: string;
                    flat?: string;
                    mobile?: string;
                    user?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    /** @enum {string} */
                    type?: "home" | "office" | "gym" | "work";
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    /** Format: date-time */
                    publishedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                  };
                })[];
            };
            orders?: {
              data?: ({
                  id?: number;
                  attributes?: {
                    ref?: string;
                    customer_address?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    users_permissions_user?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    paid?: boolean;
                    /** Format: float */
                    tax?: number;
                    /** Format: float */
                    discount?: number;
                    /** Format: float */
                    total?: number;
                    /** Format: float */
                    delivery_charge?: number;
                    custom?: {
                        id?: number;
                        quantity?: number;
                        /** Format: float */
                        bust?: number;
                        /** Format: float */
                        wrist?: number;
                        /** Format: float */
                        shoulder?: number;
                        cup?: string;
                        /** Format: float */
                        chest_point?: number;
                        /** Format: float */
                        neck?: number;
                        /** Format: float */
                        hips?: number;
                        /** Format: float */
                        height?: number;
                        /** Format: float */
                        arm_width?: number;
                        /** Format: float */
                        sleeves_length?: number;
                        wrist_style?: string;
                        neck_style?: string;
                        customer_instructions?: string;
                        color?: string;
                        mekhwar?: {
                          data?: {
                            id?: number;
                            attributes?: Record<string, never>;
                          };
                        };
                      }[];
                    delivery_note?: string;
                    /** @enum {string} */
                    status?: "PLACED" | "SEWING" | "ON THE WAY" | "DELIVERED" | "CANCELLED";
                    /** @enum {string} */
                    size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                  };
                })[];
            };
            custom_design_orders?: {
              data?: ({
                  id?: number;
                  attributes?: {
                    design?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                    color?: string;
                    fabric?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    tailor?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    /** Format: float */
                    price?: number;
                    /** Format: float */
                    tax?: number;
                    /** Format: float */
                    delivery_charge?: number;
                    /** Format: float */
                    tailor_fee?: number;
                    /** @enum {string} */
                    status?: "PENDING" | "APPROVED" | "PROCESSING" | "REJECTED" | "CANCELLED" | "ON THE WAY" | "DELIVERED";
                    style?: unknown;
                    size_profile?: {
                      id?: number;
                      /** Format: float */
                      shoulder?: number;
                      /** Format: float */
                      bust?: number;
                      /** Format: float */
                      arm_length?: number;
                      /** Format: float */
                      wrist?: number;
                      /** Format: float */
                      top_length?: number;
                      /** Format: float */
                      top_width?: number;
                      cup?: string;
                      /** Format: float */
                      chest_point?: number;
                      /** Format: float */
                      neck?: number;
                      /** Format: float */
                      hips?: number;
                      /** Format: float */
                      height?: number;
                      /** Format: float */
                      sleeves_length?: number;
                      wrist_style?: string;
                      neck_style?: string;
                      /** Format: float */
                      arm_width?: number;
                    };
                    /** @enum {string} */
                    size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL" | "CUSTOM";
                    user?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    address?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    customer_instructions?: string;
                    design2?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                    design3?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                    design4?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    /** Format: date-time */
                    publishedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                  };
                })[];
            };
            favourite_products?: {
              data?: {
                  id?: number;
                  attributes?: Record<string, never>;
                }[];
            };
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      cup?: string;
      /** Format: float */
      chest_point?: number;
      /** Format: float */
      neck?: number;
      /** Format: float */
      hips?: number;
      /** Format: float */
      height?: number;
      /** Format: float */
      arm_width?: number;
      /** Format: float */
      sleeves_length?: number;
      wrist_style?: string;
      neck_style?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
    };
    SizeProfileResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["SizeProfile"];
    };
    SizeProfileResponse: {
      data?: components["schemas"]["SizeProfileResponseDataObject"];
      meta?: Record<string, never>;
    };
    TailorLocalizationRequest: {
      name: string;
      location: string;
      description: string;
      /** @example string or id */
      image: number | string;
      /** @example string or id */
      background: number | string;
      /** Format: date */
      date_joined: string;
      designs?: (number | string)[];
      experience: string;
      style?: string;
      philosophy?: string;
      mekhwars?: (number | string)[];
      /** @example string or id */
      category?: number | string;
      fabrics?: (number | string)[];
      /** Format: float */
      rating?: number;
      tags?: string;
      locale: string;
    };
    TailorRequest: {
      data: {
        name: string;
        location: string;
        description: string;
        /** @example string or id */
        image: number | string;
        /** @example string or id */
        background: number | string;
        /** Format: date */
        date_joined: string;
        designs?: (number | string)[];
        experience: string;
        style?: string;
        philosophy?: string;
        mekhwars?: (number | string)[];
        /** @example string or id */
        category?: number | string;
        fabrics?: (number | string)[];
        /** Format: float */
        rating?: number;
        tags?: string;
        locale?: string;
      };
    };
    TailorResponseDataObjectLocalized: {
      id?: number;
      attributes?: components["schemas"]["Tailor"];
    };
    TailorLocalizationResponse: {
      data?: components["schemas"]["TailorResponseDataObjectLocalized"];
      meta?: Record<string, never>;
    };
    TailorListResponseDataItemLocalized: {
      id?: number;
      attributes?: components["schemas"]["Tailor"];
    };
    TailorLocalizationListResponse: {
      data?: components["schemas"]["TailorListResponseDataItemLocalized"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    TailorListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["Tailor"];
    };
    TailorListResponse: {
      data?: components["schemas"]["TailorListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    Tailor: {
      name: string;
      location: string;
      description: string;
      image: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            alternativeText?: string;
            caption?: string;
            width?: number;
            height?: number;
            formats?: unknown;
            hash?: string;
            ext?: string;
            mime?: string;
            /** Format: float */
            size?: number;
            url?: string;
            previewUrl?: string;
            provider?: string;
            provider_metadata?: unknown;
            related?: {
              data?: {
                  id?: number;
                  attributes?: Record<string, never>;
                }[];
            };
            folder?: {
              data?: {
                id?: number;
                attributes?: {
                  name?: string;
                  pathId?: number;
                  parent?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  children?: {
                    data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      }[];
                  };
                  files?: {
                    data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: {
                                firstname?: string;
                                lastname?: string;
                                username?: string;
                                /** Format: email */
                                email?: string;
                                resetPasswordToken?: string;
                                registrationToken?: string;
                                isActive?: boolean;
                                roles?: {
                                  data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        code?: string;
                                        description?: string;
                                        users?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        permissions?: {
                                          data?: {
                                              id?: number;
                                              attributes?: {
                                                action?: string;
                                                actionParameters?: unknown;
                                                subject?: string;
                                                properties?: unknown;
                                                conditions?: unknown;
                                                role?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                              };
                                            }[];
                                        };
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    }[];
                                };
                                blocked?: boolean;
                                preferedLanguage?: string;
                                /** Format: date-time */
                                createdAt?: string;
                                /** Format: date-time */
                                updatedAt?: string;
                                createdBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                                updatedBy?: {
                                  data?: {
                                    id?: number;
                                    attributes?: Record<string, never>;
                                  };
                                };
                              };
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      }[];
                  };
                  path?: string;
                  /** Format: date-time */
                  createdAt?: string;
                  /** Format: date-time */
                  updatedAt?: string;
                  createdBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                  updatedBy?: {
                    data?: {
                      id?: number;
                      attributes?: Record<string, never>;
                    };
                  };
                };
              };
            };
            folderPath?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      background: {
        data?: {
          id?: number;
          attributes?: {
            name?: string;
            alternativeText?: string;
            caption?: string;
            width?: number;
            height?: number;
            formats?: unknown;
            hash?: string;
            ext?: string;
            mime?: string;
            /** Format: float */
            size?: number;
            url?: string;
            previewUrl?: string;
            provider?: string;
            provider_metadata?: unknown;
            related?: {
              data?: {
                  id?: number;
                  attributes?: Record<string, never>;
                }[];
            };
            folder?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            folderPath?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      /** Format: date */
      date_joined: string;
      designs?: {
        data?: ({
            id?: number;
            attributes?: {
              name?: string;
              tailor?: {
                data?: {
                  id?: number;
                  attributes?: {
                    name?: string;
                    location?: string;
                    description?: string;
                    image?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                    background?: {
                      data?: {
                        id?: number;
                        attributes?: {
                          name?: string;
                          alternativeText?: string;
                          caption?: string;
                          width?: number;
                          height?: number;
                          formats?: unknown;
                          hash?: string;
                          ext?: string;
                          mime?: string;
                          /** Format: float */
                          size?: number;
                          url?: string;
                          previewUrl?: string;
                          provider?: string;
                          provider_metadata?: unknown;
                          related?: {
                            data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              }[];
                          };
                          folder?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          folderPath?: string;
                          /** Format: date-time */
                          createdAt?: string;
                          /** Format: date-time */
                          updatedAt?: string;
                          createdBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                          updatedBy?: {
                            data?: {
                              id?: number;
                              attributes?: Record<string, never>;
                            };
                          };
                        };
                      };
                    };
                    /** Format: date */
                    date_joined?: string;
                    designs?: {
                      data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        }[];
                    };
                    experience?: string;
                    style?: string;
                    philosophy?: string;
                    mekhwars?: {
                      data?: ({
                          id?: number;
                          attributes?: {
                            title?: string;
                            description?: string;
                            main_image?: {
                              data?: {
                                id?: number;
                                attributes?: {
                                  name?: string;
                                  alternativeText?: string;
                                  caption?: string;
                                  width?: number;
                                  height?: number;
                                  formats?: unknown;
                                  hash?: string;
                                  ext?: string;
                                  mime?: string;
                                  /** Format: float */
                                  size?: number;
                                  url?: string;
                                  previewUrl?: string;
                                  provider?: string;
                                  provider_metadata?: unknown;
                                  related?: {
                                    data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      }[];
                                  };
                                  folder?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  folderPath?: string;
                                  /** Format: date-time */
                                  createdAt?: string;
                                  /** Format: date-time */
                                  updatedAt?: string;
                                  createdBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  updatedBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                };
                              };
                            };
                            images?: {
                              data?: {
                                  id?: number;
                                  attributes?: {
                                    name?: string;
                                    alternativeText?: string;
                                    caption?: string;
                                    width?: number;
                                    height?: number;
                                    formats?: unknown;
                                    hash?: string;
                                    ext?: string;
                                    mime?: string;
                                    /** Format: float */
                                    size?: number;
                                    url?: string;
                                    previewUrl?: string;
                                    provider?: string;
                                    provider_metadata?: unknown;
                                    related?: {
                                      data?: {
                                          id?: number;
                                          attributes?: Record<string, never>;
                                        }[];
                                    };
                                    folder?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    folderPath?: string;
                                    /** Format: date-time */
                                    createdAt?: string;
                                    /** Format: date-time */
                                    updatedAt?: string;
                                    createdBy?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    updatedBy?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                  };
                                }[];
                            };
                            category?: {
                              data?: {
                                id?: number;
                                attributes?: {
                                  Name?: string;
                                  Image?: {
                                    data?: {
                                      id?: number;
                                      attributes?: {
                                        name?: string;
                                        alternativeText?: string;
                                        caption?: string;
                                        width?: number;
                                        height?: number;
                                        formats?: unknown;
                                        hash?: string;
                                        ext?: string;
                                        mime?: string;
                                        /** Format: float */
                                        size?: number;
                                        url?: string;
                                        previewUrl?: string;
                                        provider?: string;
                                        provider_metadata?: unknown;
                                        related?: {
                                          data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            }[];
                                        };
                                        folder?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        folderPath?: string;
                                        /** Format: date-time */
                                        createdAt?: string;
                                        /** Format: date-time */
                                        updatedAt?: string;
                                        createdBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                        updatedBy?: {
                                          data?: {
                                            id?: number;
                                            attributes?: Record<string, never>;
                                          };
                                        };
                                      };
                                    };
                                  };
                                  mekhwars?: {
                                    data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      }[];
                                  };
                                  tailor?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  /** Format: date-time */
                                  createdAt?: string;
                                  /** Format: date-time */
                                  updatedAt?: string;
                                  /** Format: date-time */
                                  publishedAt?: string;
                                  createdBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  updatedBy?: {
                                    data?: {
                                      id?: number;
                                      attributes?: Record<string, never>;
                                    };
                                  };
                                  localizations?: {
                                    data?: unknown[];
                                  };
                                  locale?: string;
                                };
                              };
                            };
                            /** Format: float */
                            price?: number;
                            tailor?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            detail_list_item?: {
                                id?: number;
                                __component?: string;
                                title?: string;
                              }[];
                            /** Format: float */
                            rating?: number;
                            favourite_products?: {
                              data?: ({
                                  id?: number;
                                  attributes?: {
                                    mekhwar?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    user?: {
                                      data?: {
                                        id?: number;
                                        attributes?: {
                                          username?: string;
                                          /** Format: email */
                                          email?: string;
                                          provider?: string;
                                          resetPasswordToken?: string;
                                          confirmationToken?: string;
                                          confirmed?: boolean;
                                          blocked?: boolean;
                                          role?: {
                                            data?: {
                                              id?: number;
                                              attributes?: {
                                                name?: string;
                                                description?: string;
                                                type?: string;
                                                permissions?: {
                                                  data?: {
                                                      id?: number;
                                                      attributes?: {
                                                        action?: string;
                                                        role?: {
                                                          data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          };
                                                        };
                                                        /** Format: date-time */
                                                        createdAt?: string;
                                                        /** Format: date-time */
                                                        updatedAt?: string;
                                                        createdBy?: {
                                                          data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          };
                                                        };
                                                        updatedBy?: {
                                                          data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          };
                                                        };
                                                      };
                                                    }[];
                                                };
                                                users?: {
                                                  data?: {
                                                      id?: number;
                                                      attributes?: Record<string, never>;
                                                    }[];
                                                };
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                              };
                                            };
                                          };
                                          phone?: string;
                                          name?: string;
                                          size_profiles?: {
                                            data?: {
                                                id?: number;
                                                attributes?: {
                                                  title?: string;
                                                  /** Format: float */
                                                  shoulder?: number;
                                                  /** Format: float */
                                                  bust?: number;
                                                  /** Format: float */
                                                  arm_length?: number;
                                                  /** Format: float */
                                                  wrist?: number;
                                                  /** Format: float */
                                                  top_length?: number;
                                                  /** Format: float */
                                                  top_width?: number;
                                                  users_permissions_user?: {
                                                    data?: {
                                                      id?: number;
                                                      attributes?: Record<string, never>;
                                                    };
                                                  };
                                                  cup?: string;
                                                  /** Format: float */
                                                  chest_point?: number;
                                                  /** Format: float */
                                                  neck?: number;
                                                  /** Format: float */
                                                  hips?: number;
                                                  /** Format: float */
                                                  height?: number;
                                                  /** Format: float */
                                                  arm_width?: number;
                                                  /** Format: float */
                                                  sleeves_length?: number;
                                                  wrist_style?: string;
                                                  neck_style?: string;
                                                  /** Format: date-time */
                                                  createdAt?: string;
                                                  /** Format: date-time */
                                                  updatedAt?: string;
                                                  /** Format: date-time */
                                                  publishedAt?: string;
                                                  createdBy?: {
                                                    data?: {
                                                      id?: number;
                                                      attributes?: Record<string, never>;
                                                    };
                                                  };
                                                  updatedBy?: {
                                                    data?: {
                                                      id?: number;
                                                      attributes?: Record<string, never>;
                                                    };
                                                  };
                                                };
                                              }[];
                                          };
                                          cart?: {
                                            data?: {
                                              id?: number;
                                              attributes?: {
                                                user?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                custom?: ({
                                                    id?: number;
                                                    size_profile?: {
                                                      data?: {
                                                        id?: number;
                                                        attributes?: Record<string, never>;
                                                      };
                                                    };
                                                    quantity?: number;
                                                    /** Format: float */
                                                    shoulder?: number;
                                                    /** Format: float */
                                                    bust?: number;
                                                    /** Format: float */
                                                    wrist?: number;
                                                    save_size_profile?: boolean;
                                                    /** @enum {string} */
                                                    size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";
                                                    customer_instructions?: string;
                                                    chest_point?: string;
                                                    cup?: string;
                                                    /** Format: float */
                                                    arm_width?: number;
                                                    /** Format: float */
                                                    height?: number;
                                                    /** Format: float */
                                                    sleeves_length?: number;
                                                    /** Format: float */
                                                    neck?: number;
                                                    /** Format: float */
                                                    hips?: number;
                                                    mekhwar?: {
                                                      data?: {
                                                        id?: number;
                                                        attributes?: Record<string, never>;
                                                      };
                                                    };
                                                  })[];
                                                /** @enum {string} */
                                                status?: "PENDING" | "PLACED" | "ON THE WAY" | "DELIVERED" | "CANCELLED" | "REFUNDED";
                                                cancel_reason?: string;
                                                /** Format: date */
                                                cancel_date?: string;
                                                /** @enum {string} */
                                                size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";
                                                /** Format: date-time */
                                                createdAt?: string;
                                                /** Format: date-time */
                                                updatedAt?: string;
                                                /** Format: date-time */
                                                publishedAt?: string;
                                                createdBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                                updatedBy?: {
                                                  data?: {
                                                    id?: number;
                                                    attributes?: Record<string, never>;
                                                  };
                                                };
                                              };
                                            };
                                          };
                                          addresses?: {
                                            data?: ({
                                                id?: number;
                                                attributes?: {
                                                  name?: string;
                                                  country?: string;
                                                  city?: string;
                                                  street?: string;
                                                  building?: string;
                                                  address?: string;
                                                  flat?: string;
                                                  mobile?: string;
                                                  user?: {
                                                    data?: {
                                                      id?: number;
                                                      attributes?: Record<string, never>;
                                                    };
                                                  };
                                                  /** @enum {string} */
                                                  type?: "home" | "office" | "gym" | "work";
                                                  /** Format: date-time */
                                                  createdAt?: string;
                                                  /** Format: date-time */
                                                  updatedAt?: string;
                                                  /** Format: date-time */
                                                  publishedAt?: string;
                                                  createdBy?: {
                                                    data?: {
                                                      id?: number;
                                                      attributes?: Record<string, never>;
                                                    };
                                                  };
                                                  updatedBy?: {
                                                    data?: {
                                                      id?: number;
                                                      attributes?: Record<string, never>;
                                                    };
                                                  };
                                                };
                                              })[];
                                          };
                                          orders?: {
                                            data?: ({
                                                id?: number;
                                                attributes?: {
                                                  ref?: string;
                                                  customer_address?: {
                                                    data?: {
                                                      id?: number;
                                                      attributes?: Record<string, never>;
                                                    };
                                                  };
                                                  users_permissions_user?: {
                                                    data?: {
                                                      id?: number;
                                                      attributes?: Record<string, never>;
                                                    };
                                                  };
                                                  paid?: boolean;
                                                  /** Format: float */
                                                  tax?: number;
                                                  /** Format: float */
                                                  discount?: number;
                                                  /** Format: float */
                                                  total?: number;
                                                  /** Format: float */
                                                  delivery_charge?: number;
                                                  custom?: {
                                                      id?: number;
                                                      quantity?: number;
                                                      /** Format: float */
                                                      bust?: number;
                                                      /** Format: float */
                                                      wrist?: number;
                                                      /** Format: float */
                                                      shoulder?: number;
                                                      cup?: string;
                                                      /** Format: float */
                                                      chest_point?: number;
                                                      /** Format: float */
                                                      neck?: number;
                                                      /** Format: float */
                                                      hips?: number;
                                                      /** Format: float */
                                                      height?: number;
                                                      /** Format: float */
                                                      arm_width?: number;
                                                      /** Format: float */
                                                      sleeves_length?: number;
                                                      wrist_style?: string;
                                                      neck_style?: string;
                                                      customer_instructions?: string;
                                                      color?: string;
                                                      mekhwar?: {
                                                        data?: {
                                                          id?: number;
                                                          attributes?: Record<string, never>;
                                                        };
                                                      };
                                                    }[];
                                                  delivery_note?: string;
                                                  /** @enum {string} */
                                                  status?: "PLACED" | "SEWING" | "ON THE WAY" | "DELIVERED" | "CANCELLED";
                                                  /** @enum {string} */
                                                  size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";
                                                  /** Format: date-time */
                                                  createdAt?: string;
                                                  /** Format: date-time */
                                                  updatedAt?: string;
                                                  createdBy?: {
                                                    data?: {
                                                      id?: number;
                                                      attributes?: Record<string, never>;
                                                    };
                                                  };
                                                  updatedBy?: {
                                                    data?: {
                                                      id?: number;
                                                      attributes?: Record<string, never>;
                                                    };
                                                  };
                                                };
                                              })[];
                                          };
                                          custom_design_orders?: {
                                            data?: ({
                                                id?: number;
                                                attributes?: {
                                                  design?: {
                                                    data?: {
                                                      id?: number;
                                                      attributes?: {
                                                        name?: string;
                                                        alternativeText?: string;
                                                        caption?: string;
                                                        width?: number;
                                                        height?: number;
                                                        formats?: unknown;
                                                        hash?: string;
                                                        ext?: string;
                                                        mime?: string;
                                                        /** Format: float */
                                                        size?: number;
                                                        url?: string;
                                                        previewUrl?: string;
                                                        provider?: string;
                                                        provider_metadata?: unknown;
                                                        related?: {
                                                          data?: {
                                                              id?: number;
                                                              attributes?: Record<string, never>;
                                                            }[];
                                                        };
                                                        folder?: {
                                                          data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          };
                                                        };
                                                        folderPath?: string;
                                                        /** Format: date-time */
                                                        createdAt?: string;
                                                        /** Format: date-time */
                                                        updatedAt?: string;
                                                        createdBy?: {
                                                          data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          };
                                                        };
                                                        updatedBy?: {
                                                          data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          };
                                                        };
                                                      };
                                                    };
                                                  };
                                                  color?: string;
                                                  fabric?: {
                                                    data?: {
                                                      id?: number;
                                                      attributes?: {
                                                        name?: string;
                                                        /** Format: float */
                                                        price?: number;
                                                        description?: string;
                                                        main_image?: {
                                                          data?: {
                                                            id?: number;
                                                            attributes?: {
                                                              name?: string;
                                                              alternativeText?: string;
                                                              caption?: string;
                                                              width?: number;
                                                              height?: number;
                                                              formats?: unknown;
                                                              hash?: string;
                                                              ext?: string;
                                                              mime?: string;
                                                              /** Format: float */
                                                              size?: number;
                                                              url?: string;
                                                              previewUrl?: string;
                                                              provider?: string;
                                                              provider_metadata?: unknown;
                                                              related?: {
                                                                data?: {
                                                                    id?: number;
                                                                    attributes?: Record<string, never>;
                                                                  }[];
                                                              };
                                                              folder?: {
                                                                data?: {
                                                                  id?: number;
                                                                  attributes?: Record<string, never>;
                                                                };
                                                              };
                                                              folderPath?: string;
                                                              /** Format: date-time */
                                                              createdAt?: string;
                                                              /** Format: date-time */
                                                              updatedAt?: string;
                                                              createdBy?: {
                                                                data?: {
                                                                  id?: number;
                                                                  attributes?: Record<string, never>;
                                                                };
                                                              };
                                                              updatedBy?: {
                                                                data?: {
                                                                  id?: number;
                                                                  attributes?: Record<string, never>;
                                                                };
                                                              };
                                                            };
                                                          };
                                                        };
                                                        images?: {
                                                          data?: {
                                                              id?: number;
                                                              attributes?: {
                                                                name?: string;
                                                                alternativeText?: string;
                                                                caption?: string;
                                                                width?: number;
                                                                height?: number;
                                                                formats?: unknown;
                                                                hash?: string;
                                                                ext?: string;
                                                                mime?: string;
                                                                /** Format: float */
                                                                size?: number;
                                                                url?: string;
                                                                previewUrl?: string;
                                                                provider?: string;
                                                                provider_metadata?: unknown;
                                                                related?: {
                                                                  data?: {
                                                                      id?: number;
                                                                      attributes?: Record<string, never>;
                                                                    }[];
                                                                };
                                                                folder?: {
                                                                  data?: {
                                                                    id?: number;
                                                                    attributes?: Record<string, never>;
                                                                  };
                                                                };
                                                                folderPath?: string;
                                                                /** Format: date-time */
                                                                createdAt?: string;
                                                                /** Format: date-time */
                                                                updatedAt?: string;
                                                                createdBy?: {
                                                                  data?: {
                                                                    id?: number;
                                                                    attributes?: Record<string, never>;
                                                                  };
                                                                };
                                                                updatedBy?: {
                                                                  data?: {
                                                                    id?: number;
                                                                    attributes?: Record<string, never>;
                                                                  };
                                                                };
                                                              };
                                                            }[];
                                                        };
                                                        category?: {
                                                          data?: {
                                                            id?: number;
                                                            attributes?: {
                                                              name?: string;
                                                              Thumbnail?: {
                                                                data?: {
                                                                  id?: number;
                                                                  attributes?: {
                                                                    name?: string;
                                                                    alternativeText?: string;
                                                                    caption?: string;
                                                                    width?: number;
                                                                    height?: number;
                                                                    formats?: unknown;
                                                                    hash?: string;
                                                                    ext?: string;
                                                                    mime?: string;
                                                                    /** Format: float */
                                                                    size?: number;
                                                                    url?: string;
                                                                    previewUrl?: string;
                                                                    provider?: string;
                                                                    provider_metadata?: unknown;
                                                                    related?: {
                                                                      data?: {
                                                                          id?: number;
                                                                          attributes?: Record<string, never>;
                                                                        }[];
                                                                    };
                                                                    folder?: {
                                                                      data?: {
                                                                        id?: number;
                                                                        attributes?: Record<string, never>;
                                                                      };
                                                                    };
                                                                    folderPath?: string;
                                                                    /** Format: date-time */
                                                                    createdAt?: string;
                                                                    /** Format: date-time */
                                                                    updatedAt?: string;
                                                                    createdBy?: {
                                                                      data?: {
                                                                        id?: number;
                                                                        attributes?: Record<string, never>;
                                                                      };
                                                                    };
                                                                    updatedBy?: {
                                                                      data?: {
                                                                        id?: number;
                                                                        attributes?: Record<string, never>;
                                                                      };
                                                                    };
                                                                  };
                                                                };
                                                              };
                                                              fabrics?: {
                                                                data?: {
                                                                    id?: number;
                                                                    attributes?: Record<string, never>;
                                                                  }[];
                                                              };
                                                              /** Format: date-time */
                                                              createdAt?: string;
                                                              /** Format: date-time */
                                                              updatedAt?: string;
                                                              /** Format: date-time */
                                                              publishedAt?: string;
                                                              createdBy?: {
                                                                data?: {
                                                                  id?: number;
                                                                  attributes?: Record<string, never>;
                                                                };
                                                              };
                                                              updatedBy?: {
                                                                data?: {
                                                                  id?: number;
                                                                  attributes?: Record<string, never>;
                                                                };
                                                              };
                                                              localizations?: {
                                                                data?: unknown[];
                                                              };
                                                              locale?: string;
                                                            };
                                                          };
                                                        };
                                                        detail_list_item?: {
                                                            id?: number;
                                                            title?: string;
                                                          }[];
                                                        fabric_pattern?: {
                                                            id?: number;
                                                            title?: string;
                                                            /** Format: float */
                                                            price?: number;
                                                            image?: {
                                                              data?: {
                                                                id?: number;
                                                                attributes?: {
                                                                  name?: string;
                                                                  alternativeText?: string;
                                                                  caption?: string;
                                                                  width?: number;
                                                                  height?: number;
                                                                  formats?: unknown;
                                                                  hash?: string;
                                                                  ext?: string;
                                                                  mime?: string;
                                                                  /** Format: float */
                                                                  size?: number;
                                                                  url?: string;
                                                                  previewUrl?: string;
                                                                  provider?: string;
                                                                  provider_metadata?: unknown;
                                                                  related?: {
                                                                    data?: {
                                                                        id?: number;
                                                                        attributes?: Record<string, never>;
                                                                      }[];
                                                                  };
                                                                  folder?: {
                                                                    data?: {
                                                                      id?: number;
                                                                      attributes?: Record<string, never>;
                                                                    };
                                                                  };
                                                                  folderPath?: string;
                                                                  /** Format: date-time */
                                                                  createdAt?: string;
                                                                  /** Format: date-time */
                                                                  updatedAt?: string;
                                                                  createdBy?: {
                                                                    data?: {
                                                                      id?: number;
                                                                      attributes?: Record<string, never>;
                                                                    };
                                                                  };
                                                                  updatedBy?: {
                                                                    data?: {
                                                                      id?: number;
                                                                      attributes?: Record<string, never>;
                                                                    };
                                                                  };
                                                                };
                                                              };
                                                            };
                                                          }[];
                                                        /** Format: date-time */
                                                        createdAt?: string;
                                                        /** Format: date-time */
                                                        updatedAt?: string;
                                                        /** Format: date-time */
                                                        publishedAt?: string;
                                                        createdBy?: {
                                                          data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          };
                                                        };
                                                        updatedBy?: {
                                                          data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          };
                                                        };
                                                        localizations?: {
                                                          data?: unknown[];
                                                        };
                                                        locale?: string;
                                                      };
                                                    };
                                                  };
                                                  tailor?: {
                                                    data?: {
                                                      id?: number;
                                                      attributes?: Record<string, never>;
                                                    };
                                                  };
                                                  /** Format: float */
                                                  price?: number;
                                                  /** Format: float */
                                                  tax?: number;
                                                  /** Format: float */
                                                  delivery_charge?: number;
                                                  /** Format: float */
                                                  tailor_fee?: number;
                                                  /** @enum {string} */
                                                  status?: "PENDING" | "APPROVED" | "PROCESSING" | "REJECTED" | "CANCELLED" | "ON THE WAY" | "DELIVERED";
                                                  style?: unknown;
                                                  size_profile?: {
                                                    id?: number;
                                                    /** Format: float */
                                                    shoulder?: number;
                                                    /** Format: float */
                                                    bust?: number;
                                                    /** Format: float */
                                                    arm_length?: number;
                                                    /** Format: float */
                                                    wrist?: number;
                                                    /** Format: float */
                                                    top_length?: number;
                                                    /** Format: float */
                                                    top_width?: number;
                                                    cup?: string;
                                                    /** Format: float */
                                                    chest_point?: number;
                                                    /** Format: float */
                                                    neck?: number;
                                                    /** Format: float */
                                                    hips?: number;
                                                    /** Format: float */
                                                    height?: number;
                                                    /** Format: float */
                                                    sleeves_length?: number;
                                                    wrist_style?: string;
                                                    neck_style?: string;
                                                    /** Format: float */
                                                    arm_width?: number;
                                                  };
                                                  /** @enum {string} */
                                                  size?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL" | "CUSTOM";
                                                  user?: {
                                                    data?: {
                                                      id?: number;
                                                      attributes?: Record<string, never>;
                                                    };
                                                  };
                                                  address?: {
                                                    data?: {
                                                      id?: number;
                                                      attributes?: Record<string, never>;
                                                    };
                                                  };
                                                  customer_instructions?: string;
                                                  design2?: {
                                                    data?: {
                                                      id?: number;
                                                      attributes?: {
                                                        name?: string;
                                                        alternativeText?: string;
                                                        caption?: string;
                                                        width?: number;
                                                        height?: number;
                                                        formats?: unknown;
                                                        hash?: string;
                                                        ext?: string;
                                                        mime?: string;
                                                        /** Format: float */
                                                        size?: number;
                                                        url?: string;
                                                        previewUrl?: string;
                                                        provider?: string;
                                                        provider_metadata?: unknown;
                                                        related?: {
                                                          data?: {
                                                              id?: number;
                                                              attributes?: Record<string, never>;
                                                            }[];
                                                        };
                                                        folder?: {
                                                          data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          };
                                                        };
                                                        folderPath?: string;
                                                        /** Format: date-time */
                                                        createdAt?: string;
                                                        /** Format: date-time */
                                                        updatedAt?: string;
                                                        createdBy?: {
                                                          data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          };
                                                        };
                                                        updatedBy?: {
                                                          data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          };
                                                        };
                                                      };
                                                    };
                                                  };
                                                  design3?: {
                                                    data?: {
                                                      id?: number;
                                                      attributes?: {
                                                        name?: string;
                                                        alternativeText?: string;
                                                        caption?: string;
                                                        width?: number;
                                                        height?: number;
                                                        formats?: unknown;
                                                        hash?: string;
                                                        ext?: string;
                                                        mime?: string;
                                                        /** Format: float */
                                                        size?: number;
                                                        url?: string;
                                                        previewUrl?: string;
                                                        provider?: string;
                                                        provider_metadata?: unknown;
                                                        related?: {
                                                          data?: {
                                                              id?: number;
                                                              attributes?: Record<string, never>;
                                                            }[];
                                                        };
                                                        folder?: {
                                                          data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          };
                                                        };
                                                        folderPath?: string;
                                                        /** Format: date-time */
                                                        createdAt?: string;
                                                        /** Format: date-time */
                                                        updatedAt?: string;
                                                        createdBy?: {
                                                          data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          };
                                                        };
                                                        updatedBy?: {
                                                          data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          };
                                                        };
                                                      };
                                                    };
                                                  };
                                                  design4?: {
                                                    data?: {
                                                      id?: number;
                                                      attributes?: {
                                                        name?: string;
                                                        alternativeText?: string;
                                                        caption?: string;
                                                        width?: number;
                                                        height?: number;
                                                        formats?: unknown;
                                                        hash?: string;
                                                        ext?: string;
                                                        mime?: string;
                                                        /** Format: float */
                                                        size?: number;
                                                        url?: string;
                                                        previewUrl?: string;
                                                        provider?: string;
                                                        provider_metadata?: unknown;
                                                        related?: {
                                                          data?: {
                                                              id?: number;
                                                              attributes?: Record<string, never>;
                                                            }[];
                                                        };
                                                        folder?: {
                                                          data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          };
                                                        };
                                                        folderPath?: string;
                                                        /** Format: date-time */
                                                        createdAt?: string;
                                                        /** Format: date-time */
                                                        updatedAt?: string;
                                                        createdBy?: {
                                                          data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          };
                                                        };
                                                        updatedBy?: {
                                                          data?: {
                                                            id?: number;
                                                            attributes?: Record<string, never>;
                                                          };
                                                        };
                                                      };
                                                    };
                                                  };
                                                  /** Format: date-time */
                                                  createdAt?: string;
                                                  /** Format: date-time */
                                                  updatedAt?: string;
                                                  /** Format: date-time */
                                                  publishedAt?: string;
                                                  createdBy?: {
                                                    data?: {
                                                      id?: number;
                                                      attributes?: Record<string, never>;
                                                    };
                                                  };
                                                  updatedBy?: {
                                                    data?: {
                                                      id?: number;
                                                      attributes?: Record<string, never>;
                                                    };
                                                  };
                                                };
                                              })[];
                                          };
                                          favourite_products?: {
                                            data?: {
                                                id?: number;
                                                attributes?: Record<string, never>;
                                              }[];
                                          };
                                          /** Format: date-time */
                                          createdAt?: string;
                                          /** Format: date-time */
                                          updatedAt?: string;
                                          createdBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                          updatedBy?: {
                                            data?: {
                                              id?: number;
                                              attributes?: Record<string, never>;
                                            };
                                          };
                                        };
                                      };
                                    };
                                    /** Format: date-time */
                                    createdAt?: string;
                                    /** Format: date-time */
                                    updatedAt?: string;
                                    /** Format: date-time */
                                    publishedAt?: string;
                                    createdBy?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                    updatedBy?: {
                                      data?: {
                                        id?: number;
                                        attributes?: Record<string, never>;
                                      };
                                    };
                                  };
                                })[];
                            };
                            slug?: string;
                            customizable?: boolean;
                            fabrics?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            /** Format: date-time */
                            publishedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            localizations?: {
                              data?: unknown[];
                            };
                            locale?: string;
                          };
                        })[];
                    };
                    category?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    fabrics?: {
                      data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        }[];
                    };
                    /** Format: float */
                    rating?: number;
                    tags?: string;
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    /** Format: date-time */
                    publishedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    localizations?: {
                      data?: unknown[];
                    };
                    locale?: string;
                  };
                };
              };
              image?: {
                data?: {
                  id?: number;
                  attributes?: {
                    name?: string;
                    alternativeText?: string;
                    caption?: string;
                    width?: number;
                    height?: number;
                    formats?: unknown;
                    hash?: string;
                    ext?: string;
                    mime?: string;
                    /** Format: float */
                    size?: number;
                    url?: string;
                    previewUrl?: string;
                    provider?: string;
                    provider_metadata?: unknown;
                    related?: {
                      data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        }[];
                    };
                    folder?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    folderPath?: string;
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                  };
                };
              };
              /** Format: float */
              price?: number;
              /** Format: float */
              rating?: number;
              description?: string;
              sizes?: {
                  id?: number;
                  __component?: string;
                  name?: string;
                  shoulder?: number;
                  writst?: number;
                  top_width?: number;
                  bust?: number;
                  top_length?: number;
                  arm_length?: number;
                }[];
              /** Format: date-time */
              createdAt?: string;
              /** Format: date-time */
              updatedAt?: string;
              /** Format: date-time */
              publishedAt?: string;
              createdBy?: {
                data?: {
                  id?: number;
                  attributes?: Record<string, never>;
                };
              };
              updatedBy?: {
                data?: {
                  id?: number;
                  attributes?: Record<string, never>;
                };
              };
            };
          })[];
      };
      experience: string;
      style?: string;
      philosophy?: string;
      mekhwars?: {
        data?: {
            id?: number;
            attributes?: Record<string, never>;
          }[];
      };
      category?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      fabrics?: {
        data?: {
            id?: number;
            attributes?: Record<string, never>;
          }[];
      };
      /** Format: float */
      rating?: number;
      tags?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      localizations?: {
        data?: components["schemas"]["Tailor"][];
      };
      locale?: string;
    };
    TailorResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["Tailor"];
    };
    TailorResponse: {
      data?: components["schemas"]["TailorResponseDataObject"];
      meta?: Record<string, never>;
    };
    TermsAndConditionLocalizationRequest: {
      /** Format: float */
      version?: number;
      value?: string;
      locale: string;
    };
    TermsAndConditionRequest: {
      data: {
        /** Format: float */
        version?: number;
        value?: string;
        locale?: string;
      };
    };
    TermsAndConditionResponseDataObjectLocalized: {
      id?: number;
      attributes?: components["schemas"]["TermsAndCondition"];
    };
    TermsAndConditionLocalizationResponse: {
      data?: components["schemas"]["TermsAndConditionResponseDataObjectLocalized"];
      meta?: Record<string, never>;
    };
    TermsAndConditionListResponseDataItemLocalized: {
      id?: number;
      attributes?: components["schemas"]["TermsAndCondition"];
    };
    TermsAndConditionLocalizationListResponse: {
      data?: components["schemas"]["TermsAndConditionListResponseDataItemLocalized"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    TermsAndConditionListResponseDataItem: {
      id?: number;
      attributes?: components["schemas"]["TermsAndCondition"];
    };
    TermsAndConditionListResponse: {
      data?: components["schemas"]["TermsAndConditionListResponseDataItem"][];
      meta?: {
        pagination?: {
          page?: number;
          pageSize?: number;
          pageCount?: number;
          total?: number;
        };
      };
    };
    TermsAndCondition: {
      /** Format: float */
      version?: number;
      value?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      publishedAt?: string;
      createdBy?: {
        data?: {
          id?: number;
          attributes?: {
            firstname?: string;
            lastname?: string;
            username?: string;
            /** Format: email */
            email?: string;
            resetPasswordToken?: string;
            registrationToken?: string;
            isActive?: boolean;
            roles?: {
              data?: {
                  id?: number;
                  attributes?: {
                    name?: string;
                    code?: string;
                    description?: string;
                    users?: {
                      data?: {
                          id?: number;
                          attributes?: Record<string, never>;
                        }[];
                    };
                    permissions?: {
                      data?: {
                          id?: number;
                          attributes?: {
                            action?: string;
                            actionParameters?: unknown;
                            subject?: string;
                            properties?: unknown;
                            conditions?: unknown;
                            role?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            /** Format: date-time */
                            createdAt?: string;
                            /** Format: date-time */
                            updatedAt?: string;
                            createdBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                            updatedBy?: {
                              data?: {
                                id?: number;
                                attributes?: Record<string, never>;
                              };
                            };
                          };
                        }[];
                    };
                    /** Format: date-time */
                    createdAt?: string;
                    /** Format: date-time */
                    updatedAt?: string;
                    createdBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                    updatedBy?: {
                      data?: {
                        id?: number;
                        attributes?: Record<string, never>;
                      };
                    };
                  };
                }[];
            };
            blocked?: boolean;
            preferedLanguage?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
            updatedBy?: {
              data?: {
                id?: number;
                attributes?: Record<string, never>;
              };
            };
          };
        };
      };
      updatedBy?: {
        data?: {
          id?: number;
          attributes?: Record<string, never>;
        };
      };
      localizations?: {
        data?: components["schemas"]["TermsAndCondition"][];
      };
      locale?: string;
    };
    TermsAndConditionResponseDataObject: {
      id?: number;
      attributes?: components["schemas"]["TermsAndCondition"];
    };
    TermsAndConditionResponse: {
      data?: components["schemas"]["TermsAndConditionResponseDataObject"];
      meta?: Record<string, never>;
    };
    UploadFile: {
      id?: number;
      name?: string;
      alternativeText?: string;
      caption?: string;
      /** Format: integer */
      width?: number;
      /** Format: integer */
      height?: number;
      formats?: number;
      hash?: string;
      ext?: string;
      mime?: string;
      /** Format: double */
      size?: number;
      url?: string;
      previewUrl?: string;
      provider?: string;
      provider_metadata?: Record<string, never>;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    "Users-Permissions-Role": {
      id?: number;
      name?: string;
      description?: string;
      type?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    "Users-Permissions-User": {
      /** @example 1 */
      id?: number;
      /** @example foo.bar */
      username?: string;
      /** @example foo.bar@strapi.io */
      email?: string;
      /** @example local */
      provider?: string;
      /** @example true */
      confirmed?: boolean;
      /** @example false */
      blocked?: boolean;
      /**
       * Format: date-time
       * @example 2022-06-02T08:32:06.258Z
       */
      createdAt?: string;
      /**
       * Format: date-time
       * @example 2022-06-02T08:32:06.267Z
       */
      updatedAt?: string;
    };
    "Users-Permissions-UserRegistration": {
      /** @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c */
      jwt?: string;
      user?: components["schemas"]["Users-Permissions-User"];
    };
    "Users-Permissions-PermissionsTree": {
      [key: string]: {
        /** @description every controller of the api */
        controllers?: {
          [key: string]: {
            [key: string]: {
              enabled?: boolean;
              policy?: string;
            };
          };
        };
      };
    };
  };
  responses: never;
  parameters: never;
  requestBodies: {
    "Users-Permissions-RoleRequest": {
      content: {
        /**
         * @example {
         *   "name": "foo",
         *   "description": "role foo",
         *   "permissions": {
         *     "api::content-type.content-type": {
         *       "controllers": {
         *         "controllerA": {
         *           "find": {
         *             "enabled": true
         *           }
         *         }
         *       }
         *     }
         *   }
         * }
         */
        "application/json": {
          name?: string;
          description?: string;
          type?: string;
          permissions?: components["schemas"]["Users-Permissions-PermissionsTree"];
        };
      };
    };
  };
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  "get/about-us": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: Record<string, never>;
        /** @description Locale to apply */
        locale?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["AboutUsResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/about-us": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AboutUsRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["AboutUsResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/about-us": {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/about-us/localizations": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AboutUsLocalizationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["AboutUsLocalizationResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/carts": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: Record<string, never>;
        /** @description Locale to apply */
        locale?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CartListResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/carts": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CartRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CartResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/carts/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CartResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/carts/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CartRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CartResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/carts/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/cart/getOrInsert": {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CartResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/cart/add-mekhwar": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CartRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CartResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/cart/add-custom": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CartRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CartResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/cart/remove-item/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CartRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CartResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/cart/decrement/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CartRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CartResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/cart/increment/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CartRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CartResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/cart/coupon/check": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CartRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CartResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/categories": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: Record<string, never>;
        /** @description Locale to apply */
        locale?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CategoryListResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/categories": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CategoryRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CategoryResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/categories/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CategoryResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/categories/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CategoryRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CategoryResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/categories/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/categories/{id}/localizations": {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CategoryLocalizationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CategoryLocalizationResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/coupons": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: Record<string, never>;
        /** @description Locale to apply */
        locale?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CouponListResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/coupons": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CouponRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CouponResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/coupons/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CouponResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/coupons/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CouponRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CouponResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/coupons/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/coupon-usages": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: Record<string, never>;
        /** @description Locale to apply */
        locale?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CouponUsageListResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/coupon-usages": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CouponUsageRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CouponUsageResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/coupon-usages/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CouponUsageResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/coupon-usages/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CouponUsageRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CouponUsageResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/coupon-usages/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/custom-orders": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: Record<string, never>;
        /** @description Locale to apply */
        locale?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CustomOrderListResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/custom-orders": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CustomOrderRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CustomOrderResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/custom-orders/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CustomOrderResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/custom-orders/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CustomOrderRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CustomOrderResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/custom-orders/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/custom-order/customer-create-order": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CustomOrderRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CustomOrderResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/custom-order/cancel-custom-order": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CustomOrderRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CustomOrderResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/custom-order/customer-get-order/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CustomOrderResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/customer-addresses/my-addresses": {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CustomerAddressResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/customer-addresses/create": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CustomerAddressRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CustomerAddressResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/customer-addresses/updateAddress/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CustomerAddressRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CustomerAddressResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/customer-addresses/deleteAddress/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/customer-addresses": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: Record<string, never>;
        /** @description Locale to apply */
        locale?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CustomerAddressListResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/customer-addresses": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CustomerAddressRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CustomerAddressResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/customer-addresses/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CustomerAddressResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/customer-addresses/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CustomerAddressRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CustomerAddressResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/customer-addresses/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/designs": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: Record<string, never>;
        /** @description Locale to apply */
        locale?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DesignListResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/designs": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DesignRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DesignResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/designs/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DesignResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/designs/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DesignRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DesignResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/designs/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/email-templates": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: Record<string, never>;
        /** @description Locale to apply */
        locale?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmailTemplateListResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/email-templates": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["EmailTemplateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmailTemplateResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/email-templates/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmailTemplateResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/email-templates/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EmailTemplateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmailTemplateResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/email-templates/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/email-template/sendContactUs": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["EmailTemplateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmailTemplateResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/fabrics": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: Record<string, never>;
        /** @description Locale to apply */
        locale?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["FabricListResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/fabrics": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["FabricRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["FabricResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/fabrics/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["FabricResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/fabrics/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FabricRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["FabricResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/fabrics/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/fabrics/{id}/localizations": {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FabricLocalizationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["FabricLocalizationResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/fabric-categories": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: Record<string, never>;
        /** @description Locale to apply */
        locale?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["FabricCategoryListResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/fabric-categories": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["FabricCategoryRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["FabricCategoryResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/fabric-categories/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["FabricCategoryResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/fabric-categories/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FabricCategoryRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["FabricCategoryResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/fabric-categories/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/fabric-categories/{id}/localizations": {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FabricCategoryLocalizationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["FabricCategoryLocalizationResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/favourite-products": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: Record<string, never>;
        /** @description Locale to apply */
        locale?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["FavouriteProductListResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/favourite-products": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["FavouriteProductRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["FavouriteProductResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/favourite-products/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["FavouriteProductResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/favourite-products/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FavouriteProductRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["FavouriteProductResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/favourite-products/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/favourite-product/add": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["FavouriteProductRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["FavouriteProductResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/favourite-product/remove": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["FavouriteProductRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["FavouriteProductResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/favourite-product/get-user-favourite-products": {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["FavouriteProductResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/footer": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: Record<string, never>;
        /** @description Locale to apply */
        locale?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["FooterResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/footer": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["FooterRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["FooterResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/footer": {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/footer/localizations": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["FooterLocalizationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["FooterLocalizationResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/home-page": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: Record<string, never>;
        /** @description Locale to apply */
        locale?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["HomePageResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/home-page": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["HomePageRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["HomePageResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/home-page": {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/home-page/localizations": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["HomePageLocalizationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["HomePageLocalizationResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/mekhwars": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: Record<string, never>;
        /** @description Locale to apply */
        locale?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["MekhwarListResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/mekhwars": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["MekhwarRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["MekhwarResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/mekhwars/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["MekhwarResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/mekhwars/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MekhwarRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["MekhwarResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/mekhwars/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/mekhwars/{id}/localizations": {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MekhwarLocalizationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["MekhwarLocalizationResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/orders": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: Record<string, never>;
        /** @description Locale to apply */
        locale?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["OrderListResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/orders": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrderRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["OrderResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/orders/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["OrderResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/orders/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrderRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["OrderResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/orders/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/orders/client-secret": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrderRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["OrderResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/orders/publishable-key": {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["OrderResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/orders/wh": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrderRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["OrderResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/orders/user-profile": {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["OrderResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/privacy-policy": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: Record<string, never>;
        /** @description Locale to apply */
        locale?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PrivacyPolicyResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/privacy-policy": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PrivacyPolicyRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PrivacyPolicyResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/privacy-policy": {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/privacy-policy/localizations": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PrivacyPolicyLocalizationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PrivacyPolicyLocalizationResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/purchase-policy": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: Record<string, never>;
        /** @description Locale to apply */
        locale?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PurchasePolicyResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/purchase-policy": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PurchasePolicyRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PurchasePolicyResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/purchase-policy": {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/purchase-policy/localizations": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PurchasePolicyLocalizationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PurchasePolicyLocalizationResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/site-config": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: Record<string, never>;
        /** @description Locale to apply */
        locale?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SiteConfigResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/site-config": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SiteConfigRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SiteConfigResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/site-config": {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/size-profiles": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: Record<string, never>;
        /** @description Locale to apply */
        locale?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SizeProfileListResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/size-profiles": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SizeProfileRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SizeProfileResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/size-profiles/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SizeProfileResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/size-profiles/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SizeProfileRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SizeProfileResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/size-profiles/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/tailors": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: Record<string, never>;
        /** @description Locale to apply */
        locale?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TailorListResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/tailors": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TailorRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TailorResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/tailors/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TailorResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/tailors/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TailorRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TailorResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/tailors/{id}": {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/tailors/{id}/localizations": {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TailorLocalizationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TailorLocalizationResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "get/terms-and-condition": {
    parameters: {
      query?: {
        /** @description Sort by attributes ascending (asc) or descending (desc) */
        sort?: string;
        /** @description Return page/pageSize (default: true) */
        "pagination[withCount]"?: boolean;
        /** @description Page number (default: 0) */
        "pagination[page]"?: number;
        /** @description Page size (default: 25) */
        "pagination[pageSize]"?: number;
        /** @description Offset value (default: 0) */
        "pagination[start]"?: number;
        /** @description Number of entities to return (default: 25) */
        "pagination[limit]"?: number;
        /** @description Fields to return (ex: title,author) */
        fields?: string;
        /** @description Relations to return */
        populate?: string;
        /** @description Filters to apply */
        filters?: Record<string, never>;
        /** @description Locale to apply */
        locale?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TermsAndConditionResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "put/terms-and-condition": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TermsAndConditionRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TermsAndConditionResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "delete/terms-and-condition": {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": number;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  "post/terms-and-condition/localizations": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TermsAndConditionLocalizationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TermsAndConditionLocalizationResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
}


=== ./utils/cart.ts ===

export const getUserCart = () => {
  if (typeof window === "undefined") return;

  return JSON.parse(localStorage?.getItem("cart") || "{}");
}

export const storeCart = (data: any) => {
  if (typeof window === "undefined") return;
  localStorage.setItem("cart", JSON.stringify(data));
  window.dispatchEvent(new Event("storage"));
}

export const saveCartItems = (cartItems: any) => {
  if (typeof window === "undefined") return;
  localStorage.setItem("cart", JSON.stringify(cartItems));
  window.dispatchEvent(new Event("storage"));
}

export const clearCart = () => {
  if (typeof window === "undefined") return;

  localStorage.removeItem("cart");
}

export const setUserAddresses = (addresses: any) => {
  if (typeof window === "undefined") return;

  localStorage.setItem("addresses", JSON.stringify(addresses));
}

export const getUserAddresses = () => {
  if (typeof window === "undefined") return;

  const addresses: any = localStorage.getItem("addresses");
  if (addresses == "undefined") return [];
  return JSON.parse(addresses);
}

export const setUserProfiles = (profiles: any) => {
  if (typeof window === "undefined") return;

  localStorage.setItem("profiles", JSON.stringify(profiles));
}

export const getUserProfiles = () => {
  if (typeof window === "undefined") return;

  return JSON.parse(localStorage.getItem("profiles") || "[]");
}

export const storeAddresses = (addresses: any) => {
  if (typeof window === "undefined") return;
  localStorage.setItem("addresses", JSON.stringify(addresses));
  window.dispatchEvent(new Event("storage"));
}

=== ./utils/cookie.ts ===
import Cookies from "js-cookie";

/**
 * Sets the token and user information in cookies and redirects to the home page.
 *
 * @param {any} data - The data containing the JWT token and user information.
 * @return {void} This function does not return anything.
 */
export const setToken = (data: any) => {
  if (typeof window === "undefined") return;
  
  Cookies.set("token", data.jwt);
  Cookies.set("userID", data.user.id);
  Cookies.set("userName", data.user.name);
  Cookies.set("userEmail", data.user.email);

  // Router.push("/");
}

/**
 * Retrieves the token from the cookies.
 *
 * @return {string} The token value.
 */
export const getToken = () => {
  if (typeof window === "undefined") return;
  
  return Cookies.get("token");
}

/**
 * Removes the token and user information from cookies
 */
export const removeToken = () => {
  // Check if running in a browser environment
  if (typeof window === "undefined") return;

  // Remove the token and user information from cookies
  Cookies.remove("token");
  Cookies.remove("userId");
  Cookies.remove("userName");
  Cookies.remove("userEmail");
}

export const getIdFromServerCookie = (req: any) => {
  if (!req.header.cookie || '') {
    return undefined;
  }

  const idCookie = req.header.cookie.split(';').find((c: any) => c.trim().startsWith('userID='));

  if (!idCookie) {
    return undefined;
  }

  const id = idCookie.split('=')[1];
  return id;
}

export const getIdFromLocalCookie = () => {
  if (typeof window === "undefined") return;
  
  return Cookies.get("userID");
}

//getUserEmail, getUserName, getUserID
export const getEmailFromLocalCookie = () => {
  if (typeof window === "undefined") return;
  
  return Cookies.get("userEmail");
}

export const getUserNameFromLocalCookie = () => {
  if (typeof window === "undefined") return;
  
  return Cookies.get("userName");
}

export const getUserIDFromLocalCookie = () => {
  if (typeof window === "undefined") return;
  
  return Cookies.get("userID");
}

export const getTokenFromServerCookie = (req: any) => {
  if (!req.header.cookie || '') {
    return undefined;
  }
}

export const getTokenFromLocalCookie = () => {
  if (typeof window === "undefined") return;
  
  return Cookies.get("token");
}

/**
 * Get the favorites from the cookies
 * 
 * @returns {string | undefined} The favorites from the cookies, or undefined if window is undefined
 */
export const getFavorites = () => {
  // Check if window is undefined
  if (typeof window === "undefined") return;
  
  // Get the favorites from cookies
  return Cookies.get("favorites");
}

/**
 * Sets the favorites cookie with the given value.
 * @param favorites - The value to set as the favorites cookie.
 */
export const setFavorites = (favorites: string) => {
  // Set the favorites cookie
  Cookies.set("favorites", favorites);
}

/**
 * Add the given ID to the favorites list.
 * If the favorites list already exists, append the ID to it.
 * If the favorites list doesn't exist, create a new list with the ID.
 * @param id - The ID to add to the favorites list.
 */
export const addToFavourites = (id: string) => {
  // Get the current favorites list
  let favorites = getFavorites();

  // If the favorites list exists, append the ID to it
  if (favorites) {
    favorites = favorites + "," + id;
  } else {
    // If the favorites list doesn't exist, create a new list with the ID
    favorites = id;
  }

  // Set the updated favorites list
  setFavorites(favorites);
}

/**
 * Remove the given ID from the favorites list.
 * @param {string} id - The ID to be removed.
 */
export const removeFromFavorites = (id: string) => {
  // Get the current favorites list
  let favorites = getFavorites();

  // If favorites list exists, remove the ID from it
  if (favorites) {
    favorites = favorites.replace("," + id, "").replace(id, "");
  }

  // Update the favorites list
  setFavorites(favorites || "");
}

=== ./utils/favorites.ts ===


export const storeLocalFavorites = (data: any) => {
    if (typeof window === "undefined") return;
    localStorage.setItem("favorites", JSON.stringify(data));
}


export const getLocalFavorites = () => {
    if (typeof window === "undefined") return;

    return JSON.parse(localStorage?.getItem("favorites") || "[]");
}

=== ./utils/index.ts ===
export * from "./navigation";
export * from "./strings";
export * from "./cookie";
export * from "./favorites";

=== ./utils/navigation.ts ===
import {
  createLocalizedPathnamesNavigation,
  Pathnames
} from 'next-intl/navigation';

export const pathnames = {
  "/custom/journey/[fabricId]": "/custom/journey/[fabricId]",
  "/custom/journey/[fabricId]/design": "/custom/journey/[fabricId]/design",
  "/custom/journey/[fabricId]/tailor": "/custom/journey/[fabricId]/tailor",
  '/': '/',
  '/shop/tailors': "/shop/tailors",
  '/shop/tailors/[tailorId]': '/shop/tailors/[tailorId]',
  '/shop': '/shop',
  "/shop/fabric": '/shop/fabric',
  "/shop/fabric/[fabricId]": '/shop/fabric/[fabricId]',
  "/shop/design": "/shop/design",
  "/shop/design/[id]": "/shop/design/[id]",
  "/login": '/login',
  "/forgetPassword": '/forgetPassword',
  "/signup": '/signup',
  "/contact": '/contact',
  '/shop/[id]': '/shop/[id]',
  "/about": '/about',
  "/custom-mekhwar": '/custom-mekhwar',
  "/design": "/design",
  "/design/[designId]": "/design/[designId]",
  "/cart": "/cart",
  "#": "#",
  "/favorites": "/favorites",
  "/checkout": "/checkout",
  "/checkout/address": "/checkout/address",
  "/checkout/summary": "/checkout/summary",
  "/profile": "/profile",
  "/privacy-policy": "/privacy-policy",
  "/terms-and-conditions": "/terms-and-conditions",
  "/size-guide": "/size-guide",
  "/purchase-policy": "/purchase-policy",
};

export const locales = ['en', 'de', 'ar'];

export const localePrefix = "always";

export const {Link, redirect, usePathname, useRouter, getPathname} =
  createLocalizedPathnamesNavigation({locales, localePrefix, pathnames});

=== ./utils/strings.ts ===
/**
 * Truncates a given string to a specified length.
 *
 * @param {string} str - The string to be truncated.
 * @param {number} n - The maximum length of the truncated string.
 * @returns {string} The truncated string.
 */
export function truncate(str: string, n: number) {
  // Check if the string length is greater than the specified length
  if (str.length > n) {
    // If it is, truncate the string and append "..."
    return str.slice(0, n - 1) + '...';
  } else {
    // Otherwise, return the original string
    return str;
  }
}
